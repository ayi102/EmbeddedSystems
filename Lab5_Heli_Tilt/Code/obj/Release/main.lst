                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Fri Dec 12 19:34:08 2014
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _int0_isr
                             13 	.globl _main
                             14 	.globl _program_init
                             15 	.globl __sdcc_external_startup
                             16 	.globl _SDA
                             17 	.globl _SCL
                             18 	.globl _RST
                             19 	.globl _CS2
                             20 	.globl _CS1
                             21 	.globl _RS
                             22 	.globl _CY
                             23 	.globl _AC
                             24 	.globl _F0
                             25 	.globl _RS1
                             26 	.globl _RS0
                             27 	.globl _OV
                             28 	.globl _F1
                             29 	.globl _P
                             30 	.globl _PS
                             31 	.globl _PT1
                             32 	.globl _PX1
                             33 	.globl _PT0
                             34 	.globl _PX0
                             35 	.globl _RD
                             36 	.globl _WR
                             37 	.globl _T1
                             38 	.globl _T0
                             39 	.globl _INT1
                             40 	.globl _INT0
                             41 	.globl _TXD
                             42 	.globl _RXD
                             43 	.globl _P3_7
                             44 	.globl _P3_6
                             45 	.globl _P3_5
                             46 	.globl _P3_4
                             47 	.globl _P3_3
                             48 	.globl _P3_2
                             49 	.globl _P3_1
                             50 	.globl _P3_0
                             51 	.globl _EA
                             52 	.globl _ES
                             53 	.globl _ET1
                             54 	.globl _EX1
                             55 	.globl _ET0
                             56 	.globl _EX0
                             57 	.globl _P2_7
                             58 	.globl _P2_6
                             59 	.globl _P2_5
                             60 	.globl _P2_4
                             61 	.globl _P2_3
                             62 	.globl _P2_2
                             63 	.globl _P2_1
                             64 	.globl _P2_0
                             65 	.globl _SM0
                             66 	.globl _SM1
                             67 	.globl _SM2
                             68 	.globl _REN
                             69 	.globl _TB8
                             70 	.globl _RB8
                             71 	.globl _TI
                             72 	.globl _RI
                             73 	.globl _P1_7
                             74 	.globl _P1_6
                             75 	.globl _P1_5
                             76 	.globl _P1_4
                             77 	.globl _P1_3
                             78 	.globl _P1_2
                             79 	.globl _P1_1
                             80 	.globl _P1_0
                             81 	.globl _TF1
                             82 	.globl _TR1
                             83 	.globl _TF0
                             84 	.globl _TR0
                             85 	.globl _IE1
                             86 	.globl _IT1
                             87 	.globl _IE0
                             88 	.globl _IT0
                             89 	.globl _P0_7
                             90 	.globl _P0_6
                             91 	.globl _P0_5
                             92 	.globl _P0_4
                             93 	.globl _P0_3
                             94 	.globl _P0_2
                             95 	.globl _P0_1
                             96 	.globl _P0_0
                             97 	.globl _TF2
                             98 	.globl _EXF2
                             99 	.globl _RCLK
                            100 	.globl _TCLK
                            101 	.globl _EXEN2
                            102 	.globl _TR2
                            103 	.globl _C_T2
                            104 	.globl _CP_RL2
                            105 	.globl _T2CON_7
                            106 	.globl _T2CON_6
                            107 	.globl _T2CON_5
                            108 	.globl _T2CON_4
                            109 	.globl _T2CON_3
                            110 	.globl _T2CON_2
                            111 	.globl _T2CON_1
                            112 	.globl _T2CON_0
                            113 	.globl _PT2
                            114 	.globl _ET2
                            115 	.globl _TXD0
                            116 	.globl _RXD0
                            117 	.globl _BREG_F7
                            118 	.globl _BREG_F6
                            119 	.globl _BREG_F5
                            120 	.globl _BREG_F4
                            121 	.globl _BREG_F3
                            122 	.globl _BREG_F2
                            123 	.globl _BREG_F1
                            124 	.globl _BREG_F0
                            125 	.globl _P5_7
                            126 	.globl _P5_6
                            127 	.globl _P5_5
                            128 	.globl _P5_4
                            129 	.globl _P5_3
                            130 	.globl _P5_2
                            131 	.globl _P5_1
                            132 	.globl _P5_0
                            133 	.globl _P4_7
                            134 	.globl _P4_6
                            135 	.globl _P4_5
                            136 	.globl _P4_4
                            137 	.globl _P4_3
                            138 	.globl _P4_2
                            139 	.globl _P4_1
                            140 	.globl _P4_0
                            141 	.globl _PX0L
                            142 	.globl _PT0L
                            143 	.globl _PX1L
                            144 	.globl _PT1L
                            145 	.globl _PLS
                            146 	.globl _PT2L
                            147 	.globl _PPCL
                            148 	.globl _EC
                            149 	.globl _CCF0
                            150 	.globl _CCF1
                            151 	.globl _CCF2
                            152 	.globl _CCF3
                            153 	.globl _CCF4
                            154 	.globl _CR
                            155 	.globl _CF
                            156 	.globl _CKCON0
                            157 	.globl _B
                            158 	.globl _ACC
                            159 	.globl _PSW
                            160 	.globl _IP
                            161 	.globl _P3
                            162 	.globl _IE
                            163 	.globl _P2
                            164 	.globl _SBUF
                            165 	.globl _SCON
                            166 	.globl _P1
                            167 	.globl _TH1
                            168 	.globl _TH0
                            169 	.globl _TL1
                            170 	.globl _TL0
                            171 	.globl _TMOD
                            172 	.globl _TCON
                            173 	.globl _PCON
                            174 	.globl _DPH
                            175 	.globl _DPL
                            176 	.globl _SP
                            177 	.globl _P0
                            178 	.globl _TH2
                            179 	.globl _TL2
                            180 	.globl _RCAP2H
                            181 	.globl _RCAP2L
                            182 	.globl _T2CON
                            183 	.globl _SBUF0
                            184 	.globl _DP0L
                            185 	.globl _DP0H
                            186 	.globl _EECON
                            187 	.globl _KBF
                            188 	.globl _KBE
                            189 	.globl _KBLS
                            190 	.globl _BRL
                            191 	.globl _BDRCON
                            192 	.globl _T2MOD
                            193 	.globl _SPDAT
                            194 	.globl _SPSTA
                            195 	.globl _SPCON
                            196 	.globl _SADEN
                            197 	.globl _SADDR
                            198 	.globl _WDTPRG
                            199 	.globl _WDTRST
                            200 	.globl _P5
                            201 	.globl _P4
                            202 	.globl _IPH1
                            203 	.globl _IPL1
                            204 	.globl _IPH0
                            205 	.globl _IPL0
                            206 	.globl _IEN1
                            207 	.globl _IEN0
                            208 	.globl _CMOD
                            209 	.globl _CL
                            210 	.globl _CH
                            211 	.globl _CCON
                            212 	.globl _CCAPM4
                            213 	.globl _CCAPM3
                            214 	.globl _CCAPM2
                            215 	.globl _CCAPM1
                            216 	.globl _CCAPM0
                            217 	.globl _CCAP4L
                            218 	.globl _CCAP3L
                            219 	.globl _CCAP2L
                            220 	.globl _CCAP1L
                            221 	.globl _CCAP0L
                            222 	.globl _CCAP4H
                            223 	.globl _CCAP3H
                            224 	.globl _CCAP2H
                            225 	.globl _CCAP1H
                            226 	.globl _CCAP0H
                            227 	.globl _CKCKON1
                            228 	.globl _CKCKON0
                            229 	.globl _CKRL
                            230 	.globl _AUXR1
                            231 	.globl _AUXR
                            232 	.globl _calibrate
                            233 	.globl _calibrate_mode
                            234 	.globl _cheat_mode
                            235 	.globl _generate_level_PARM_5
                            236 	.globl _generate_level_PARM_4
                            237 	.globl _generate_level_PARM_3
                            238 	.globl _generate_level_PARM_2
                            239 	.globl _draw_level_PARM_4
                            240 	.globl _draw_level_PARM_3
                            241 	.globl _draw_level_PARM_2
                            242 	.globl _detect_collision_PARM_4
                            243 	.globl _detect_collision_PARM_3
                            244 	.globl _detect_collision_PARM_2
                            245 	.globl _write_score_PARM_2
                            246 	.globl _heli_line
                            247 	.globl _heli_page
                            248 	.globl _play_game
                            249 	.globl _high_scores
                            250 	.globl _score_update
                            251 	.globl _read_score
                            252 	.globl _write_score
                            253 	.globl _detect_collision
                            254 	.globl _draw_level
                            255 	.globl _generate_level
                            256 	.globl _update_heli
                            257 ;--------------------------------------------------------
                            258 ; special function registers
                            259 ;--------------------------------------------------------
                            260 	.area RSEG    (DATA)
                    008E    261 _AUXR	=	0x008e
                    00A2    262 _AUXR1	=	0x00a2
                    0097    263 _CKRL	=	0x0097
                    008F    264 _CKCKON0	=	0x008f
                    008F    265 _CKCKON1	=	0x008f
                    00FA    266 _CCAP0H	=	0x00fa
                    00FB    267 _CCAP1H	=	0x00fb
                    00FC    268 _CCAP2H	=	0x00fc
                    00FD    269 _CCAP3H	=	0x00fd
                    00FE    270 _CCAP4H	=	0x00fe
                    00EA    271 _CCAP0L	=	0x00ea
                    00EB    272 _CCAP1L	=	0x00eb
                    00EC    273 _CCAP2L	=	0x00ec
                    00ED    274 _CCAP3L	=	0x00ed
                    00EE    275 _CCAP4L	=	0x00ee
                    00DA    276 _CCAPM0	=	0x00da
                    00DB    277 _CCAPM1	=	0x00db
                    00DC    278 _CCAPM2	=	0x00dc
                    00DD    279 _CCAPM3	=	0x00dd
                    00DE    280 _CCAPM4	=	0x00de
                    00D8    281 _CCON	=	0x00d8
                    00F9    282 _CH	=	0x00f9
                    00E9    283 _CL	=	0x00e9
                    00D9    284 _CMOD	=	0x00d9
                    00A8    285 _IEN0	=	0x00a8
                    00B1    286 _IEN1	=	0x00b1
                    00B8    287 _IPL0	=	0x00b8
                    00B7    288 _IPH0	=	0x00b7
                    00B2    289 _IPL1	=	0x00b2
                    00B3    290 _IPH1	=	0x00b3
                    00C0    291 _P4	=	0x00c0
                    00D8    292 _P5	=	0x00d8
                    00A6    293 _WDTRST	=	0x00a6
                    00A7    294 _WDTPRG	=	0x00a7
                    00A9    295 _SADDR	=	0x00a9
                    00B9    296 _SADEN	=	0x00b9
                    00C3    297 _SPCON	=	0x00c3
                    00C4    298 _SPSTA	=	0x00c4
                    00C5    299 _SPDAT	=	0x00c5
                    00C9    300 _T2MOD	=	0x00c9
                    009B    301 _BDRCON	=	0x009b
                    009A    302 _BRL	=	0x009a
                    009C    303 _KBLS	=	0x009c
                    009D    304 _KBE	=	0x009d
                    009E    305 _KBF	=	0x009e
                    00D2    306 _EECON	=	0x00d2
                    0083    307 _DP0H	=	0x0083
                    0082    308 _DP0L	=	0x0082
                    0099    309 _SBUF0	=	0x0099
                    00C8    310 _T2CON	=	0x00c8
                    00CA    311 _RCAP2L	=	0x00ca
                    00CB    312 _RCAP2H	=	0x00cb
                    00CC    313 _TL2	=	0x00cc
                    00CD    314 _TH2	=	0x00cd
                    0080    315 _P0	=	0x0080
                    0081    316 _SP	=	0x0081
                    0082    317 _DPL	=	0x0082
                    0083    318 _DPH	=	0x0083
                    0087    319 _PCON	=	0x0087
                    0088    320 _TCON	=	0x0088
                    0089    321 _TMOD	=	0x0089
                    008A    322 _TL0	=	0x008a
                    008B    323 _TL1	=	0x008b
                    008C    324 _TH0	=	0x008c
                    008D    325 _TH1	=	0x008d
                    0090    326 _P1	=	0x0090
                    0098    327 _SCON	=	0x0098
                    0099    328 _SBUF	=	0x0099
                    00A0    329 _P2	=	0x00a0
                    00A8    330 _IE	=	0x00a8
                    00B0    331 _P3	=	0x00b0
                    00B8    332 _IP	=	0x00b8
                    00D0    333 _PSW	=	0x00d0
                    00E0    334 _ACC	=	0x00e0
                    00F0    335 _B	=	0x00f0
                    008F    336 _CKCON0	=	0x008f
                            337 ;--------------------------------------------------------
                            338 ; special function bits
                            339 ;--------------------------------------------------------
                            340 	.area RSEG    (DATA)
                    00DF    341 _CF	=	0x00df
                    00DE    342 _CR	=	0x00de
                    00DC    343 _CCF4	=	0x00dc
                    00DB    344 _CCF3	=	0x00db
                    00DA    345 _CCF2	=	0x00da
                    00D9    346 _CCF1	=	0x00d9
                    00D8    347 _CCF0	=	0x00d8
                    00AE    348 _EC	=	0x00ae
                    00BE    349 _PPCL	=	0x00be
                    00BD    350 _PT2L	=	0x00bd
                    00BC    351 _PLS	=	0x00bc
                    00BB    352 _PT1L	=	0x00bb
                    00BA    353 _PX1L	=	0x00ba
                    00B9    354 _PT0L	=	0x00b9
                    00B8    355 _PX0L	=	0x00b8
                    00C0    356 _P4_0	=	0x00c0
                    00C1    357 _P4_1	=	0x00c1
                    00C2    358 _P4_2	=	0x00c2
                    00C3    359 _P4_3	=	0x00c3
                    00C4    360 _P4_4	=	0x00c4
                    00C5    361 _P4_5	=	0x00c5
                    00C6    362 _P4_6	=	0x00c6
                    00C7    363 _P4_7	=	0x00c7
                    00D8    364 _P5_0	=	0x00d8
                    00D9    365 _P5_1	=	0x00d9
                    00DA    366 _P5_2	=	0x00da
                    00DB    367 _P5_3	=	0x00db
                    00DC    368 _P5_4	=	0x00dc
                    00DD    369 _P5_5	=	0x00dd
                    00DE    370 _P5_6	=	0x00de
                    00DF    371 _P5_7	=	0x00df
                    00F0    372 _BREG_F0	=	0x00f0
                    00F1    373 _BREG_F1	=	0x00f1
                    00F2    374 _BREG_F2	=	0x00f2
                    00F3    375 _BREG_F3	=	0x00f3
                    00F4    376 _BREG_F4	=	0x00f4
                    00F5    377 _BREG_F5	=	0x00f5
                    00F6    378 _BREG_F6	=	0x00f6
                    00F7    379 _BREG_F7	=	0x00f7
                    00B0    380 _RXD0	=	0x00b0
                    00B1    381 _TXD0	=	0x00b1
                    00AD    382 _ET2	=	0x00ad
                    00BD    383 _PT2	=	0x00bd
                    00C8    384 _T2CON_0	=	0x00c8
                    00C9    385 _T2CON_1	=	0x00c9
                    00CA    386 _T2CON_2	=	0x00ca
                    00CB    387 _T2CON_3	=	0x00cb
                    00CC    388 _T2CON_4	=	0x00cc
                    00CD    389 _T2CON_5	=	0x00cd
                    00CE    390 _T2CON_6	=	0x00ce
                    00CF    391 _T2CON_7	=	0x00cf
                    00C8    392 _CP_RL2	=	0x00c8
                    00C9    393 _C_T2	=	0x00c9
                    00CA    394 _TR2	=	0x00ca
                    00CB    395 _EXEN2	=	0x00cb
                    00CC    396 _TCLK	=	0x00cc
                    00CD    397 _RCLK	=	0x00cd
                    00CE    398 _EXF2	=	0x00ce
                    00CF    399 _TF2	=	0x00cf
                    0080    400 _P0_0	=	0x0080
                    0081    401 _P0_1	=	0x0081
                    0082    402 _P0_2	=	0x0082
                    0083    403 _P0_3	=	0x0083
                    0084    404 _P0_4	=	0x0084
                    0085    405 _P0_5	=	0x0085
                    0086    406 _P0_6	=	0x0086
                    0087    407 _P0_7	=	0x0087
                    0088    408 _IT0	=	0x0088
                    0089    409 _IE0	=	0x0089
                    008A    410 _IT1	=	0x008a
                    008B    411 _IE1	=	0x008b
                    008C    412 _TR0	=	0x008c
                    008D    413 _TF0	=	0x008d
                    008E    414 _TR1	=	0x008e
                    008F    415 _TF1	=	0x008f
                    0090    416 _P1_0	=	0x0090
                    0091    417 _P1_1	=	0x0091
                    0092    418 _P1_2	=	0x0092
                    0093    419 _P1_3	=	0x0093
                    0094    420 _P1_4	=	0x0094
                    0095    421 _P1_5	=	0x0095
                    0096    422 _P1_6	=	0x0096
                    0097    423 _P1_7	=	0x0097
                    0098    424 _RI	=	0x0098
                    0099    425 _TI	=	0x0099
                    009A    426 _RB8	=	0x009a
                    009B    427 _TB8	=	0x009b
                    009C    428 _REN	=	0x009c
                    009D    429 _SM2	=	0x009d
                    009E    430 _SM1	=	0x009e
                    009F    431 _SM0	=	0x009f
                    00A0    432 _P2_0	=	0x00a0
                    00A1    433 _P2_1	=	0x00a1
                    00A2    434 _P2_2	=	0x00a2
                    00A3    435 _P2_3	=	0x00a3
                    00A4    436 _P2_4	=	0x00a4
                    00A5    437 _P2_5	=	0x00a5
                    00A6    438 _P2_6	=	0x00a6
                    00A7    439 _P2_7	=	0x00a7
                    00A8    440 _EX0	=	0x00a8
                    00A9    441 _ET0	=	0x00a9
                    00AA    442 _EX1	=	0x00aa
                    00AB    443 _ET1	=	0x00ab
                    00AC    444 _ES	=	0x00ac
                    00AF    445 _EA	=	0x00af
                    00B0    446 _P3_0	=	0x00b0
                    00B1    447 _P3_1	=	0x00b1
                    00B2    448 _P3_2	=	0x00b2
                    00B3    449 _P3_3	=	0x00b3
                    00B4    450 _P3_4	=	0x00b4
                    00B5    451 _P3_5	=	0x00b5
                    00B6    452 _P3_6	=	0x00b6
                    00B7    453 _P3_7	=	0x00b7
                    00B0    454 _RXD	=	0x00b0
                    00B1    455 _TXD	=	0x00b1
                    00B2    456 _INT0	=	0x00b2
                    00B3    457 _INT1	=	0x00b3
                    00B4    458 _T0	=	0x00b4
                    00B5    459 _T1	=	0x00b5
                    00B6    460 _WR	=	0x00b6
                    00B7    461 _RD	=	0x00b7
                    00B8    462 _PX0	=	0x00b8
                    00B9    463 _PT0	=	0x00b9
                    00BA    464 _PX1	=	0x00ba
                    00BB    465 _PT1	=	0x00bb
                    00BC    466 _PS	=	0x00bc
                    00D0    467 _P	=	0x00d0
                    00D1    468 _F1	=	0x00d1
                    00D2    469 _OV	=	0x00d2
                    00D3    470 _RS0	=	0x00d3
                    00D4    471 _RS1	=	0x00d4
                    00D5    472 _F0	=	0x00d5
                    00D6    473 _AC	=	0x00d6
                    00D7    474 _CY	=	0x00d7
                    0093    475 _RS	=	0x0093
                    0091    476 _CS1	=	0x0091
                    0090    477 _CS2	=	0x0090
                    0096    478 _RST	=	0x0096
                    0094    479 _SCL	=	0x0094
                    0095    480 _SDA	=	0x0095
                            481 ;--------------------------------------------------------
                            482 ; overlayable register banks
                            483 ;--------------------------------------------------------
                            484 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     485 	.ds 8
                            486 ;--------------------------------------------------------
                            487 ; internal ram data
                            488 ;--------------------------------------------------------
                            489 	.area DSEG    (DATA)
   0000                     490 _detect_collision_sloc0_1_0:
   0000                     491 	.ds 3
   0003                     492 _detect_collision_sloc1_1_0:
   0003                     493 	.ds 2
   0005                     494 _detect_collision_sloc2_1_0:
   0005                     495 	.ds 2
   0007                     496 _detect_collision_sloc3_1_0:
   0007                     497 	.ds 2
   0009                     498 _detect_collision_sloc4_1_0:
   0009                     499 	.ds 3
   000C                     500 _detect_collision_sloc5_1_0:
   000C                     501 	.ds 2
   000E                     502 _detect_collision_sloc7_1_0:
   000E                     503 	.ds 2
   0010                     504 _draw_level_sloc0_1_0:
   0010                     505 	.ds 1
   0011                     506 _draw_level_sloc1_1_0:
   0011                     507 	.ds 1
   0012                     508 _draw_level_sloc2_1_0:
   0012                     509 	.ds 3
   0015                     510 _draw_level_sloc3_1_0:
   0015                     511 	.ds 3
   0018                     512 _generate_level_sloc0_1_0:
   0018                     513 	.ds 3
   001B                     514 _generate_level_sloc1_1_0:
   001B                     515 	.ds 3
   001E                     516 _generate_level_sloc2_1_0:
   001E                     517 	.ds 2
   0020                     518 _generate_level_sloc3_1_0:
   0020                     519 	.ds 2
   0022                     520 _generate_level_sloc4_1_0:
   0022                     521 	.ds 1
   0023                     522 _generate_level_sloc5_1_0:
   0023                     523 	.ds 1
   0024                     524 _generate_level_sloc6_1_0:
   0024                     525 	.ds 2
   0026                     526 _generate_level_sloc7_1_0:
   0026                     527 	.ds 2
   0028                     528 _generate_level_sloc8_1_0:
   0028                     529 	.ds 3
                            530 ;--------------------------------------------------------
                            531 ; overlayable items in internal ram 
                            532 ;--------------------------------------------------------
                            533 	.area OSEG    (OVR,DATA)
                            534 ;--------------------------------------------------------
                            535 ; Stack segment in internal ram 
                            536 ;--------------------------------------------------------
                            537 	.area	SSEG	(DATA)
   0000                     538 __start__stack:
   0000                     539 	.ds	1
                            540 
                            541 ;--------------------------------------------------------
                            542 ; indirectly addressable internal ram data
                            543 ;--------------------------------------------------------
                            544 	.area ISEG    (DATA)
                            545 ;--------------------------------------------------------
                            546 ; bit data
                            547 ;--------------------------------------------------------
                            548 	.area BSEG    (BIT)
                            549 ;--------------------------------------------------------
                            550 ; paged external ram data
                            551 ;--------------------------------------------------------
                            552 	.area PSEG    (PAG,XDATA)
                            553 ;--------------------------------------------------------
                            554 ; external ram data
                            555 ;--------------------------------------------------------
                            556 	.area XSEG    (XDATA)
   0000                     557 _heli_page::
   0000                     558 	.ds 2
   0002                     559 _heli_line::
   0002                     560 	.ds 1
   0003                     561 _main_difficulty_1_1:
   0003                     562 	.ds 1
   0004                     563 _play_game_difficulty_1_1:
   0004                     564 	.ds 1
   0005                     565 _play_game_credits_1_1:
   0005                     566 	.ds 1
   0006                     567 _play_game_a_score_1_1:
   0006                     568 	.ds 100
   006A                     569 _play_game_level_up_1_1:
   006A                     570 	.ds 68
   00AE                     571 _play_game_level_bott_1_1:
   00AE                     572 	.ds 68
   00F2                     573 _play_game_start_point_1_1:
   00F2                     574 	.ds 2
   00F4                     575 _play_game_score_1_1:
   00F4                     576 	.ds 2
   00F6                     577 _play_game_collision_1_1:
   00F6                     578 	.ds 1
   00F7                     579 _play_game_num_pillars_1_1:
   00F7                     580 	.ds 1
   00F8                     581 _play_game_game_delay_1_1:
   00F8                     582 	.ds 1
   00F9                     583 _high_scores_a_score_1_1:
   00F9                     584 	.ds 10
   0103                     585 _high_scores_i_1_1:
   0103                     586 	.ds 1
   0104                     587 _high_scores_x_1_1:
   0104                     588 	.ds 2
   0106                     589 _score_update_score_1_1:
   0106                     590 	.ds 2
   0108                     591 _score_update_i_1_1:
   0108                     592 	.ds 1
   0109                     593 _read_score_score_1_1:
   0109                     594 	.ds 1
   010A                     595 _read_score_score_val_1_1:
   010A                     596 	.ds 2
   010C                     597 _write_score_PARM_2:
   010C                     598 	.ds 1
   010D                     599 _write_score_score_1_1:
   010D                     600 	.ds 2
   010F                     601 _detect_collision_PARM_2:
   010F                     602 	.ds 3
   0112                     603 _detect_collision_PARM_3:
   0112                     604 	.ds 2
   0114                     605 _detect_collision_PARM_4:
   0114                     606 	.ds 1
   0115                     607 _detect_collision_level_top_1_1:
   0115                     608 	.ds 3
   0118                     609 _detect_collision_i_1_1:
   0118                     610 	.ds 2
   011A                     611 _detect_collision_pillar_start_up_1_1:
   011A                     612 	.ds 2
   011C                     613 _detect_collision_pillar_start_bott_1_1:
   011C                     614 	.ds 2
   011E                     615 _draw_level_PARM_2:
   011E                     616 	.ds 3
   0121                     617 _draw_level_PARM_3:
   0121                     618 	.ds 2
   0123                     619 _draw_level_PARM_4:
   0123                     620 	.ds 1
   0124                     621 _draw_level_level_top_1_1:
   0124                     622 	.ds 3
   0127                     623 _generate_level_PARM_2:
   0127                     624 	.ds 3
   012A                     625 _generate_level_PARM_3:
   012A                     626 	.ds 1
   012B                     627 _generate_level_PARM_4:
   012B                     628 	.ds 3
   012E                     629 _generate_level_PARM_5:
   012E                     630 	.ds 3
   0131                     631 _generate_level_level_top_1_1:
   0131                     632 	.ds 3
   0134                     633 _generate_level_pillar_len_up_1_1:
   0134                     634 	.ds 2
   0136                     635 _generate_level_pillar_len_bott_1_1:
   0136                     636 	.ds 2
   0138                     637 _generate_level_min_rand_1_1:
   0138                     638 	.ds 1
   0139                     639 _generate_level_max_rand_1_1:
   0139                     640 	.ds 1
   013A                     641 _generate_level_impossible_1_1:
   013A                     642 	.ds 1
   013B                     643 _int0_isr_mode_1_1:
   013B                     644 	.ds 1
                            645 ;--------------------------------------------------------
                            646 ; external initialized ram data
                            647 ;--------------------------------------------------------
                            648 	.area XISEG   (XDATA)
   0000                     649 _cheat_mode::
   0000                     650 	.ds 2
   0002                     651 _calibrate_mode::
   0002                     652 	.ds 1
   0003                     653 _calibrate::
   0003                     654 	.ds 1
                            655 	.area HOME    (CODE)
                            656 	.area GSINIT0 (CODE)
                            657 	.area GSINIT1 (CODE)
                            658 	.area GSINIT2 (CODE)
                            659 	.area GSINIT3 (CODE)
                            660 	.area GSINIT4 (CODE)
                            661 	.area GSINIT5 (CODE)
                            662 	.area GSINIT  (CODE)
                            663 	.area GSFINAL (CODE)
                            664 	.area CSEG    (CODE)
                            665 ;--------------------------------------------------------
                            666 ; interrupt vector 
                            667 ;--------------------------------------------------------
                            668 	.area HOME    (CODE)
   0000                     669 __interrupt_vect:
   0000 02s00r00            670 	ljmp	__sdcc_gsinit_startup
   0003 02s12r03            671 	ljmp	_int0_isr
                            672 ;--------------------------------------------------------
                            673 ; global & static initialisations
                            674 ;--------------------------------------------------------
                            675 	.area HOME    (CODE)
                            676 	.area GSINIT  (CODE)
                            677 	.area GSFINAL (CODE)
                            678 	.area GSINIT  (CODE)
                            679 	.globl __sdcc_gsinit_startup
                            680 	.globl __sdcc_program_startup
                            681 	.globl __start__stack
                            682 	.globl __mcs51_genXINIT
                            683 	.globl __mcs51_genXRAMCLEAR
                            684 	.globl __mcs51_genRAMCLEAR
                            685 ;------------------------------------------------------------
                            686 ;Allocation info for local variables in function 'play_game'
                            687 ;------------------------------------------------------------
                            688 ;difficulty                Allocated with name '_play_game_difficulty_1_1'
                            689 ;credits                   Allocated with name '_play_game_credits_1_1'
                            690 ;a_score                   Allocated with name '_play_game_a_score_1_1'
                            691 ;level_up                  Allocated with name '_play_game_level_up_1_1'
                            692 ;level_bott                Allocated with name '_play_game_level_bott_1_1'
                            693 ;start_point               Allocated with name '_play_game_start_point_1_1'
                            694 ;score                     Allocated with name '_play_game_score_1_1'
                            695 ;collision                 Allocated with name '_play_game_collision_1_1'
                            696 ;num_pillars               Allocated with name '_play_game_num_pillars_1_1'
                            697 ;game_delay                Allocated with name '_play_game_game_delay_1_1'
                            698 ;i                         Allocated with name '_play_game_i_1_1'
                            699 ;------------------------------------------------------------
                            700 ;	main.c:153: static unsigned char credits = 0;
                            701 ;	genAssign
   0000 90s00r05            702 	mov	dptr,#_play_game_credits_1_1
                            703 ;	Peephole 181	changed mov to clr
   0003 E4                  704 	clr	a
   0004 F0                  705 	movx	@dptr,a
                            706 ;------------------------------------------------------------
                            707 ;Allocation info for local variables in function 'int0_isr'
                            708 ;------------------------------------------------------------
                            709 ;mode                      Allocated with name '_int0_isr_mode_1_1'
                            710 ;------------------------------------------------------------
                            711 ;	main.c:611: static unsigned char mode = 0;
                            712 ;	genAssign
   0005 90s01r3B            713 	mov	dptr,#_int0_isr_mode_1_1
                            714 ;	Peephole 181	changed mov to clr
   0008 E4                  715 	clr	a
   0009 F0                  716 	movx	@dptr,a
                            717 	.area GSFINAL (CODE)
   0000 02s00r00            718 	ljmp	__sdcc_program_startup
                            719 ;--------------------------------------------------------
                            720 ; Home
                            721 ;--------------------------------------------------------
                            722 	.area HOME    (CODE)
                            723 	.area CSEG    (CODE)
   0000                     724 __sdcc_program_startup:
   0000 12s00r48            725 	lcall	_main
                            726 ;	return from main will lock up
   0003 80 FE               727 	sjmp .
                            728 ;--------------------------------------------------------
                            729 ; code
                            730 ;--------------------------------------------------------
                            731 	.area CSEG    (CODE)
                            732 ;------------------------------------------------------------
                            733 ;Allocation info for local variables in function '_sdcc_external_startup'
                            734 ;------------------------------------------------------------
                            735 ;------------------------------------------------------------
                            736 ;	main.c:75: _sdcc_external_startup()
                            737 ;	-----------------------------------------
                            738 ;	 function _sdcc_external_startup
                            739 ;	-----------------------------------------
   0005                     740 __sdcc_external_startup:
                    0002    741 	ar2 = 0x02
                    0003    742 	ar3 = 0x03
                    0004    743 	ar4 = 0x04
                    0005    744 	ar5 = 0x05
                    0006    745 	ar6 = 0x06
                    0007    746 	ar7 = 0x07
                    0000    747 	ar0 = 0x00
                    0001    748 	ar1 = 0x01
                            749 ;	main.c:78: AUXR |= 12;
                            750 ;	genOr
   0005 43 8E 0C            751 	orl	_AUXR,#0x0C
                            752 ;	main.c:80: CKCON0 |= 0x01;
                            753 ;	genOr
   0008 43 8F 01            754 	orl	_CKCON0,#0x01
                            755 ;	main.c:81: return 0;
                            756 ;	genRet
                            757 ;	Peephole 182.b	used 16 bit load of dptr
   000B 90 00 00            758 	mov	dptr,#0x0000
                            759 ;	Peephole 300	removed redundant label 00101$
   000E 22                  760 	ret
                            761 ;------------------------------------------------------------
                            762 ;Allocation info for local variables in function 'program_init'
                            763 ;------------------------------------------------------------
                            764 ;------------------------------------------------------------
                            765 ;	main.c:84: void program_init()
                            766 ;	-----------------------------------------
                            767 ;	 function program_init
                            768 ;	-----------------------------------------
   000F                     769 _program_init:
                            770 ;	main.c:87: timer1_init();
                            771 ;	genCall
   000F 12s00r00            772 	lcall	_timer1_init
                            773 ;	main.c:88: RS232_init();
                            774 ;	genCall
   0012 12s00r00            775 	lcall	_RS232_init
                            776 ;	main.c:89: lcdinit();
                            777 ;	genCall
   0015 12s00r00            778 	lcall	_lcdinit
                            779 ;	main.c:90: ADXL345_init();
                            780 ;	genCall
   0018 12s00r00            781 	lcall	_ADXL345_init
                            782 ;	main.c:92: ADXL345_disable_ints();
                            783 ;	genCall
   001B 12s00r00            784 	lcall	_ADXL345_disable_ints
                            785 ;	main.c:93: ADXL345_enable_bypass();
                            786 ;	genCall
   001E 12s00r00            787 	lcall	_ADXL345_enable_bypass
                            788 ;	main.c:97: heli_page = 3;
                            789 ;	genAssign
   0021 90s00r00            790 	mov	dptr,#_heli_page
   0024 74 03               791 	mov	a,#0x03
   0026 F0                  792 	movx	@dptr,a
   0027 E4                  793 	clr	a
   0028 A3                  794 	inc	dptr
   0029 F0                  795 	movx	@dptr,a
                            796 ;	main.c:98: heli_line = 3;
                            797 ;	genAssign
   002A 90s00r02            798 	mov	dptr,#_heli_line
   002D 74 03               799 	mov	a,#0x03
   002F F0                  800 	movx	@dptr,a
                            801 ;	main.c:99: cheat_mode = 0;
                            802 ;	genAssign
   0030 90s00r00            803 	mov	dptr,#_cheat_mode
   0033 E4                  804 	clr	a
   0034 F0                  805 	movx	@dptr,a
   0035 A3                  806 	inc	dptr
   0036 F0                  807 	movx	@dptr,a
                            808 ;	main.c:100: calibrate_mode = 0;
                            809 ;	genAssign
   0037 90s00r02            810 	mov	dptr,#_calibrate_mode
                            811 ;	Peephole 181	changed mov to clr
                            812 ;	main.c:101: calibrate = 0;
                            813 ;	genAssign
                            814 ;	Peephole 181	changed mov to clr
                            815 ;	Peephole 219.a	removed redundant clear
   003A E4                  816 	clr	a
   003B F0                  817 	movx	@dptr,a
   003C 90s00r03            818 	mov	dptr,#_calibrate
   003F F0                  819 	movx	@dptr,a
                            820 ;	main.c:104: IEN0 |= 0x81;     //Enable /INT0 interrupt
                            821 ;	genOr
   0040 43 A8 81            822 	orl	_IEN0,#0x81
                            823 ;	main.c:105: IT0 = 1;          //Edge Triggered button press
                            824 ;	genAssign
   0043 D2 88               825 	setb	_IT0
                            826 ;	main.c:108: MOTOR_OFF;
                            827 ;	genAssign
   0045 C2 97               828 	clr	_P1_7
                            829 ;	Peephole 300	removed redundant label 00101$
   0047 22                  830 	ret
                            831 ;------------------------------------------------------------
                            832 ;Allocation info for local variables in function 'main'
                            833 ;------------------------------------------------------------
                            834 ;game_choice               Allocated with name '_main_game_choice_1_1'
                            835 ;difficulty                Allocated with name '_main_difficulty_1_1'
                            836 ;------------------------------------------------------------
                            837 ;	main.c:111: void main(void)
                            838 ;	-----------------------------------------
                            839 ;	 function main
                            840 ;	-----------------------------------------
   0048                     841 _main:
                            842 ;	main.c:114: unsigned char game_choice, difficulty = 0;
                            843 ;	genAssign
   0048 90s00r03            844 	mov	dptr,#_main_difficulty_1_1
                            845 ;	Peephole 181	changed mov to clr
   004B E4                  846 	clr	a
   004C F0                  847 	movx	@dptr,a
                            848 ;	main.c:115: program_init();
                            849 ;	genCall
   004D 12s00r0F            850 	lcall	_program_init
                            851 ;	main.c:118: while(1)
   0050                     852 00108$:
                            853 ;	main.c:122: game_choice = game_menu();
                            854 ;	genCall
   0050 12s00r00            855 	lcall	_game_menu
   0053 AA 82               856 	mov	r2,dpl
                            857 ;	main.c:124: switch(game_choice)
                            858 ;	genCmpEq
                            859 ;	gencjneshort
   0055 BA 01 02            860 	cjne	r2,#0x01,00117$
                            861 ;	Peephole 112.b	changed ljmp to sjmp
   0058 80 0F               862 	sjmp	00101$
   005A                     863 00117$:
                            864 ;	genCmpEq
                            865 ;	gencjneshort
   005A BA 02 02            866 	cjne	r2,#0x02,00118$
                            867 ;	Peephole 112.b	changed ljmp to sjmp
   005D 80 16               868 	sjmp	00102$
   005F                     869 00118$:
                            870 ;	genCmpEq
                            871 ;	gencjneshort
   005F BA 03 02            872 	cjne	r2,#0x03,00119$
                            873 ;	Peephole 112.b	changed ljmp to sjmp
   0062 80 1C               874 	sjmp	00103$
   0064                     875 00119$:
                            876 ;	genCmpEq
                            877 ;	gencjneshort
                            878 ;	Peephole 112.b	changed ljmp to sjmp
                            879 ;	main.c:127: case 1: play_game(difficulty);
                            880 ;	Peephole 112.b	changed ljmp to sjmp
                            881 ;	Peephole 198.b	optimized misc jump sequence
   0064 BA 04 29            882 	cjne	r2,#0x04,00105$
   0067 80 1C               883 	sjmp	00104$
                            884 ;	Peephole 300	removed redundant label 00120$
   0069                     885 00101$:
                            886 ;	genAssign
   0069 90s00r03            887 	mov	dptr,#_main_difficulty_1_1
   006C E0                  888 	movx	a,@dptr
                            889 ;	genCall
   006D FA                  890 	mov	r2,a
                            891 ;	Peephole 244.c	loading dpl from a instead of r2
   006E F5 82               892 	mov	dpl,a
   0070 12s00rA1            893 	lcall	_play_game
                            894 ;	main.c:128: break;
                            895 ;	main.c:130: case 2: difficulty = difficulty_menu();
                            896 ;	Peephole 112.b	changed ljmp to sjmp
   0073 80 DB               897 	sjmp	00108$
   0075                     898 00102$:
                            899 ;	genCall
   0075 12s00r00            900 	lcall	_difficulty_menu
   0078 E5 82               901 	mov	a,dpl
                            902 ;	genAssign
   007A 90s00r03            903 	mov	dptr,#_main_difficulty_1_1
   007D F0                  904 	movx	@dptr,a
                            905 ;	main.c:131: break;
                            906 ;	main.c:133: case 3: high_scores();
                            907 ;	Peephole 112.b	changed ljmp to sjmp
   007E 80 D0               908 	sjmp	00108$
   0080                     909 00103$:
                            910 ;	genCall
   0080 12s03r8B            911 	lcall	_high_scores
                            912 ;	main.c:134: break;
                            913 ;	main.c:136: case 4: calibrate_mode = 1;
                            914 ;	Peephole 112.b	changed ljmp to sjmp
   0083 80 CB               915 	sjmp	00108$
   0085                     916 00104$:
                            917 ;	genAssign
   0085 90s00r02            918 	mov	dptr,#_calibrate_mode
   0088 74 01               919 	mov	a,#0x01
   008A F0                  920 	movx	@dptr,a
                            921 ;	main.c:137: accel_screen();
                            922 ;	genCall
   008B 12s00r00            923 	lcall	_accel_screen
                            924 ;	main.c:138: break;
                            925 ;	main.c:139: default: printf_tiny("EVERYTHING BROKE!\n\r");
                            926 ;	Peephole 112.b	changed ljmp to sjmp
   008E 80 C0               927 	sjmp	00108$
   0090                     928 00105$:
                            929 ;	genIpush
   0090 74rF1               930 	mov	a,#__str_0
   0092 C0 E0               931 	push	acc
   0094 74s01               932 	mov	a,#(__str_0 >> 8)
   0096 C0 E0               933 	push	acc
                            934 ;	genCall
   0098 12s00r00            935 	lcall	_printf_tiny
   009B 15 81               936 	dec	sp
   009D 15 81               937 	dec	sp
                            938 ;	main.c:141: }
                            939 ;	Peephole 112.b	changed ljmp to sjmp
   009F 80 AF               940 	sjmp	00108$
                            941 ;	Peephole 259.a	removed redundant label 00110$ and ret
                            942 ;
                            943 ;------------------------------------------------------------
                            944 ;Allocation info for local variables in function 'play_game'
                            945 ;------------------------------------------------------------
                            946 ;difficulty                Allocated with name '_play_game_difficulty_1_1'
                            947 ;credits                   Allocated with name '_play_game_credits_1_1'
                            948 ;a_score                   Allocated with name '_play_game_a_score_1_1'
                            949 ;level_up                  Allocated with name '_play_game_level_up_1_1'
                            950 ;level_bott                Allocated with name '_play_game_level_bott_1_1'
                            951 ;start_point               Allocated with name '_play_game_start_point_1_1'
                            952 ;score                     Allocated with name '_play_game_score_1_1'
                            953 ;collision                 Allocated with name '_play_game_collision_1_1'
                            954 ;num_pillars               Allocated with name '_play_game_num_pillars_1_1'
                            955 ;game_delay                Allocated with name '_play_game_game_delay_1_1'
                            956 ;i                         Allocated with name '_play_game_i_1_1'
                            957 ;------------------------------------------------------------
                            958 ;	main.c:150: void play_game(unsigned char difficulty)
                            959 ;	-----------------------------------------
                            960 ;	 function play_game
                            961 ;	-----------------------------------------
   00A1                     962 _play_game:
                            963 ;	genReceive
   00A1 E5 82               964 	mov	a,dpl
   00A3 90s00r04            965 	mov	dptr,#_play_game_difficulty_1_1
   00A6 F0                  966 	movx	@dptr,a
                            967 ;	main.c:157: int start_point = 128;
                            968 ;	genAssign
   00A7 90s00rF2            969 	mov	dptr,#_play_game_start_point_1_1
   00AA 74 80               970 	mov	a,#0x80
   00AC F0                  971 	movx	@dptr,a
   00AD E4                  972 	clr	a
   00AE A3                  973 	inc	dptr
   00AF F0                  974 	movx	@dptr,a
                            975 ;	main.c:158: unsigned int score = 0;
                            976 ;	genAssign
   00B0 90s00rF4            977 	mov	dptr,#_play_game_score_1_1
   00B3 E4                  978 	clr	a
   00B4 F0                  979 	movx	@dptr,a
   00B5 A3                  980 	inc	dptr
   00B6 F0                  981 	movx	@dptr,a
                            982 ;	main.c:159: unsigned char collision = 0;
                            983 ;	genAssign
   00B7 90s00rF6            984 	mov	dptr,#_play_game_collision_1_1
                            985 ;	Peephole 181	changed mov to clr
   00BA E4                  986 	clr	a
   00BB F0                  987 	movx	@dptr,a
                            988 ;	main.c:163: if(credits == 0)
                            989 ;	genAssign
   00BC 90s00r05            990 	mov	dptr,#_play_game_credits_1_1
   00BF E0                  991 	movx	a,@dptr
                            992 ;	genIfx
   00C0 FA                  993 	mov	r2,a
                            994 ;	Peephole 105	removed redundant mov
                            995 ;	genIfxJump
                            996 ;	Peephole 108.b	removed ljmp by inverse jump logic
   00C1 70 09               997 	jnz	00102$
                            998 ;	Peephole 300	removed redundant label 00140$
                            999 ;	main.c:165: creater_screen();
                           1000 ;	genCall
   00C3 12s00r00           1001 	lcall	_creater_screen
                           1002 ;	main.c:166: credits = 1;
                           1003 ;	genAssign
   00C6 90s00r05           1004 	mov	dptr,#_play_game_credits_1_1
   00C9 74 01              1005 	mov	a,#0x01
   00CB F0                 1006 	movx	@dptr,a
   00CC                    1007 00102$:
                           1008 ;	main.c:169: still_screen();
                           1009 ;	genCall
   00CC 12s00r00           1010 	lcall	_still_screen
                           1011 ;	main.c:172: GLCD_WriteHeli(HELI,3,3);
                           1012 ;	genAssign
   00CF 90s00r00           1013 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   00D2 74 03              1014 	mov	a,#0x03
   00D4 F0                 1015 	movx	@dptr,a
                           1016 ;	genAssign
   00D5 90s00r00           1017 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   00D8 74 03              1018 	mov	a,#0x03
   00DA F0                 1019 	movx	@dptr,a
                           1020 ;	genCall
   00DB 75 82 80           1021 	mov	dpl,#0x80
   00DE 12s00r00           1022 	lcall	_GLCD_WriteHeli
                           1023 ;	main.c:175: next_level_screen(0);
                           1024 ;	genCall
   00E1 75 82 00           1025 	mov	dpl,#0x00
   00E4 12s00r00           1026 	lcall	_next_level_screen
                           1027 ;	main.c:178: MOTOR_ON;
                           1028 ;	genAssign
   00E7 D2 97              1029 	setb	_P1_7
                           1030 ;	main.c:181: for(i = 0; i < MAX_LEVELS && !collision; i++)
                           1031 ;	genAssign
   00E9 90s00r04           1032 	mov	dptr,#_play_game_difficulty_1_1
   00EC E0                 1033 	movx	a,@dptr
   00ED FA                 1034 	mov	r2,a
                           1035 ;	genAssign
   00EE 7B 00              1036 	mov	r3,#0x00
   00F0                    1037 00121$:
                           1038 ;	genCmpLt
                           1039 ;	genCmp
   00F0 BB 0A 00           1040 	cjne	r3,#0x0A,00141$
   00F3                    1041 00141$:
                           1042 ;	genIfxJump
   00F3 40 03              1043 	jc	00142$
   00F5 02s03r7C           1044 	ljmp	00124$
   00F8                    1045 00142$:
                           1046 ;	genAssign
   00F8 90s00rF6           1047 	mov	dptr,#_play_game_collision_1_1
   00FB E0                 1048 	movx	a,@dptr
                           1049 ;	genIfx
   00FC FC                 1050 	mov	r4,a
                           1051 ;	Peephole 105	removed redundant mov
                           1052 ;	genIfxJump
   00FD 60 03              1053 	jz	00143$
   00FF 02s03r7C           1054 	ljmp	00124$
   0102                    1055 00143$:
                           1056 ;	main.c:186: if(i != FINAL_LEVEL)
                           1057 ;	genCmpEq
                           1058 ;	gencjneshort
   0102 BB 09 02           1059 	cjne	r3,#0x09,00144$
                           1060 ;	Peephole 112.b	changed ljmp to sjmp
   0105 80 3F              1061 	sjmp	00104$
   0107                    1062 00144$:
                           1063 ;	main.c:187: generate_level(level_up,level_bott, difficulty, &num_pillars, &game_delay);
                           1064 ;	genAssign
   0107 90s01r27           1065 	mov	dptr,#_generate_level_PARM_2
   010A 74rAE              1066 	mov	a,#_play_game_level_bott_1_1
   010C F0                 1067 	movx	@dptr,a
   010D A3                 1068 	inc	dptr
   010E 74s00              1069 	mov	a,#(_play_game_level_bott_1_1 >> 8)
   0110 F0                 1070 	movx	@dptr,a
   0111 A3                 1071 	inc	dptr
                           1072 ;	Peephole 181	changed mov to clr
   0112 E4                 1073 	clr	a
   0113 F0                 1074 	movx	@dptr,a
                           1075 ;	genAssign
   0114 90s01r2A           1076 	mov	dptr,#_generate_level_PARM_3
   0117 EA                 1077 	mov	a,r2
   0118 F0                 1078 	movx	@dptr,a
                           1079 ;	genAssign
   0119 90s01r2B           1080 	mov	dptr,#_generate_level_PARM_4
   011C 74rF7              1081 	mov	a,#_play_game_num_pillars_1_1
   011E F0                 1082 	movx	@dptr,a
   011F A3                 1083 	inc	dptr
   0120 74s00              1084 	mov	a,#(_play_game_num_pillars_1_1 >> 8)
   0122 F0                 1085 	movx	@dptr,a
   0123 A3                 1086 	inc	dptr
                           1087 ;	Peephole 181	changed mov to clr
   0124 E4                 1088 	clr	a
   0125 F0                 1089 	movx	@dptr,a
                           1090 ;	genAssign
   0126 90s01r2E           1091 	mov	dptr,#_generate_level_PARM_5
   0129 74rF8              1092 	mov	a,#_play_game_game_delay_1_1
   012B F0                 1093 	movx	@dptr,a
   012C A3                 1094 	inc	dptr
   012D 74s00              1095 	mov	a,#(_play_game_game_delay_1_1 >> 8)
   012F F0                 1096 	movx	@dptr,a
   0130 A3                 1097 	inc	dptr
                           1098 ;	Peephole 181	changed mov to clr
   0131 E4                 1099 	clr	a
   0132 F0                 1100 	movx	@dptr,a
                           1101 ;	genCall
                           1102 ;	Peephole 182.a	used 16 bit load of DPTR
   0133 90s00r6A           1103 	mov	dptr,#_play_game_level_up_1_1
   0136 75 F0 00           1104 	mov	b,#0x00
   0139 C0 02              1105 	push	ar2
   013B C0 03              1106 	push	ar3
   013D 12s0ArEC           1107 	lcall	_generate_level
   0140 D0 03              1108 	pop	ar3
   0142 D0 02              1109 	pop	ar2
                           1110 ;	Peephole 112.b	changed ljmp to sjmp
   0144 80 3E              1111 	sjmp	00133$
   0146                    1112 00104$:
                           1113 ;	main.c:189: generate_level(level_up,level_bott, IMPOSSIBLE, &num_pillars, &game_delay);
                           1114 ;	genAssign
   0146 90s01r27           1115 	mov	dptr,#_generate_level_PARM_2
   0149 74rAE              1116 	mov	a,#_play_game_level_bott_1_1
   014B F0                 1117 	movx	@dptr,a
   014C A3                 1118 	inc	dptr
   014D 74s00              1119 	mov	a,#(_play_game_level_bott_1_1 >> 8)
   014F F0                 1120 	movx	@dptr,a
   0150 A3                 1121 	inc	dptr
                           1122 ;	Peephole 181	changed mov to clr
   0151 E4                 1123 	clr	a
   0152 F0                 1124 	movx	@dptr,a
                           1125 ;	genAssign
   0153 90s01r2A           1126 	mov	dptr,#_generate_level_PARM_3
   0156 74 03              1127 	mov	a,#0x03
   0158 F0                 1128 	movx	@dptr,a
                           1129 ;	genAssign
   0159 90s01r2B           1130 	mov	dptr,#_generate_level_PARM_4
   015C 74rF7              1131 	mov	a,#_play_game_num_pillars_1_1
   015E F0                 1132 	movx	@dptr,a
   015F A3                 1133 	inc	dptr
   0160 74s00              1134 	mov	a,#(_play_game_num_pillars_1_1 >> 8)
   0162 F0                 1135 	movx	@dptr,a
   0163 A3                 1136 	inc	dptr
                           1137 ;	Peephole 181	changed mov to clr
   0164 E4                 1138 	clr	a
   0165 F0                 1139 	movx	@dptr,a
                           1140 ;	genAssign
   0166 90s01r2E           1141 	mov	dptr,#_generate_level_PARM_5
   0169 74rF8              1142 	mov	a,#_play_game_game_delay_1_1
   016B F0                 1143 	movx	@dptr,a
   016C A3                 1144 	inc	dptr
   016D 74s00              1145 	mov	a,#(_play_game_game_delay_1_1 >> 8)
   016F F0                 1146 	movx	@dptr,a
   0170 A3                 1147 	inc	dptr
                           1148 ;	Peephole 181	changed mov to clr
   0171 E4                 1149 	clr	a
   0172 F0                 1150 	movx	@dptr,a
                           1151 ;	genCall
                           1152 ;	Peephole 182.a	used 16 bit load of DPTR
   0173 90s00r6A           1153 	mov	dptr,#_play_game_level_up_1_1
   0176 75 F0 00           1154 	mov	b,#0x00
   0179 C0 02              1155 	push	ar2
   017B C0 03              1156 	push	ar3
   017D 12s0ArEC           1157 	lcall	_generate_level
   0180 D0 03              1158 	pop	ar3
   0182 D0 02              1159 	pop	ar2
                           1160 ;	main.c:192: while(!collision)
   0184                    1161 00133$:
                           1162 ;	genAssign
   0184 90s00rF4           1163 	mov	dptr,#_play_game_score_1_1
   0187 E0                 1164 	movx	a,@dptr
   0188 FC                 1165 	mov	r4,a
   0189 A3                 1166 	inc	dptr
   018A E0                 1167 	movx	a,@dptr
   018B FD                 1168 	mov	r5,a
                           1169 ;	genAssign
   018C 90s00rF2           1170 	mov	dptr,#_play_game_start_point_1_1
   018F E0                 1171 	movx	a,@dptr
   0190 FE                 1172 	mov	r6,a
   0191 A3                 1173 	inc	dptr
   0192 E0                 1174 	movx	a,@dptr
   0193 FF                 1175 	mov	r7,a
   0194                    1176 00110$:
                           1177 ;	genAssign
   0194 90s00rF6           1178 	mov	dptr,#_play_game_collision_1_1
   0197 E0                 1179 	movx	a,@dptr
                           1180 ;	genIfx
   0198 F8                 1181 	mov	r0,a
                           1182 ;	Peephole 105	removed redundant mov
                           1183 ;	genIfxJump
   0199 60 03              1184 	jz	00145$
   019B 02s03r02           1185 	ljmp	00138$
   019E                    1186 00145$:
                           1187 ;	main.c:195: draw_level(level_up, level_bott, start_point, num_pillars);
                           1188 ;	genAssign
   019E 90s00rF7           1189 	mov	dptr,#_play_game_num_pillars_1_1
   01A1 E0                 1190 	movx	a,@dptr
   01A2 F8                 1191 	mov	r0,a
                           1192 ;	genAssign
   01A3 90s01r1E           1193 	mov	dptr,#_draw_level_PARM_2
   01A6 74rAE              1194 	mov	a,#_play_game_level_bott_1_1
   01A8 F0                 1195 	movx	@dptr,a
   01A9 A3                 1196 	inc	dptr
   01AA 74s00              1197 	mov	a,#(_play_game_level_bott_1_1 >> 8)
   01AC F0                 1198 	movx	@dptr,a
   01AD A3                 1199 	inc	dptr
                           1200 ;	Peephole 181	changed mov to clr
   01AE E4                 1201 	clr	a
   01AF F0                 1202 	movx	@dptr,a
                           1203 ;	genAssign
   01B0 90s01r21           1204 	mov	dptr,#_draw_level_PARM_3
   01B3 EE                 1205 	mov	a,r6
   01B4 F0                 1206 	movx	@dptr,a
   01B5 A3                 1207 	inc	dptr
   01B6 EF                 1208 	mov	a,r7
   01B7 F0                 1209 	movx	@dptr,a
                           1210 ;	genAssign
   01B8 90s01r23           1211 	mov	dptr,#_draw_level_PARM_4
   01BB E8                 1212 	mov	a,r0
   01BC F0                 1213 	movx	@dptr,a
                           1214 ;	genCall
                           1215 ;	Peephole 182.a	used 16 bit load of DPTR
   01BD 90s00r6A           1216 	mov	dptr,#_play_game_level_up_1_1
   01C0 75 F0 00           1217 	mov	b,#0x00
   01C3 C0 02              1218 	push	ar2
   01C5 C0 03              1219 	push	ar3
   01C7 C0 04              1220 	push	ar4
   01C9 C0 05              1221 	push	ar5
   01CB C0 06              1222 	push	ar6
   01CD C0 07              1223 	push	ar7
   01CF 12s09rEF           1224 	lcall	_draw_level
   01D2 D0 07              1225 	pop	ar7
   01D4 D0 06              1226 	pop	ar6
   01D6 D0 05              1227 	pop	ar5
   01D8 D0 04              1228 	pop	ar4
   01DA D0 03              1229 	pop	ar3
   01DC D0 02              1230 	pop	ar2
                           1231 ;	main.c:197: update_heli();
                           1232 ;	genCall
   01DE C0 02              1233 	push	ar2
   01E0 C0 03              1234 	push	ar3
   01E2 C0 04              1235 	push	ar4
   01E4 C0 05              1236 	push	ar5
   01E6 C0 06              1237 	push	ar6
   01E8 C0 07              1238 	push	ar7
   01EA 12s0Er19           1239 	lcall	_update_heli
   01ED D0 07              1240 	pop	ar7
   01EF D0 06              1241 	pop	ar6
   01F1 D0 05              1242 	pop	ar5
   01F3 D0 04              1243 	pop	ar4
   01F5 D0 03              1244 	pop	ar3
   01F7 D0 02              1245 	pop	ar2
                           1246 ;	main.c:200: if(!cheat_mode)
                           1247 ;	genAssign
   01F9 90s00r00           1248 	mov	dptr,#_cheat_mode
   01FC E0                 1249 	movx	a,@dptr
   01FD F8                 1250 	mov	r0,a
   01FE A3                 1251 	inc	dptr
   01FF E0                 1252 	movx	a,@dptr
                           1253 ;	genIfx
   0200 F9                 1254 	mov	r1,a
                           1255 ;	Peephole 135	removed redundant mov
   0201 48                 1256 	orl	a,r0
                           1257 ;	genIfxJump
                           1258 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0202 70 46              1259 	jnz	00107$
                           1260 ;	Peephole 300	removed redundant label 00146$
                           1261 ;	main.c:201: collision = detect_collision(level_up, level_bott, start_point, num_pillars);
                           1262 ;	genAssign
   0204 90s00rF7           1263 	mov	dptr,#_play_game_num_pillars_1_1
   0207 E0                 1264 	movx	a,@dptr
   0208 F8                 1265 	mov	r0,a
                           1266 ;	genAssign
   0209 90s01r0F           1267 	mov	dptr,#_detect_collision_PARM_2
   020C 74rAE              1268 	mov	a,#_play_game_level_bott_1_1
   020E F0                 1269 	movx	@dptr,a
   020F A3                 1270 	inc	dptr
   0210 74s00              1271 	mov	a,#(_play_game_level_bott_1_1 >> 8)
   0212 F0                 1272 	movx	@dptr,a
   0213 A3                 1273 	inc	dptr
                           1274 ;	Peephole 181	changed mov to clr
   0214 E4                 1275 	clr	a
   0215 F0                 1276 	movx	@dptr,a
                           1277 ;	genAssign
   0216 90s01r12           1278 	mov	dptr,#_detect_collision_PARM_3
   0219 EE                 1279 	mov	a,r6
   021A F0                 1280 	movx	@dptr,a
   021B A3                 1281 	inc	dptr
   021C EF                 1282 	mov	a,r7
   021D F0                 1283 	movx	@dptr,a
                           1284 ;	genAssign
   021E 90s01r14           1285 	mov	dptr,#_detect_collision_PARM_4
   0221 E8                 1286 	mov	a,r0
   0222 F0                 1287 	movx	@dptr,a
                           1288 ;	genCall
                           1289 ;	Peephole 182.a	used 16 bit load of DPTR
   0223 90s00r6A           1290 	mov	dptr,#_play_game_level_up_1_1
   0226 75 F0 00           1291 	mov	b,#0x00
   0229 C0 02              1292 	push	ar2
   022B C0 03              1293 	push	ar3
   022D C0 04              1294 	push	ar4
   022F C0 05              1295 	push	ar5
   0231 C0 06              1296 	push	ar6
   0233 C0 07              1297 	push	ar7
   0235 12s06r19           1298 	lcall	_detect_collision
   0238 E5 82              1299 	mov	a,dpl
   023A D0 07              1300 	pop	ar7
   023C D0 06              1301 	pop	ar6
   023E D0 05              1302 	pop	ar5
   0240 D0 04              1303 	pop	ar4
   0242 D0 03              1304 	pop	ar3
   0244 D0 02              1305 	pop	ar2
                           1306 ;	genAssign
   0246 90s00rF6           1307 	mov	dptr,#_play_game_collision_1_1
   0249 F0                 1308 	movx	@dptr,a
   024A                    1309 00107$:
                           1310 ;	main.c:204: delay_ms(game_delay);
                           1311 ;	genAssign
   024A 90s00rF8           1312 	mov	dptr,#_play_game_game_delay_1_1
   024D E0                 1313 	movx	a,@dptr
   024E F8                 1314 	mov	r0,a
                           1315 ;	genCast
   024F 79 00              1316 	mov	r1,#0x00
                           1317 ;	genCall
   0251 88 82              1318 	mov	dpl,r0
   0253 89 83              1319 	mov	dph,r1
   0255 C0 02              1320 	push	ar2
   0257 C0 03              1321 	push	ar3
   0259 C0 04              1322 	push	ar4
   025B C0 05              1323 	push	ar5
   025D C0 06              1324 	push	ar6
   025F C0 07              1325 	push	ar7
   0261 12s00r00           1326 	lcall	_delay_ms
   0264 D0 07              1327 	pop	ar7
   0266 D0 06              1328 	pop	ar6
   0268 D0 05              1329 	pop	ar5
   026A D0 04              1330 	pop	ar4
   026C D0 03              1331 	pop	ar3
   026E D0 02              1332 	pop	ar2
                           1333 ;	main.c:206: score++;
                           1334 ;	genPlus
                           1335 ;     genPlusIncr
   0270 0C                 1336 	inc	r4
   0271 BC 00 01           1337 	cjne	r4,#0x00,00147$
   0274 0D                 1338 	inc	r5
   0275                    1339 00147$:
                           1340 ;	main.c:208: _itoa(score, a_score, BASE_10);
                           1341 ;	genCast
   0275 90s00r00           1342 	mov	dptr,#__itoa_PARM_2
   0278 74r06              1343 	mov	a,#_play_game_a_score_1_1
   027A F0                 1344 	movx	@dptr,a
   027B A3                 1345 	inc	dptr
   027C 74s00              1346 	mov	a,#(_play_game_a_score_1_1 >> 8)
   027E F0                 1347 	movx	@dptr,a
   027F A3                 1348 	inc	dptr
   0280 74 00              1349 	mov	a,#0x0
   0282 F0                 1350 	movx	@dptr,a
                           1351 ;	genAssign
   0283 90s00r00           1352 	mov	dptr,#__itoa_PARM_3
   0286 74 0A              1353 	mov	a,#0x0A
   0288 F0                 1354 	movx	@dptr,a
                           1355 ;	genCall
   0289 8C 82              1356 	mov	dpl,r4
   028B 8D 83              1357 	mov	dph,r5
   028D C0 02              1358 	push	ar2
   028F C0 03              1359 	push	ar3
   0291 C0 04              1360 	push	ar4
   0293 C0 05              1361 	push	ar5
   0295 C0 06              1362 	push	ar6
   0297 C0 07              1363 	push	ar7
   0299 12s00r00           1364 	lcall	__itoa
   029C D0 07              1365 	pop	ar7
   029E D0 06              1366 	pop	ar6
   02A0 D0 05              1367 	pop	ar5
   02A2 D0 04              1368 	pop	ar4
   02A4 D0 03              1369 	pop	ar3
   02A6 D0 02              1370 	pop	ar2
                           1371 ;	main.c:210: GLCD_WriteString(a_score, SCORE_PAGE, SCORE_LINE, INVERT);
                           1372 ;	genAssign
   02A8 90s00r00           1373 	mov	dptr,#_GLCD_WriteString_PARM_2
                           1374 ;	Peephole 181	changed mov to clr
   02AB E4                 1375 	clr	a
   02AC F0                 1376 	movx	@dptr,a
                           1377 ;	genAssign
   02AD 90s00r00           1378 	mov	dptr,#_GLCD_WriteString_PARM_3
   02B0 74 28              1379 	mov	a,#0x28
   02B2 F0                 1380 	movx	@dptr,a
                           1381 ;	genAssign
   02B3 90s00r00           1382 	mov	dptr,#_GLCD_WriteString_PARM_4
   02B6 74 01              1383 	mov	a,#0x01
   02B8 F0                 1384 	movx	@dptr,a
                           1385 ;	genCall
                           1386 ;	Peephole 182.a	used 16 bit load of DPTR
   02B9 90s00r06           1387 	mov	dptr,#_play_game_a_score_1_1
   02BC 75 F0 00           1388 	mov	b,#0x00
   02BF C0 02              1389 	push	ar2
   02C1 C0 03              1390 	push	ar3
   02C3 C0 04              1391 	push	ar4
   02C5 C0 05              1392 	push	ar5
   02C7 C0 06              1393 	push	ar6
   02C9 C0 07              1394 	push	ar7
   02CB 12s00r00           1395 	lcall	_GLCD_WriteString
   02CE D0 07              1396 	pop	ar7
   02D0 D0 06              1397 	pop	ar6
   02D2 D0 05              1398 	pop	ar5
   02D4 D0 04              1399 	pop	ar4
   02D6 D0 03              1400 	pop	ar3
   02D8 D0 02              1401 	pop	ar2
                           1402 ;	main.c:213: if(--start_point == -30 * num_pillars)
                           1403 ;	genMinus
                           1404 ;	genMinusDec
   02DA 1E                 1405 	dec	r6
   02DB BE FF 01           1406 	cjne	r6,#0xff,00148$
   02DE 1F                 1407 	dec	r7
   02DF                    1408 00148$:
                           1409 ;	genAssign
   02DF 90s00rF7           1410 	mov	dptr,#_play_game_num_pillars_1_1
   02E2 E0                 1411 	movx	a,@dptr
                           1412 ;	genMult
                           1413 ;	genMultOneByte
   02E3 F8                 1414 	mov	r0,a
   02E4 75 F0 1E           1415 	mov	b,#0x1e
                           1416 ;	Peephole 177.d	removed redundant move
   02E7 A4                 1417 	mul	ab
   02E8 F4                 1418 	cpl	a
   02E9 24 01              1419 	add	a,#1
   02EB C5 F0              1420 	xch	a,b
   02ED F4                 1421 	cpl	a
   02EE 34 00              1422 	addc	a,#0
   02F0 C5 F0              1423 	xch	a,b
                           1424 ;	Peephole 300	removed redundant label 00149$
   02F2 F8                 1425 	mov	r0,a
   02F3 A9 F0              1426 	mov	r1,b
                           1427 ;	genCmpEq
                           1428 ;	gencjneshort
   02F5 EE                 1429 	mov	a,r6
   02F6 B5 00 06           1430 	cjne	a,ar0,00150$
   02F9 EF                 1431 	mov	a,r7
   02FA B5 01 02           1432 	cjne	a,ar1,00150$
   02FD 80 03              1433 	sjmp	00151$
   02FF                    1434 00150$:
   02FF 02s01r94           1435 	ljmp	00110$
   0302                    1436 00151$:
                           1437 ;	main.c:214: break;
   0302                    1438 00138$:
                           1439 ;	genAssign
   0302 90s00rF4           1440 	mov	dptr,#_play_game_score_1_1
   0305 EC                 1441 	mov	a,r4
   0306 F0                 1442 	movx	@dptr,a
   0307 A3                 1443 	inc	dptr
   0308 ED                 1444 	mov	a,r5
   0309 F0                 1445 	movx	@dptr,a
                           1446 ;	genAssign
   030A 90s00rF2           1447 	mov	dptr,#_play_game_start_point_1_1
   030D EE                 1448 	mov	a,r6
   030E F0                 1449 	movx	@dptr,a
   030F A3                 1450 	inc	dptr
   0310 EF                 1451 	mov	a,r7
   0311 F0                 1452 	movx	@dptr,a
                           1453 ;	main.c:218: if(!collision && i != FINAL_LEVEL)
                           1454 ;	genAssign
   0312 90s00rF6           1455 	mov	dptr,#_play_game_collision_1_1
   0315 E0                 1456 	movx	a,@dptr
                           1457 ;	genIfx
   0316 FC                 1458 	mov	r4,a
                           1459 ;	Peephole 105	removed redundant mov
                           1460 ;	genIfxJump
                           1461 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0317 70 21              1462 	jnz	00117$
                           1463 ;	Peephole 300	removed redundant label 00152$
                           1464 ;	genCmpEq
                           1465 ;	gencjneshort
   0319 BB 09 02           1466 	cjne	r3,#0x09,00153$
                           1467 ;	Peephole 112.b	changed ljmp to sjmp
   031C 80 1C              1468 	sjmp	00117$
   031E                    1469 00153$:
                           1470 ;	main.c:220: next_level_screen(i + 1);
                           1471 ;	genPlus
                           1472 ;     genPlusIncr
   031E 74 01              1473 	mov	a,#0x01
                           1474 ;	Peephole 236.a	used r3 instead of ar3
   0320 2B                 1475 	add	a,r3
                           1476 ;	genCall
   0321 FC                 1477 	mov	r4,a
                           1478 ;	Peephole 244.c	loading dpl from a instead of r4
   0322 F5 82              1479 	mov	dpl,a
   0324 C0 02              1480 	push	ar2
   0326 C0 03              1481 	push	ar3
   0328 12s00r00           1482 	lcall	_next_level_screen
   032B D0 03              1483 	pop	ar3
   032D D0 02              1484 	pop	ar2
                           1485 ;	main.c:222: start_point = 128;
                           1486 ;	genAssign
   032F 90s00rF2           1487 	mov	dptr,#_play_game_start_point_1_1
   0332 74 80              1488 	mov	a,#0x80
   0334 F0                 1489 	movx	@dptr,a
   0335 E4                 1490 	clr	a
   0336 A3                 1491 	inc	dptr
   0337 F0                 1492 	movx	@dptr,a
                           1493 ;	Peephole 112.b	changed ljmp to sjmp
   0338 80 2F              1494 	sjmp	00118$
   033A                    1495 00117$:
                           1496 ;	main.c:225: else if(collision)
                           1497 ;	genAssign
   033A 90s00rF6           1498 	mov	dptr,#_play_game_collision_1_1
   033D E0                 1499 	movx	a,@dptr
                           1500 ;	genIfx
   033E FC                 1501 	mov	r4,a
                           1502 ;	Peephole 105	removed redundant mov
                           1503 ;	genIfxJump
                           1504 ;	Peephole 108.c	removed ljmp by inverse jump logic
   033F 60 1D              1505 	jz	00114$
                           1506 ;	Peephole 300	removed redundant label 00154$
                           1507 ;	main.c:228: MOTOR_OFF;
                           1508 ;	genAssign
   0341 C2 97              1509 	clr	_P1_7
                           1510 ;	main.c:230: delay_ms(1500);
                           1511 ;	genCall
                           1512 ;	Peephole 182.b	used 16 bit load of dptr
   0343 90 05 DC           1513 	mov	dptr,#0x05DC
   0346 C0 02              1514 	push	ar2
   0348 C0 03              1515 	push	ar3
   034A 12s00r00           1516 	lcall	_delay_ms
   034D D0 03              1517 	pop	ar3
   034F D0 02              1518 	pop	ar2
                           1519 ;	main.c:232: game_over();
                           1520 ;	genCall
   0351 C0 02              1521 	push	ar2
   0353 C0 03              1522 	push	ar3
   0355 12s00r00           1523 	lcall	_game_over
   0358 D0 03              1524 	pop	ar3
   035A D0 02              1525 	pop	ar2
                           1526 ;	Peephole 112.b	changed ljmp to sjmp
   035C 80 0B              1527 	sjmp	00118$
   035E                    1528 00114$:
                           1529 ;	main.c:238: cheater();
                           1530 ;	genCall
   035E C0 02              1531 	push	ar2
   0360 C0 03              1532 	push	ar3
   0362 12s00r00           1533 	lcall	_cheater
   0365 D0 03              1534 	pop	ar3
   0367 D0 02              1535 	pop	ar2
   0369                    1536 00118$:
                           1537 ;	main.c:242: heli_page = 3;
                           1538 ;	genAssign
   0369 90s00r00           1539 	mov	dptr,#_heli_page
   036C 74 03              1540 	mov	a,#0x03
   036E F0                 1541 	movx	@dptr,a
   036F E4                 1542 	clr	a
   0370 A3                 1543 	inc	dptr
   0371 F0                 1544 	movx	@dptr,a
                           1545 ;	main.c:243: heli_line = 3;
                           1546 ;	genAssign
   0372 90s00r02           1547 	mov	dptr,#_heli_line
   0375 74 03              1548 	mov	a,#0x03
   0377 F0                 1549 	movx	@dptr,a
                           1550 ;	main.c:181: for(i = 0; i < MAX_LEVELS && !collision; i++)
                           1551 ;	genPlus
                           1552 ;     genPlusIncr
   0378 0B                 1553 	inc	r3
   0379 02s00rF0           1554 	ljmp	00121$
   037C                    1555 00124$:
                           1556 ;	main.c:246: score_update(score);
                           1557 ;	genAssign
   037C 90s00rF4           1558 	mov	dptr,#_play_game_score_1_1
   037F E0                 1559 	movx	a,@dptr
   0380 FA                 1560 	mov	r2,a
   0381 A3                 1561 	inc	dptr
   0382 E0                 1562 	movx	a,@dptr
   0383 FB                 1563 	mov	r3,a
                           1564 ;	genCall
   0384 8A 82              1565 	mov	dpl,r2
   0386 8B 83              1566 	mov	dph,r3
                           1567 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0388 02s04r6B           1568 	ljmp	_score_update
                           1569 ;
                           1570 ;------------------------------------------------------------
                           1571 ;Allocation info for local variables in function 'high_scores'
                           1572 ;------------------------------------------------------------
                           1573 ;score                     Allocated with name '_high_scores_score_1_1'
                           1574 ;a_score                   Allocated with name '_high_scores_a_score_1_1'
                           1575 ;i                         Allocated with name '_high_scores_i_1_1'
                           1576 ;x                         Allocated with name '_high_scores_x_1_1'
                           1577 ;------------------------------------------------------------
                           1578 ;	main.c:251: void high_scores()
                           1579 ;	-----------------------------------------
                           1580 ;	 function high_scores
                           1581 ;	-----------------------------------------
   038B                    1582 _high_scores:
                           1583 ;	main.c:257: int x = 0;
                           1584 ;	genAssign
   038B 90s01r04           1585 	mov	dptr,#_high_scores_x_1_1
   038E E4                 1586 	clr	a
   038F F0                 1587 	movx	@dptr,a
   0390 A3                 1588 	inc	dptr
   0391 F0                 1589 	movx	@dptr,a
                           1590 ;	main.c:259: clear_game_screen();
                           1591 ;	genCall
   0392 12s00r00           1592 	lcall	_clear_game_screen
                           1593 ;	main.c:262: for(i = 0; i < 5; i++)
                           1594 ;	genAssign
   0395 90s01r03           1595 	mov	dptr,#_high_scores_i_1_1
                           1596 ;	Peephole 181	changed mov to clr
   0398 E4                 1597 	clr	a
   0399 F0                 1598 	movx	@dptr,a
   039A                    1599 00104$:
                           1600 ;	genAssign
   039A 90s01r03           1601 	mov	dptr,#_high_scores_i_1_1
   039D E0                 1602 	movx	a,@dptr
   039E FA                 1603 	mov	r2,a
                           1604 ;	genCmpLt
                           1605 ;	genCmp
   039F BA 05 00           1606 	cjne	r2,#0x05,00114$
   03A2                    1607 00114$:
                           1608 ;	genIfxJump
   03A2 40 03              1609 	jc	00115$
   03A4 02s04r3B           1610 	ljmp	00107$
   03A7                    1611 00115$:
                           1612 ;	main.c:265: score = read_score(i + 1);
                           1613 ;	genPlus
                           1614 ;     genPlusIncr
   03A7 74 01              1615 	mov	a,#0x01
                           1616 ;	Peephole 236.a	used r2 instead of ar2
   03A9 2A                 1617 	add	a,r2
                           1618 ;	genCall
   03AA FB                 1619 	mov	r3,a
                           1620 ;	Peephole 244.c	loading dpl from a instead of r3
   03AB F5 82              1621 	mov	dpl,a
   03AD C0 02              1622 	push	ar2
   03AF C0 03              1623 	push	ar3
   03B1 12s05r17           1624 	lcall	_read_score
   03B4 AC 82              1625 	mov	r4,dpl
   03B6 AD 83              1626 	mov	r5,dph
   03B8 D0 03              1627 	pop	ar3
   03BA D0 02              1628 	pop	ar2
                           1629 ;	main.c:267: _itoa(score, a_score, 10);
                           1630 ;	genCast
   03BC 90s00r00           1631 	mov	dptr,#__itoa_PARM_2
   03BF 74rF9              1632 	mov	a,#_high_scores_a_score_1_1
   03C1 F0                 1633 	movx	@dptr,a
   03C2 A3                 1634 	inc	dptr
   03C3 74s00              1635 	mov	a,#(_high_scores_a_score_1_1 >> 8)
   03C5 F0                 1636 	movx	@dptr,a
   03C6 A3                 1637 	inc	dptr
   03C7 74 00              1638 	mov	a,#0x0
   03C9 F0                 1639 	movx	@dptr,a
                           1640 ;	genAssign
   03CA 90s00r00           1641 	mov	dptr,#__itoa_PARM_3
   03CD 74 0A              1642 	mov	a,#0x0A
   03CF F0                 1643 	movx	@dptr,a
                           1644 ;	genCall
   03D0 8C 82              1645 	mov	dpl,r4
   03D2 8D 83              1646 	mov	dph,r5
   03D4 C0 02              1647 	push	ar2
   03D6 C0 03              1648 	push	ar3
   03D8 12s00r00           1649 	lcall	__itoa
   03DB D0 03              1650 	pop	ar3
   03DD D0 02              1651 	pop	ar2
                           1652 ;	main.c:269: GLCD_WriteChar(i + 1 + ASCII_OFFSET, i + 1, 45, NORMAL);
                           1653 ;	genPlus
                           1654 ;     genPlusIncr
   03DF 74 31              1655 	mov	a,#0x31
                           1656 ;	Peephole 236.a	used r2 instead of ar2
   03E1 2A                 1657 	add	a,r2
   03E2 FA                 1658 	mov	r2,a
                           1659 ;	genAssign
   03E3 90s00r00           1660 	mov	dptr,#_GLCD_WriteChar_PARM_2
   03E6 EB                 1661 	mov	a,r3
   03E7 F0                 1662 	movx	@dptr,a
                           1663 ;	genAssign
   03E8 90s00r00           1664 	mov	dptr,#_GLCD_WriteChar_PARM_3
   03EB 74 2D              1665 	mov	a,#0x2D
   03ED F0                 1666 	movx	@dptr,a
                           1667 ;	genAssign
   03EE 90s00r00           1668 	mov	dptr,#_GLCD_WriteChar_PARM_4
                           1669 ;	Peephole 181	changed mov to clr
   03F1 E4                 1670 	clr	a
   03F2 F0                 1671 	movx	@dptr,a
                           1672 ;	genCall
   03F3 8A 82              1673 	mov	dpl,r2
   03F5 C0 03              1674 	push	ar3
   03F7 12s00r00           1675 	lcall	_GLCD_WriteChar
   03FA D0 03              1676 	pop	ar3
                           1677 ;	main.c:270: GLCD_WriteChar('.', i + 1, 50 , NORMAL);
                           1678 ;	genAssign
   03FC 90s00r00           1679 	mov	dptr,#_GLCD_WriteChar_PARM_2
   03FF EB                 1680 	mov	a,r3
   0400 F0                 1681 	movx	@dptr,a
                           1682 ;	genAssign
   0401 90s00r00           1683 	mov	dptr,#_GLCD_WriteChar_PARM_3
   0404 74 32              1684 	mov	a,#0x32
   0406 F0                 1685 	movx	@dptr,a
                           1686 ;	genAssign
   0407 90s00r00           1687 	mov	dptr,#_GLCD_WriteChar_PARM_4
                           1688 ;	Peephole 181	changed mov to clr
   040A E4                 1689 	clr	a
   040B F0                 1690 	movx	@dptr,a
                           1691 ;	genCall
   040C 75 82 2E           1692 	mov	dpl,#0x2E
   040F C0 03              1693 	push	ar3
   0411 12s00r00           1694 	lcall	_GLCD_WriteChar
   0414 D0 03              1695 	pop	ar3
                           1696 ;	main.c:271: GLCD_WriteString(a_score, i + 1, 60, NORMAL);
                           1697 ;	genAssign
   0416 90s00r00           1698 	mov	dptr,#_GLCD_WriteString_PARM_2
   0419 EB                 1699 	mov	a,r3
   041A F0                 1700 	movx	@dptr,a
                           1701 ;	genAssign
   041B 90s00r00           1702 	mov	dptr,#_GLCD_WriteString_PARM_3
   041E 74 3C              1703 	mov	a,#0x3C
   0420 F0                 1704 	movx	@dptr,a
                           1705 ;	genAssign
   0421 90s00r00           1706 	mov	dptr,#_GLCD_WriteString_PARM_4
                           1707 ;	Peephole 181	changed mov to clr
   0424 E4                 1708 	clr	a
   0425 F0                 1709 	movx	@dptr,a
                           1710 ;	genCall
                           1711 ;	Peephole 182.a	used 16 bit load of DPTR
   0426 90s00rF9           1712 	mov	dptr,#_high_scores_a_score_1_1
   0429 75 F0 00           1713 	mov	b,#0x00
   042C C0 03              1714 	push	ar3
   042E 12s00r00           1715 	lcall	_GLCD_WriteString
   0431 D0 03              1716 	pop	ar3
                           1717 ;	main.c:262: for(i = 0; i < 5; i++)
                           1718 ;	genAssign
   0433 90s01r03           1719 	mov	dptr,#_high_scores_i_1_1
   0436 EB                 1720 	mov	a,r3
   0437 F0                 1721 	movx	@dptr,a
   0438 02s03r9A           1722 	ljmp	00104$
   043B                    1723 00107$:
                           1724 ;	main.c:275: delay_ms(4000);
                           1725 ;	genCall
                           1726 ;	Peephole 182.b	used 16 bit load of dptr
   043B 90 0F A0           1727 	mov	dptr,#0x0FA0
   043E 12s00r00           1728 	lcall	_delay_ms
                           1729 ;	main.c:278: while(x > RIGHT_UP_MIN)
   0441                    1730 00101$:
                           1731 ;	genAssign
   0441 90s01r04           1732 	mov	dptr,#_high_scores_x_1_1
   0444 E0                 1733 	movx	a,@dptr
   0445 FA                 1734 	mov	r2,a
   0446 A3                 1735 	inc	dptr
   0447 E0                 1736 	movx	a,@dptr
   0448 FB                 1737 	mov	r3,a
                           1738 ;	genCmpGt
                           1739 ;	genCmp
   0449 C3                 1740 	clr	c
   044A 74 6A              1741 	mov	a,#0x6A
   044C 9A                 1742 	subb	a,r2
                           1743 ;	Peephole 159	avoided xrl during execution
   044D 74 7F              1744 	mov	a,#(0xFF ^ 0x80)
   044F 8B F0              1745 	mov	b,r3
   0451 63 F0 80           1746 	xrl	b,#0x80
   0454 95 F0              1747 	subb	a,b
                           1748 ;	genIfxJump
                           1749 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0456 50 12              1750 	jnc	00108$
                           1751 ;	Peephole 300	removed redundant label 00116$
                           1752 ;	main.c:280: x = ADXL345_read_x();
                           1753 ;	genCall
   0458 12s00r00           1754 	lcall	_ADXL345_read_x
   045B E5 82              1755 	mov	a,dpl
   045D 85 83 F0           1756 	mov	b,dph
                           1757 ;	genAssign
   0460 90s01r04           1758 	mov	dptr,#_high_scores_x_1_1
   0463 F0                 1759 	movx	@dptr,a
   0464 A3                 1760 	inc	dptr
   0465 E5 F0              1761 	mov	a,b
   0467 F0                 1762 	movx	@dptr,a
                           1763 ;	Peephole 112.b	changed ljmp to sjmp
   0468 80 D7              1764 	sjmp	00101$
   046A                    1765 00108$:
   046A 22                 1766 	ret
                           1767 ;------------------------------------------------------------
                           1768 ;Allocation info for local variables in function 'score_update'
                           1769 ;------------------------------------------------------------
                           1770 ;score                     Allocated with name '_score_update_score_1_1'
                           1771 ;i                         Allocated with name '_score_update_i_1_1'
                           1772 ;j                         Allocated with name '_score_update_j_1_1'
                           1773 ;score_addr                Allocated with name '_score_update_score_addr_1_1'
                           1774 ;score_val                 Allocated with name '_score_update_score_val_1_1'
                           1775 ;------------------------------------------------------------
                           1776 ;	main.c:288: void score_update(unsigned int score)
                           1777 ;	-----------------------------------------
                           1778 ;	 function score_update
                           1779 ;	-----------------------------------------
   046B                    1780 _score_update:
                           1781 ;	genReceive
   046B AA 83              1782 	mov	r2,dph
   046D E5 82              1783 	mov	a,dpl
   046F 90s01r06           1784 	mov	dptr,#_score_update_score_1_1
   0472 F0                 1785 	movx	@dptr,a
   0473 A3                 1786 	inc	dptr
   0474 EA                 1787 	mov	a,r2
   0475 F0                 1788 	movx	@dptr,a
                           1789 ;	main.c:296: for(i = 1; i < 6; i++)
                           1790 ;	genAssign
   0476 90s01r08           1791 	mov	dptr,#_score_update_i_1_1
   0479 74 01              1792 	mov	a,#0x01
   047B F0                 1793 	movx	@dptr,a
                           1794 ;	genAssign
   047C 90s01r06           1795 	mov	dptr,#_score_update_score_1_1
   047F E0                 1796 	movx	a,@dptr
   0480 FA                 1797 	mov	r2,a
   0481 A3                 1798 	inc	dptr
   0482 E0                 1799 	movx	a,@dptr
   0483 FB                 1800 	mov	r3,a
                           1801 ;	genAssign
   0484 7C 01              1802 	mov	r4,#0x01
   0486                    1803 00103$:
                           1804 ;	genCmpLt
                           1805 ;	genCmp
   0486 BC 06 00           1806 	cjne	r4,#0x06,00119$
   0489                    1807 00119$:
                           1808 ;	genIfxJump
   0489 40 01              1809 	jc	00120$
                           1810 ;	Peephole 251.a	replaced ljmp to ret with ret
   048B 22                 1811 	ret
   048C                    1812 00120$:
                           1813 ;	main.c:299: score_val = read_score(i);
                           1814 ;	genCall
   048C 8C 82              1815 	mov	dpl,r4
   048E C0 02              1816 	push	ar2
   0490 C0 03              1817 	push	ar3
   0492 C0 04              1818 	push	ar4
   0494 12s05r17           1819 	lcall	_read_score
   0497 AD 82              1820 	mov	r5,dpl
   0499 AE 83              1821 	mov	r6,dph
   049B D0 04              1822 	pop	ar4
   049D D0 03              1823 	pop	ar3
   049F D0 02              1824 	pop	ar2
                           1825 ;	main.c:301: if(score > score_val)
                           1826 ;	genCmpGt
                           1827 ;	genCmp
   04A1 C3                 1828 	clr	c
   04A2 ED                 1829 	mov	a,r5
   04A3 9A                 1830 	subb	a,r2
   04A4 EE                 1831 	mov	a,r6
   04A5 9B                 1832 	subb	a,r3
                           1833 ;	genIfxJump
                           1834 ;	Peephole 108.a	removed ljmp by inverse jump logic
   04A6 50 66              1835 	jnc	00105$
                           1836 ;	Peephole 300	removed redundant label 00121$
                           1837 ;	main.c:304: for(j = 4; j >= i; j--)
                           1838 ;	genAssign
   04A8 90s01r08           1839 	mov	dptr,#_score_update_i_1_1
   04AB E0                 1840 	movx	a,@dptr
   04AC FD                 1841 	mov	r5,a
                           1842 ;	genAssign
   04AD 7E 04              1843 	mov	r6,#0x04
   04AF                    1844 00107$:
                           1845 ;	genCmpLt
                           1846 ;	genCmp
   04AF C3                 1847 	clr	c
   04B0 EE                 1848 	mov	a,r6
   04B1 9D                 1849 	subb	a,r5
                           1850 ;	genIfxJump
                           1851 ;	Peephole 112.b	changed ljmp to sjmp
                           1852 ;	Peephole 160.a	removed sjmp by inverse jump logic
   04B2 40 38              1853 	jc	00110$
                           1854 ;	Peephole 300	removed redundant label 00122$
                           1855 ;	main.c:307: score_addr = (((j) * INT_OFFSET) + BASE_SCORE_ADD);
                           1856 ;	genIpush
   04B4 C0 05              1857 	push	ar5
                           1858 ;	genMult
                           1859 ;	genMultOneByte
   04B6 EE                 1860 	mov	a,r6
   04B7 75 F0 02           1861 	mov	b,#0x02
   04BA A4                 1862 	mul	ab
   04BB FF                 1863 	mov	r7,a
   04BC A8 F0              1864 	mov	r0,b
                           1865 ;	main.c:309: score_val = read_score(j);
                           1866 ;	genCall
   04BE 8E 82              1867 	mov	dpl,r6
   04C0 C0 06              1868 	push	ar6
   04C2 C0 07              1869 	push	ar7
   04C4 C0 00              1870 	push	ar0
   04C6 12s05r17           1871 	lcall	_read_score
   04C9 A9 82              1872 	mov	r1,dpl
   04CB AD 83              1873 	mov	r5,dph
   04CD D0 00              1874 	pop	ar0
   04CF D0 07              1875 	pop	ar7
   04D1 D0 06              1876 	pop	ar6
                           1877 ;	main.c:311: write_score(score_val, score_addr);
                           1878 ;	genAssign
                           1879 ;	genCast
   04D3 90s01r0C           1880 	mov	dptr,#_write_score_PARM_2
   04D6 EF                 1881 	mov	a,r7
   04D7 F0                 1882 	movx	@dptr,a
                           1883 ;	genCall
   04D8 89 82              1884 	mov	dpl,r1
   04DA 8D 83              1885 	mov	dph,r5
   04DC C0 05              1886 	push	ar5
   04DE C0 06              1887 	push	ar6
   04E0 12s05rAE           1888 	lcall	_write_score
   04E3 D0 06              1889 	pop	ar6
   04E5 D0 05              1890 	pop	ar5
                           1891 ;	main.c:304: for(j = 4; j >= i; j--)
                           1892 ;	genMinus
                           1893 ;	genMinusDec
   04E7 1E                 1894 	dec	r6
                           1895 ;	genIpop
   04E8 D0 05              1896 	pop	ar5
                           1897 ;	Peephole 112.b	changed ljmp to sjmp
   04EA 80 C3              1898 	sjmp	00107$
   04EC                    1899 00110$:
                           1900 ;	main.c:314: score_addr = (((i - 1) * INT_OFFSET) + BASE_SCORE_ADD);
                           1901 ;	genCast
   04EC 7E 00              1902 	mov	r6,#0x00
                           1903 ;	genMinus
                           1904 ;	genMinusDec
   04EE 1D                 1905 	dec	r5
   04EF BD FF 01           1906 	cjne	r5,#0xff,00123$
   04F2 1E                 1907 	dec	r6
   04F3                    1908 00123$:
                           1909 ;	genLeftShift
                           1910 ;	genLeftShiftLiteral
                           1911 ;	genlshTwo
   04F3 EE                 1912 	mov	a,r6
   04F4 CD                 1913 	xch	a,r5
   04F5 25 E0              1914 	add	a,acc
   04F7 CD                 1915 	xch	a,r5
   04F8 33                 1916 	rlc	a
   04F9 FE                 1917 	mov	r6,a
                           1918 ;	main.c:315: write_score(score,score_addr);
                           1919 ;	genAssign
   04FA 90s01r06           1920 	mov	dptr,#_score_update_score_1_1
   04FD E0                 1921 	movx	a,@dptr
   04FE FF                 1922 	mov	r7,a
   04FF A3                 1923 	inc	dptr
   0500 E0                 1924 	movx	a,@dptr
   0501 F8                 1925 	mov	r0,a
                           1926 ;	genCast
   0502 90s01r0C           1927 	mov	dptr,#_write_score_PARM_2
   0505 ED                 1928 	mov	a,r5
   0506 F0                 1929 	movx	@dptr,a
                           1930 ;	genCall
   0507 8F 82              1931 	mov	dpl,r7
   0509 88 83              1932 	mov	dph,r0
                           1933 ;	main.c:316: break;
                           1934 ;	Peephole 112.b	changed ljmp to sjmp
                           1935 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1936 ;	Peephole 253.a	replaced lcall/ret with ljmp
   050B 02s05rAE           1937 	ljmp	_write_score
   050E                    1938 00105$:
                           1939 ;	main.c:296: for(i = 1; i < 6; i++)
                           1940 ;	genPlus
                           1941 ;     genPlusIncr
   050E 0C                 1942 	inc	r4
                           1943 ;	genAssign
   050F 90s01r08           1944 	mov	dptr,#_score_update_i_1_1
   0512 EC                 1945 	mov	a,r4
   0513 F0                 1946 	movx	@dptr,a
   0514 02s04r86           1947 	ljmp	00103$
                           1948 ;	Peephole 259.b	removed redundant label 00111$ and ret
                           1949 ;
                           1950 ;------------------------------------------------------------
                           1951 ;Allocation info for local variables in function 'read_score'
                           1952 ;------------------------------------------------------------
                           1953 ;score                     Allocated with name '_read_score_score_1_1'
                           1954 ;score_addr                Allocated with name '_read_score_score_addr_1_1'
                           1955 ;i                         Allocated with name '_read_score_i_1_1'
                           1956 ;read_val                  Allocated with name '_read_score_read_val_1_1'
                           1957 ;score_val                 Allocated with name '_read_score_score_val_1_1'
                           1958 ;------------------------------------------------------------
                           1959 ;	main.c:324: unsigned int read_score(unsigned char score)
                           1960 ;	-----------------------------------------
                           1961 ;	 function read_score
                           1962 ;	-----------------------------------------
   0517                    1963 _read_score:
                           1964 ;	genReceive
   0517 E5 82              1965 	mov	a,dpl
   0519 90s01r09           1966 	mov	dptr,#_read_score_score_1_1
   051C F0                 1967 	movx	@dptr,a
                           1968 ;	main.c:327: unsigned int score_addr = (((score - 1) * INT_OFFSET) + BASE_SCORE_ADD);
                           1969 ;	genAssign
   051D 90s01r09           1970 	mov	dptr,#_read_score_score_1_1
   0520 E0                 1971 	movx	a,@dptr
   0521 FA                 1972 	mov	r2,a
                           1973 ;	genCast
   0522 7B 00              1974 	mov	r3,#0x00
                           1975 ;	genMinus
                           1976 ;	genMinusDec
   0524 1A                 1977 	dec	r2
   0525 BA FF 01           1978 	cjne	r2,#0xff,00110$
   0528 1B                 1979 	dec	r3
   0529                    1980 00110$:
                           1981 ;	genLeftShift
                           1982 ;	genLeftShiftLiteral
                           1983 ;	genlshTwo
   0529 EB                 1984 	mov	a,r3
   052A CA                 1985 	xch	a,r2
   052B 25 E0              1986 	add	a,acc
   052D CA                 1987 	xch	a,r2
   052E 33                 1988 	rlc	a
   052F FB                 1989 	mov	r3,a
                           1990 ;	main.c:329: unsigned int score_val = 0;
                           1991 ;	genAssign
   0530 90s01r0A           1992 	mov	dptr,#_read_score_score_val_1_1
   0533 E4                 1993 	clr	a
   0534 F0                 1994 	movx	@dptr,a
   0535 A3                 1995 	inc	dptr
   0536 F0                 1996 	movx	@dptr,a
                           1997 ;	main.c:333: for(i = 0; i < 2; i++)
                           1998 ;	genAssign
   0537 7C 00              1999 	mov	r4,#0x00
   0539                    2000 00101$:
                           2001 ;	genCmpLt
                           2002 ;	genCmp
   0539 BC 02 00           2003 	cjne	r4,#0x02,00111$
   053C                    2004 00111$:
                           2005 ;	genIfxJump
                           2006 ;	Peephole 108.a	removed ljmp by inverse jump logic
   053C 50 64              2007 	jnc	00104$
                           2008 ;	Peephole 300	removed redundant label 00112$
                           2009 ;	main.c:336: score_val <<= 8;
                           2010 ;	genAssign
   053E 90s01r0A           2011 	mov	dptr,#_read_score_score_val_1_1
   0541 E0                 2012 	movx	a,@dptr
   0542 FD                 2013 	mov	r5,a
   0543 A3                 2014 	inc	dptr
   0544 E0                 2015 	movx	a,@dptr
                           2016 ;	genLeftShift
                           2017 ;	genLeftShiftLiteral
                           2018 ;	genlshTwo
                           2019 ;	peephole 177.e	removed redundant move
   0545 8D 06              2020 	mov	ar6,r5
   0547 7D 00              2021 	mov	r5,#0x00
                           2022 ;	genAssign
   0549 90s01r0A           2023 	mov	dptr,#_read_score_score_val_1_1
   054C ED                 2024 	mov	a,r5
   054D F0                 2025 	movx	@dptr,a
   054E A3                 2026 	inc	dptr
   054F EE                 2027 	mov	a,r6
   0550 F0                 2028 	movx	@dptr,a
                           2029 ;	main.c:338: read_val = eebyter(score_addr + i);
                           2030 ;	genCast
   0551 8C 05              2031 	mov	ar5,r4
   0553 7E 00              2032 	mov	r6,#0x00
                           2033 ;	genPlus
                           2034 ;	Peephole 236.g	used r5 instead of ar5
   0555 ED                 2035 	mov	a,r5
                           2036 ;	Peephole 236.a	used r2 instead of ar2
   0556 2A                 2037 	add	a,r2
   0557 FD                 2038 	mov	r5,a
                           2039 ;	Peephole 236.g	used r6 instead of ar6
   0558 EE                 2040 	mov	a,r6
                           2041 ;	Peephole 236.b	used r3 instead of ar3
   0559 3B                 2042 	addc	a,r3
   055A FE                 2043 	mov	r6,a
                           2044 ;	genCall
   055B 8D 82              2045 	mov	dpl,r5
   055D 8E 83              2046 	mov	dph,r6
   055F C0 02              2047 	push	ar2
   0561 C0 03              2048 	push	ar3
   0563 C0 04              2049 	push	ar4
   0565 C0 05              2050 	push	ar5
   0567 C0 06              2051 	push	ar6
   0569 12s00r00           2052 	lcall	_eebyter
   056C D0 06              2053 	pop	ar6
   056E D0 05              2054 	pop	ar5
   0570 D0 04              2055 	pop	ar4
   0572 D0 03              2056 	pop	ar3
   0574 D0 02              2057 	pop	ar2
                           2058 ;	main.c:340: score_val |= eebyter(score_addr + i);
                           2059 ;	genCall
   0576 8D 82              2060 	mov	dpl,r5
   0578 8E 83              2061 	mov	dph,r6
   057A C0 02              2062 	push	ar2
   057C C0 03              2063 	push	ar3
   057E C0 04              2064 	push	ar4
   0580 12s00r00           2065 	lcall	_eebyter
   0583 AD 82              2066 	mov	r5,dpl
   0585 AE 83              2067 	mov	r6,dph
   0587 D0 04              2068 	pop	ar4
   0589 D0 03              2069 	pop	ar3
   058B D0 02              2070 	pop	ar2
                           2071 ;	genAssign
   058D 90s01r0A           2072 	mov	dptr,#_read_score_score_val_1_1
   0590 E0                 2073 	movx	a,@dptr
   0591 FF                 2074 	mov	r7,a
   0592 A3                 2075 	inc	dptr
   0593 E0                 2076 	movx	a,@dptr
   0594 F8                 2077 	mov	r0,a
                           2078 ;	genOr
   0595 90s01r0A           2079 	mov	dptr,#_read_score_score_val_1_1
   0598 ED                 2080 	mov	a,r5
   0599 4F                 2081 	orl	a,r7
   059A F0                 2082 	movx	@dptr,a
   059B EE                 2083 	mov	a,r6
   059C 48                 2084 	orl	a,r0
   059D A3                 2085 	inc	dptr
   059E F0                 2086 	movx	@dptr,a
                           2087 ;	main.c:333: for(i = 0; i < 2; i++)
                           2088 ;	genPlus
                           2089 ;     genPlusIncr
   059F 0C                 2090 	inc	r4
                           2091 ;	Peephole 112.b	changed ljmp to sjmp
   05A0 80 97              2092 	sjmp	00101$
   05A2                    2093 00104$:
                           2094 ;	main.c:342: return score_val;
                           2095 ;	genAssign
   05A2 90s01r0A           2096 	mov	dptr,#_read_score_score_val_1_1
   05A5 E0                 2097 	movx	a,@dptr
   05A6 FA                 2098 	mov	r2,a
   05A7 A3                 2099 	inc	dptr
   05A8 E0                 2100 	movx	a,@dptr
                           2101 ;	genRet
                           2102 ;	Peephole 234.b	loading dph directly from a(ccumulator), r3 not set
   05A9 8A 82              2103 	mov	dpl,r2
   05AB F5 83              2104 	mov	dph,a
                           2105 ;	Peephole 300	removed redundant label 00105$
   05AD 22                 2106 	ret
                           2107 ;------------------------------------------------------------
                           2108 ;Allocation info for local variables in function 'write_score'
                           2109 ;------------------------------------------------------------
                           2110 ;score_addr                Allocated with name '_write_score_PARM_2'
                           2111 ;score                     Allocated with name '_write_score_score_1_1'
                           2112 ;byte_val                  Allocated with name '_write_score_byte_val_1_1'
                           2113 ;i                         Allocated with name '_write_score_i_1_1'
                           2114 ;------------------------------------------------------------
                           2115 ;	main.c:347: void write_score(unsigned int score, unsigned char score_addr)
                           2116 ;	-----------------------------------------
                           2117 ;	 function write_score
                           2118 ;	-----------------------------------------
   05AE                    2119 _write_score:
                           2120 ;	genReceive
   05AE AA 83              2121 	mov	r2,dph
   05B0 E5 82              2122 	mov	a,dpl
   05B2 90s01r0D           2123 	mov	dptr,#_write_score_score_1_1
   05B5 F0                 2124 	movx	@dptr,a
   05B6 A3                 2125 	inc	dptr
   05B7 EA                 2126 	mov	a,r2
   05B8 F0                 2127 	movx	@dptr,a
                           2128 ;	main.c:353: for(i = 0; i < 2; i++)
                           2129 ;	genAssign
   05B9 90s01r0C           2130 	mov	dptr,#_write_score_PARM_2
   05BC E0                 2131 	movx	a,@dptr
   05BD FA                 2132 	mov	r2,a
                           2133 ;	genAssign
   05BE 7B 00              2134 	mov	r3,#0x00
   05C0                    2135 00101$:
                           2136 ;	genCmpLt
                           2137 ;	genCmp
   05C0 BB 02 00           2138 	cjne	r3,#0x02,00110$
   05C3                    2139 00110$:
                           2140 ;	genIfxJump
                           2141 ;	Peephole 108.a	removed ljmp by inverse jump logic
   05C3 50 53              2142 	jnc	00105$
                           2143 ;	Peephole 300	removed redundant label 00111$
                           2144 ;	main.c:356: byte_val = ((score & SCORE_MASK) >> 8);
                           2145 ;	genAssign
   05C5 90s01r0D           2146 	mov	dptr,#_write_score_score_1_1
   05C8 E0                 2147 	movx	a,@dptr
   05C9 FC                 2148 	mov	r4,a
   05CA A3                 2149 	inc	dptr
   05CB E0                 2150 	movx	a,@dptr
   05CC FD                 2151 	mov	r5,a
                           2152 ;	genAnd
   05CD 7E 00              2153 	mov	r6,#0x00
   05CF 8D 07              2154 	mov	ar7,r5
                           2155 ;	genGetByte
   05D1 90s00r00           2156 	mov	dptr,#_eebytew_PARM_2
   05D4 EF                 2157 	mov	a,r7
   05D5 F0                 2158 	movx	@dptr,a
                           2159 ;	main.c:358: eebytew(score_addr + i, byte_val);
                           2160 ;	genCast
   05D6 8A 06              2161 	mov	ar6,r2
   05D8 7F 00              2162 	mov	r7,#0x00
                           2163 ;	genCast
   05DA 8B 00              2164 	mov	ar0,r3
   05DC 79 00              2165 	mov	r1,#0x00
                           2166 ;	genPlus
                           2167 ;	Peephole 236.g	used r0 instead of ar0
   05DE E8                 2168 	mov	a,r0
                           2169 ;	Peephole 236.a	used r6 instead of ar6
   05DF 2E                 2170 	add	a,r6
   05E0 FE                 2171 	mov	r6,a
                           2172 ;	Peephole 236.g	used r1 instead of ar1
   05E1 E9                 2173 	mov	a,r1
                           2174 ;	Peephole 236.b	used r7 instead of ar7
   05E2 3F                 2175 	addc	a,r7
   05E3 FF                 2176 	mov	r7,a
                           2177 ;	genCall
   05E4 8E 82              2178 	mov	dpl,r6
   05E6 8F 83              2179 	mov	dph,r7
   05E8 C0 02              2180 	push	ar2
   05EA C0 03              2181 	push	ar3
   05EC C0 04              2182 	push	ar4
   05EE C0 05              2183 	push	ar5
   05F0 12s00r00           2184 	lcall	_eebytew
   05F3 D0 05              2185 	pop	ar5
   05F5 D0 04              2186 	pop	ar4
   05F7 D0 03              2187 	pop	ar3
   05F9 D0 02              2188 	pop	ar2
                           2189 ;	main.c:360: score <<= 8;
                           2190 ;	genLeftShift
                           2191 ;	genLeftShiftLiteral
                           2192 ;	genlshTwo
   05FB 8C 05              2193 	mov	ar5,r4
   05FD 7C 00              2194 	mov	r4,#0x00
                           2195 ;	genAssign
   05FF 90s01r0D           2196 	mov	dptr,#_write_score_score_1_1
   0602 EC                 2197 	mov	a,r4
   0603 F0                 2198 	movx	@dptr,a
   0604 A3                 2199 	inc	dptr
   0605 ED                 2200 	mov	a,r5
   0606 F0                 2201 	movx	@dptr,a
                           2202 ;	main.c:362: delay_ms(5);
                           2203 ;	genCall
                           2204 ;	Peephole 182.b	used 16 bit load of dptr
   0607 90 00 05           2205 	mov	dptr,#0x0005
   060A C0 02              2206 	push	ar2
   060C C0 03              2207 	push	ar3
   060E 12s00r00           2208 	lcall	_delay_ms
   0611 D0 03              2209 	pop	ar3
   0613 D0 02              2210 	pop	ar2
                           2211 ;	main.c:353: for(i = 0; i < 2; i++)
                           2212 ;	genPlus
                           2213 ;     genPlusIncr
   0615 0B                 2214 	inc	r3
                           2215 ;	Peephole 112.b	changed ljmp to sjmp
   0616 80 A8              2216 	sjmp	00101$
   0618                    2217 00105$:
   0618 22                 2218 	ret
                           2219 ;------------------------------------------------------------
                           2220 ;Allocation info for local variables in function 'detect_collision'
                           2221 ;------------------------------------------------------------
                           2222 ;sloc0                     Allocated with name '_detect_collision_sloc0_1_0'
                           2223 ;sloc1                     Allocated with name '_detect_collision_sloc1_1_0'
                           2224 ;sloc2                     Allocated with name '_detect_collision_sloc2_1_0'
                           2225 ;sloc3                     Allocated with name '_detect_collision_sloc3_1_0'
                           2226 ;sloc4                     Allocated with name '_detect_collision_sloc4_1_0'
                           2227 ;sloc5                     Allocated with name '_detect_collision_sloc5_1_0'
                           2228 ;sloc6                     Allocated with name '_detect_collision_sloc6_1_0'
                           2229 ;sloc7                     Allocated with name '_detect_collision_sloc7_1_0'
                           2230 ;level_bott                Allocated with name '_detect_collision_PARM_2'
                           2231 ;start_point               Allocated with name '_detect_collision_PARM_3'
                           2232 ;num_pillars               Allocated with name '_detect_collision_PARM_4'
                           2233 ;level_top                 Allocated with name '_detect_collision_level_top_1_1'
                           2234 ;i                         Allocated with name '_detect_collision_i_1_1'
                           2235 ;pillar_start_up           Allocated with name '_detect_collision_pillar_start_up_1_1'
                           2236 ;pillar_start_bott         Allocated with name '_detect_collision_pillar_start_bott_1_1'
                           2237 ;------------------------------------------------------------
                           2238 ;	main.c:368: unsigned char detect_collision(unsigned int level_top[MAX_PILLARS][PILLAR_CONIG], unsigned int level_bott[MAX_PILLARS][PILLAR_CONIG], int start_point, unsigned char num_pillars)
                           2239 ;	-----------------------------------------
                           2240 ;	 function detect_collision
                           2241 ;	-----------------------------------------
   0619                    2242 _detect_collision:
                           2243 ;	genReceive
   0619 AA F0              2244 	mov	r2,b
   061B AB 83              2245 	mov	r3,dph
   061D E5 82              2246 	mov	a,dpl
   061F 90s01r15           2247 	mov	dptr,#_detect_collision_level_top_1_1
   0622 F0                 2248 	movx	@dptr,a
   0623 A3                 2249 	inc	dptr
   0624 EB                 2250 	mov	a,r3
   0625 F0                 2251 	movx	@dptr,a
   0626 A3                 2252 	inc	dptr
   0627 EA                 2253 	mov	a,r2
   0628 F0                 2254 	movx	@dptr,a
                           2255 ;	main.c:375: for(i = 0; i < num_pillars; i++)
                           2256 ;	genAssign
   0629 90s01r18           2257 	mov	dptr,#_detect_collision_i_1_1
   062C E4                 2258 	clr	a
   062D F0                 2259 	movx	@dptr,a
   062E A3                 2260 	inc	dptr
   062F F0                 2261 	movx	@dptr,a
                           2262 ;	genAssign
   0630 90s01r14           2263 	mov	dptr,#_detect_collision_PARM_4
   0633 E0                 2264 	movx	a,@dptr
   0634 FA                 2265 	mov	r2,a
                           2266 ;	genAssign
   0635 7B 00              2267 	mov	r3,#0x00
   0637 7C 00              2268 	mov	r4,#0x00
   0639                    2269 00120$:
                           2270 ;	genCast
   0639 8A 05              2271 	mov	ar5,r2
   063B 7E 00              2272 	mov	r6,#0x00
                           2273 ;	genCmpLt
                           2274 ;	genCmp
   063D C3                 2275 	clr	c
   063E EB                 2276 	mov	a,r3
   063F 9D                 2277 	subb	a,r5
   0640 EC                 2278 	mov	a,r4
   0641 9E                 2279 	subb	a,r6
                           2280 ;	genIfxJump
   0642 40 03              2281 	jc	00138$
   0644 02s09rEB           2282 	ljmp	00123$
   0647                    2283 00138$:
                           2284 ;	main.c:378: pillar_start_up = start_point + level_top[i][1];
                           2285 ;	genIpush
   0647 C0 02              2286 	push	ar2
                           2287 ;	genAssign
   0649 90s01r15           2288 	mov	dptr,#_detect_collision_level_top_1_1
   064C E0                 2289 	movx	a,@dptr
   064D FD                 2290 	mov	r5,a
   064E A3                 2291 	inc	dptr
   064F E0                 2292 	movx	a,@dptr
   0650 FE                 2293 	mov	r6,a
   0651 A3                 2294 	inc	dptr
   0652 E0                 2295 	movx	a,@dptr
   0653 FF                 2296 	mov	r7,a
                           2297 ;	genLeftShift
                           2298 ;	genLeftShiftLiteral
                           2299 ;	genlshTwo
   0654 8B 00              2300 	mov	ar0,r3
   0656 EC                 2301 	mov	a,r4
   0657 C8                 2302 	xch	a,r0
   0658 25 E0              2303 	add	a,acc
   065A C8                 2304 	xch	a,r0
   065B 33                 2305 	rlc	a
   065C C8                 2306 	xch	a,r0
   065D 25 E0              2307 	add	a,acc
   065F C8                 2308 	xch	a,r0
   0660 33                 2309 	rlc	a
   0661 F9                 2310 	mov	r1,a
                           2311 ;	genPlus
                           2312 ;	Peephole 236.g	used r0 instead of ar0
   0662 E8                 2313 	mov	a,r0
                           2314 ;	Peephole 236.a	used r5 instead of ar5
   0663 2D                 2315 	add	a,r5
   0664 F5*00              2316 	mov	_detect_collision_sloc0_1_0,a
                           2317 ;	Peephole 236.g	used r1 instead of ar1
   0666 E9                 2318 	mov	a,r1
                           2319 ;	Peephole 236.b	used r6 instead of ar6
   0667 3E                 2320 	addc	a,r6
   0668 F5*01              2321 	mov	(_detect_collision_sloc0_1_0 + 1),a
   066A 8F*02              2322 	mov	(_detect_collision_sloc0_1_0 + 2),r7
                           2323 ;	genPlus
                           2324 ;     genPlusIncr
   066C 74 02              2325 	mov	a,#0x02
   066E 25*00              2326 	add	a,_detect_collision_sloc0_1_0
   0670 FA                 2327 	mov	r2,a
                           2328 ;	Peephole 181	changed mov to clr
   0671 E4                 2329 	clr	a
   0672 35*01              2330 	addc	a,(_detect_collision_sloc0_1_0 + 1)
   0674 FD                 2331 	mov	r5,a
   0675 AE*02              2332 	mov	r6,(_detect_collision_sloc0_1_0 + 2)
                           2333 ;	genPointerGet
                           2334 ;	genGenPointerGet
   0677 8A 82              2335 	mov	dpl,r2
   0679 8D 83              2336 	mov	dph,r5
   067B 8E F0              2337 	mov	b,r6
   067D 12s00r00           2338 	lcall	__gptrget
   0680 F5*03              2339 	mov	_detect_collision_sloc1_1_0,a
   0682 A3                 2340 	inc	dptr
   0683 12s00r00           2341 	lcall	__gptrget
   0686 F5*04              2342 	mov	(_detect_collision_sloc1_1_0 + 1),a
                           2343 ;	genAssign
   0688 90s01r12           2344 	mov	dptr,#_detect_collision_PARM_3
   068B E0                 2345 	movx	a,@dptr
   068C F5*05              2346 	mov	_detect_collision_sloc2_1_0,a
   068E A3                 2347 	inc	dptr
   068F E0                 2348 	movx	a,@dptr
   0690 F5*06              2349 	mov	(_detect_collision_sloc2_1_0 + 1),a
                           2350 ;	genPlus
   0692 E5*03              2351 	mov	a,_detect_collision_sloc1_1_0
   0694 25*05              2352 	add	a,_detect_collision_sloc2_1_0
   0696 F5*07              2353 	mov	_detect_collision_sloc3_1_0,a
   0698 E5*04              2354 	mov	a,(_detect_collision_sloc1_1_0 + 1)
   069A 35*06              2355 	addc	a,(_detect_collision_sloc2_1_0 + 1)
   069C F5*08              2356 	mov	(_detect_collision_sloc3_1_0 + 1),a
                           2357 ;	genAssign
   069E 90s01r1A           2358 	mov	dptr,#_detect_collision_pillar_start_up_1_1
   06A1 E5*07              2359 	mov	a,_detect_collision_sloc3_1_0
   06A3 F0                 2360 	movx	@dptr,a
   06A4 A3                 2361 	inc	dptr
   06A5 E5*08              2362 	mov	a,(_detect_collision_sloc3_1_0 + 1)
   06A7 F0                 2363 	movx	@dptr,a
                           2364 ;	main.c:379: pillar_start_bott = start_point + level_bott[i][1];
                           2365 ;	genAssign
   06A8 90s01r0F           2366 	mov	dptr,#_detect_collision_PARM_2
   06AB E0                 2367 	movx	a,@dptr
   06AC F5*09              2368 	mov	_detect_collision_sloc4_1_0,a
   06AE A3                 2369 	inc	dptr
   06AF E0                 2370 	movx	a,@dptr
   06B0 F5*0A              2371 	mov	(_detect_collision_sloc4_1_0 + 1),a
   06B2 A3                 2372 	inc	dptr
   06B3 E0                 2373 	movx	a,@dptr
   06B4 F5*0B              2374 	mov	(_detect_collision_sloc4_1_0 + 2),a
                           2375 ;	genPlus
                           2376 ;	Peephole 236.g	used r0 instead of ar0
   06B6 E8                 2377 	mov	a,r0
   06B7 25*09              2378 	add	a,_detect_collision_sloc4_1_0
   06B9 FA                 2379 	mov	r2,a
                           2380 ;	Peephole 236.g	used r1 instead of ar1
   06BA E9                 2381 	mov	a,r1
   06BB 35*0A              2382 	addc	a,(_detect_collision_sloc4_1_0 + 1)
   06BD FD                 2383 	mov	r5,a
   06BE AE*0B              2384 	mov	r6,(_detect_collision_sloc4_1_0 + 2)
                           2385 ;	genPlus
                           2386 ;     genPlusIncr
   06C0 74 02              2387 	mov	a,#0x02
                           2388 ;	Peephole 236.a	used r2 instead of ar2
   06C2 2A                 2389 	add	a,r2
   06C3 FA                 2390 	mov	r2,a
                           2391 ;	Peephole 181	changed mov to clr
   06C4 E4                 2392 	clr	a
                           2393 ;	Peephole 236.b	used r5 instead of ar5
   06C5 3D                 2394 	addc	a,r5
   06C6 FD                 2395 	mov	r5,a
                           2396 ;	genPointerGet
                           2397 ;	genGenPointerGet
   06C7 8A 82              2398 	mov	dpl,r2
   06C9 8D 83              2399 	mov	dph,r5
   06CB 8E F0              2400 	mov	b,r6
   06CD 12s00r00           2401 	lcall	__gptrget
   06D0 FA                 2402 	mov	r2,a
   06D1 A3                 2403 	inc	dptr
   06D2 12s00r00           2404 	lcall	__gptrget
   06D5 FD                 2405 	mov	r5,a
                           2406 ;	genPlus
                           2407 ;	Peephole 236.g	used r2 instead of ar2
   06D6 EA                 2408 	mov	a,r2
   06D7 25*05              2409 	add	a,_detect_collision_sloc2_1_0
   06D9 F5*0C              2410 	mov	_detect_collision_sloc5_1_0,a
                           2411 ;	Peephole 236.g	used r5 instead of ar5
   06DB ED                 2412 	mov	a,r5
   06DC 35*06              2413 	addc	a,(_detect_collision_sloc2_1_0 + 1)
   06DE F5*0D              2414 	mov	(_detect_collision_sloc5_1_0 + 1),a
                           2415 ;	genAssign
   06E0 90s01r1C           2416 	mov	dptr,#_detect_collision_pillar_start_bott_1_1
   06E3 E5*0C              2417 	mov	a,_detect_collision_sloc5_1_0
   06E5 F0                 2418 	movx	@dptr,a
   06E6 A3                 2419 	inc	dptr
   06E7 E5*0D              2420 	mov	a,(_detect_collision_sloc5_1_0 + 1)
   06E9 F0                 2421 	movx	@dptr,a
                           2422 ;	main.c:382: if(heli_page <= level_top[i][0])
                           2423 ;	genAssign
   06EA 90s00r00           2424 	mov	dptr,#_heli_page
   06ED E0                 2425 	movx	a,@dptr
   06EE FE                 2426 	mov	r6,a
   06EF A3                 2427 	inc	dptr
   06F0 E0                 2428 	movx	a,@dptr
   06F1 FF                 2429 	mov	r7,a
                           2430 ;	genPointerGet
                           2431 ;	genGenPointerGet
   06F2 85*00 82           2432 	mov	dpl,_detect_collision_sloc0_1_0
   06F5 85*01 83           2433 	mov	dph,(_detect_collision_sloc0_1_0 + 1)
   06F8 85*02 F0           2434 	mov	b,(_detect_collision_sloc0_1_0 + 2)
   06FB 12s00r00           2435 	lcall	__gptrget
   06FE F5*00              2436 	mov	_detect_collision_sloc0_1_0,a
   0700 A3                 2437 	inc	dptr
   0701 12s00r00           2438 	lcall	__gptrget
   0704 F5*01              2439 	mov	(_detect_collision_sloc0_1_0 + 1),a
                           2440 ;	genAssign
   0706 8E 02              2441 	mov	ar2,r6
   0708 8F 05              2442 	mov	ar5,r7
                           2443 ;	genCmpGt
                           2444 ;	genCmp
   070A C3                 2445 	clr	c
   070B E5*00              2446 	mov	a,_detect_collision_sloc0_1_0
   070D 9A                 2447 	subb	a,r2
   070E E5*01              2448 	mov	a,(_detect_collision_sloc0_1_0 + 1)
   0710 9D                 2449 	subb	a,r5
   0711 E4                 2450 	clr	a
   0712 33                 2451 	rlc	a
                           2452 ;	genIpop
   0713 D0 02              2453 	pop	ar2
                           2454 ;	genIfx
                           2455 ;	genIfxJump
   0715 60 03              2456 	jz	00139$
   0717 02s08r5A           2457 	ljmp	00118$
   071A                    2458 00139$:
                           2459 ;	main.c:386: if((heli_line + HELI_WIDTH - CLEAR_LINE >= pillar_start_up + CLEAR_LINE) && (heli_line + HELI_WIDTH - CLEAR_LINE <= pillar_start_up + BRICK_WIDTH))
                           2460 ;	genIpush
   071A C0 02              2461 	push	ar2
                           2462 ;	genAssign
   071C 90s00r02           2463 	mov	dptr,#_heli_line
   071F E0                 2464 	movx	a,@dptr
   0720 FD                 2465 	mov	r5,a
                           2466 ;	genCast
   0721 7E 00              2467 	mov	r6,#0x00
                           2468 ;	genPlus
                           2469 ;     genPlusIncr
   0723 74 04              2470 	mov	a,#0x04
                           2471 ;	Peephole 236.a	used r5 instead of ar5
   0725 2D                 2472 	add	a,r5
   0726 F8                 2473 	mov	r0,a
                           2474 ;	Peephole 181	changed mov to clr
   0727 E4                 2475 	clr	a
                           2476 ;	Peephole 236.b	used r6 instead of ar6
   0728 3E                 2477 	addc	a,r6
   0729 F9                 2478 	mov	r1,a
                           2479 ;	genPlus
                           2480 ;     genPlusIncr
   072A 74 01              2481 	mov	a,#0x01
   072C 25*07              2482 	add	a,_detect_collision_sloc3_1_0
   072E FA                 2483 	mov	r2,a
                           2484 ;	Peephole 181	changed mov to clr
   072F E4                 2485 	clr	a
   0730 35*08              2486 	addc	a,(_detect_collision_sloc3_1_0 + 1)
   0732 FF                 2487 	mov	r7,a
                           2488 ;	genCmpLt
                           2489 ;	genCmp
   0733 C3                 2490 	clr	c
   0734 E8                 2491 	mov	a,r0
   0735 9A                 2492 	subb	a,r2
   0736 E9                 2493 	mov	a,r1
   0737 64 80              2494 	xrl	a,#0x80
   0739 8F F0              2495 	mov	b,r7
   073B 63 F0 80           2496 	xrl	b,#0x80
   073E 95 F0              2497 	subb	a,b
                           2498 ;	genIpop
                           2499 ;	genIfx
                           2500 ;	genIfxJump
                           2501 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           2502 ;	Peephole 129.b	optimized condition
   0740 D0 02              2503 	pop	ar2
   0742 40 4C              2504 	jc	00105$
                           2505 ;	Peephole 300	removed redundant label 00140$
                           2506 ;	genIpush
   0744 C0 02              2507 	push	ar2
                           2508 ;	genPlus
                           2509 ;     genPlusIncr
   0746 74 04              2510 	mov	a,#0x04
                           2511 ;	Peephole 236.a	used r5 instead of ar5
   0748 2D                 2512 	add	a,r5
   0749 F8                 2513 	mov	r0,a
                           2514 ;	Peephole 181	changed mov to clr
   074A E4                 2515 	clr	a
                           2516 ;	Peephole 236.b	used r6 instead of ar6
   074B 3E                 2517 	addc	a,r6
   074C F9                 2518 	mov	r1,a
                           2519 ;	genPlus
                           2520 ;     genPlusIncr
   074D 74 05              2521 	mov	a,#0x05
   074F 25*07              2522 	add	a,_detect_collision_sloc3_1_0
   0751 FA                 2523 	mov	r2,a
                           2524 ;	Peephole 181	changed mov to clr
   0752 E4                 2525 	clr	a
   0753 35*08              2526 	addc	a,(_detect_collision_sloc3_1_0 + 1)
   0755 FF                 2527 	mov	r7,a
                           2528 ;	genCmpGt
                           2529 ;	genCmp
   0756 C3                 2530 	clr	c
   0757 EA                 2531 	mov	a,r2
   0758 98                 2532 	subb	a,r0
   0759 EF                 2533 	mov	a,r7
   075A 64 80              2534 	xrl	a,#0x80
   075C 89 F0              2535 	mov	b,r1
   075E 63 F0 80           2536 	xrl	b,#0x80
   0761 95 F0              2537 	subb	a,b
                           2538 ;	genIpop
                           2539 ;	genIfx
                           2540 ;	genIfxJump
                           2541 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           2542 ;	Peephole 129.b	optimized condition
   0763 D0 02              2543 	pop	ar2
   0765 40 29              2544 	jc	00105$
                           2545 ;	Peephole 300	removed redundant label 00141$
                           2546 ;	main.c:388: draw_pillar(level_top[i][0], TOP, start_point + level_top[i][1], SOLID);
                           2547 ;	genCast
   0767 AA*00              2548 	mov	r2,_detect_collision_sloc0_1_0
                           2549 ;	genPlus
   0769 E5*03              2550 	mov	a,_detect_collision_sloc1_1_0
   076B 25*05              2551 	add	a,_detect_collision_sloc2_1_0
   076D FB                 2552 	mov	r3,a
   076E E5*04              2553 	mov	a,(_detect_collision_sloc1_1_0 + 1)
   0770 35*06              2554 	addc	a,(_detect_collision_sloc2_1_0 + 1)
   0772 FC                 2555 	mov	r4,a
                           2556 ;	genAssign
   0773 90s00r00           2557 	mov	dptr,#_draw_pillar_PARM_2
   0776 74 01              2558 	mov	a,#0x01
   0778 F0                 2559 	movx	@dptr,a
                           2560 ;	genAssign
   0779 90s00r00           2561 	mov	dptr,#_draw_pillar_PARM_3
   077C EB                 2562 	mov	a,r3
   077D F0                 2563 	movx	@dptr,a
   077E A3                 2564 	inc	dptr
   077F EC                 2565 	mov	a,r4
   0780 F0                 2566 	movx	@dptr,a
                           2567 ;	genAssign
   0781 90s00r00           2568 	mov	dptr,#_draw_pillar_PARM_4
   0784 74 01              2569 	mov	a,#0x01
   0786 F0                 2570 	movx	@dptr,a
                           2571 ;	genCall
   0787 8A 82              2572 	mov	dpl,r2
   0789 12s00r00           2573 	lcall	_draw_pillar
                           2574 ;	main.c:389: return COLLIDED;
                           2575 ;	genRet
   078C 75 82 01           2576 	mov	dpl,#0x01
                           2577 ;	Peephole 251.a	replaced ljmp to ret with ret
   078F 22                 2578 	ret
   0790                    2579 00105$:
                           2580 ;	main.c:393: else if((heli_line + CLEAR_LINE >= pillar_start_up + CLEAR_LINE) && (heli_line + CLEAR_LINE <= pillar_start_up + BRICK_WIDTH))
                           2581 ;	genIpush
   0790 C0 02              2582 	push	ar2
                           2583 ;	genPlus
                           2584 ;     genPlusIncr
   0792 74 01              2585 	mov	a,#0x01
                           2586 ;	Peephole 236.a	used r5 instead of ar5
   0794 2D                 2587 	add	a,r5
   0795 F8                 2588 	mov	r0,a
                           2589 ;	Peephole 181	changed mov to clr
   0796 E4                 2590 	clr	a
                           2591 ;	Peephole 236.b	used r6 instead of ar6
   0797 3E                 2592 	addc	a,r6
   0798 F9                 2593 	mov	r1,a
                           2594 ;	genAssign
   0799 90s01r1A           2595 	mov	dptr,#_detect_collision_pillar_start_up_1_1
   079C E0                 2596 	movx	a,@dptr
   079D F5*0E              2597 	mov	_detect_collision_sloc7_1_0,a
   079F A3                 2598 	inc	dptr
   07A0 E0                 2599 	movx	a,@dptr
   07A1 F5*0F              2600 	mov	(_detect_collision_sloc7_1_0 + 1),a
                           2601 ;	genPlus
                           2602 ;     genPlusIncr
   07A3 74 01              2603 	mov	a,#0x01
   07A5 25*0E              2604 	add	a,_detect_collision_sloc7_1_0
   07A7 FA                 2605 	mov	r2,a
                           2606 ;	Peephole 181	changed mov to clr
   07A8 E4                 2607 	clr	a
   07A9 35*0F              2608 	addc	a,(_detect_collision_sloc7_1_0 + 1)
   07AB FF                 2609 	mov	r7,a
                           2610 ;	genCmpLt
                           2611 ;	genCmp
   07AC C3                 2612 	clr	c
   07AD E8                 2613 	mov	a,r0
   07AE 9A                 2614 	subb	a,r2
   07AF E9                 2615 	mov	a,r1
   07B0 64 80              2616 	xrl	a,#0x80
   07B2 8F F0              2617 	mov	b,r7
   07B4 63 F0 80           2618 	xrl	b,#0x80
   07B7 95 F0              2619 	subb	a,b
   07B9 E4                 2620 	clr	a
   07BA 33                 2621 	rlc	a
                           2622 ;	genIpop
   07BB D0 02              2623 	pop	ar2
                           2624 ;	genIfx
                           2625 ;	genIfxJump
   07BD 60 03              2626 	jz	00142$
   07BF 02s09rDB           2627 	ljmp	00122$
   07C2                    2628 00142$:
                           2629 ;	genIpush
   07C2 C0 02              2630 	push	ar2
                           2631 ;	genPlus
                           2632 ;     genPlusIncr
   07C4 0D                 2633 	inc	r5
   07C5 BD 00 01           2634 	cjne	r5,#0x00,00143$
   07C8 0E                 2635 	inc	r6
   07C9                    2636 00143$:
                           2637 ;	genPlus
                           2638 ;     genPlusIncr
   07C9 74 05              2639 	mov	a,#0x05
   07CB 25*0E              2640 	add	a,_detect_collision_sloc7_1_0
   07CD FF                 2641 	mov	r7,a
                           2642 ;	Peephole 181	changed mov to clr
   07CE E4                 2643 	clr	a
   07CF 35*0F              2644 	addc	a,(_detect_collision_sloc7_1_0 + 1)
   07D1 FA                 2645 	mov	r2,a
                           2646 ;	genCmpGt
                           2647 ;	genCmp
   07D2 C3                 2648 	clr	c
   07D3 EF                 2649 	mov	a,r7
   07D4 9D                 2650 	subb	a,r5
   07D5 EA                 2651 	mov	a,r2
   07D6 64 80              2652 	xrl	a,#0x80
   07D8 8E F0              2653 	mov	b,r6
   07DA 63 F0 80           2654 	xrl	b,#0x80
   07DD 95 F0              2655 	subb	a,b
   07DF E4                 2656 	clr	a
   07E0 33                 2657 	rlc	a
                           2658 ;	genIpop
   07E1 D0 02              2659 	pop	ar2
                           2660 ;	genIfx
                           2661 ;	genIfxJump
   07E3 60 03              2662 	jz	00144$
   07E5 02s09rDB           2663 	ljmp	00122$
   07E8                    2664 00144$:
                           2665 ;	main.c:395: draw_pillar(level_top[i][0], TOP, start_point + level_top[i][1], SOLID);
                           2666 ;	genAssign
   07E8 90s01r15           2667 	mov	dptr,#_detect_collision_level_top_1_1
   07EB E0                 2668 	movx	a,@dptr
   07EC FA                 2669 	mov	r2,a
   07ED A3                 2670 	inc	dptr
   07EE E0                 2671 	movx	a,@dptr
   07EF FB                 2672 	mov	r3,a
   07F0 A3                 2673 	inc	dptr
   07F1 E0                 2674 	movx	a,@dptr
   07F2 FC                 2675 	mov	r4,a
                           2676 ;	genAssign
   07F3 90s01r18           2677 	mov	dptr,#_detect_collision_i_1_1
   07F6 E0                 2678 	movx	a,@dptr
   07F7 FD                 2679 	mov	r5,a
   07F8 A3                 2680 	inc	dptr
   07F9 E0                 2681 	movx	a,@dptr
                           2682 ;	genLeftShift
                           2683 ;	genLeftShiftLiteral
                           2684 ;	genlshTwo
   07FA FE                 2685 	mov	r6,a
                           2686 ;	Peephole 105	removed redundant mov
   07FB CD                 2687 	xch	a,r5
   07FC 25 E0              2688 	add	a,acc
   07FE CD                 2689 	xch	a,r5
   07FF 33                 2690 	rlc	a
   0800 CD                 2691 	xch	a,r5
   0801 25 E0              2692 	add	a,acc
   0803 CD                 2693 	xch	a,r5
   0804 33                 2694 	rlc	a
   0805 FE                 2695 	mov	r6,a
                           2696 ;	genPlus
                           2697 ;	Peephole 236.g	used r5 instead of ar5
   0806 ED                 2698 	mov	a,r5
                           2699 ;	Peephole 236.a	used r2 instead of ar2
   0807 2A                 2700 	add	a,r2
   0808 FA                 2701 	mov	r2,a
                           2702 ;	Peephole 236.g	used r6 instead of ar6
   0809 EE                 2703 	mov	a,r6
                           2704 ;	Peephole 236.b	used r3 instead of ar3
   080A 3B                 2705 	addc	a,r3
   080B FB                 2706 	mov	r3,a
                           2707 ;	genPointerGet
                           2708 ;	genGenPointerGet
   080C 8A 82              2709 	mov	dpl,r2
   080E 8B 83              2710 	mov	dph,r3
   0810 8C F0              2711 	mov	b,r4
   0812 12s00r00           2712 	lcall	__gptrget
   0815 FD                 2713 	mov	r5,a
   0816 A3                 2714 	inc	dptr
   0817 12s00r00           2715 	lcall	__gptrget
   081A FE                 2716 	mov	r6,a
                           2717 ;	genCast
   081B 8D 00              2718 	mov	ar0,r5
                           2719 ;	genPlus
                           2720 ;     genPlusIncr
   081D 74 02              2721 	mov	a,#0x02
                           2722 ;	Peephole 236.a	used r2 instead of ar2
   081F 2A                 2723 	add	a,r2
   0820 FE                 2724 	mov	r6,a
                           2725 ;	Peephole 181	changed mov to clr
   0821 E4                 2726 	clr	a
                           2727 ;	Peephole 236.b	used r3 instead of ar3
   0822 3B                 2728 	addc	a,r3
   0823 FF                 2729 	mov	r7,a
   0824 8C 05              2730 	mov	ar5,r4
                           2731 ;	genPointerGet
                           2732 ;	genGenPointerGet
   0826 8E 82              2733 	mov	dpl,r6
   0828 8F 83              2734 	mov	dph,r7
   082A 8D F0              2735 	mov	b,r5
   082C 12s00r00           2736 	lcall	__gptrget
   082F FE                 2737 	mov	r6,a
   0830 A3                 2738 	inc	dptr
   0831 12s00r00           2739 	lcall	__gptrget
   0834 FF                 2740 	mov	r7,a
                           2741 ;	genPlus
                           2742 ;	Peephole 236.g	used r6 instead of ar6
   0835 EE                 2743 	mov	a,r6
   0836 25*05              2744 	add	a,_detect_collision_sloc2_1_0
   0838 FE                 2745 	mov	r6,a
                           2746 ;	Peephole 236.g	used r7 instead of ar7
   0839 EF                 2747 	mov	a,r7
   083A 35*06              2748 	addc	a,(_detect_collision_sloc2_1_0 + 1)
   083C FF                 2749 	mov	r7,a
                           2750 ;	genAssign
   083D 90s00r00           2751 	mov	dptr,#_draw_pillar_PARM_2
   0840 74 01              2752 	mov	a,#0x01
   0842 F0                 2753 	movx	@dptr,a
                           2754 ;	genAssign
   0843 90s00r00           2755 	mov	dptr,#_draw_pillar_PARM_3
   0846 EE                 2756 	mov	a,r6
   0847 F0                 2757 	movx	@dptr,a
   0848 A3                 2758 	inc	dptr
   0849 EF                 2759 	mov	a,r7
   084A F0                 2760 	movx	@dptr,a
                           2761 ;	genAssign
   084B 90s00r00           2762 	mov	dptr,#_draw_pillar_PARM_4
   084E 74 01              2763 	mov	a,#0x01
   0850 F0                 2764 	movx	@dptr,a
                           2765 ;	genCall
   0851 88 82              2766 	mov	dpl,r0
   0853 12s00r00           2767 	lcall	_draw_pillar
                           2768 ;	main.c:396: return COLLIDED;
                           2769 ;	genRet
   0856 75 82 01           2770 	mov	dpl,#0x01
                           2771 ;	Peephole 251.a	replaced ljmp to ret with ret
   0859 22                 2772 	ret
   085A                    2773 00118$:
                           2774 ;	main.c:400: else if(heli_page >= (LCD_ROWS - level_bott[i][0] - 1 ))
                           2775 ;	genIpush
   085A C0 02              2776 	push	ar2
                           2777 ;	genPlus
                           2778 ;	Peephole 236.g	used r0 instead of ar0
   085C E8                 2779 	mov	a,r0
   085D 25*09              2780 	add	a,_detect_collision_sloc4_1_0
   085F F5*00              2781 	mov	_detect_collision_sloc0_1_0,a
                           2782 ;	Peephole 236.g	used r1 instead of ar1
   0861 E9                 2783 	mov	a,r1
   0862 35*0A              2784 	addc	a,(_detect_collision_sloc4_1_0 + 1)
   0864 F5*01              2785 	mov	(_detect_collision_sloc0_1_0 + 1),a
   0866 85*0B*02           2786 	mov	(_detect_collision_sloc0_1_0 + 2),(_detect_collision_sloc4_1_0 + 2)
                           2787 ;	genPointerGet
                           2788 ;	genGenPointerGet
   0869 85*00 82           2789 	mov	dpl,_detect_collision_sloc0_1_0
   086C 85*01 83           2790 	mov	dph,(_detect_collision_sloc0_1_0 + 1)
   086F 85*02 F0           2791 	mov	b,(_detect_collision_sloc0_1_0 + 2)
   0872 12s00r00           2792 	lcall	__gptrget
   0875 F5*0E              2793 	mov	_detect_collision_sloc7_1_0,a
   0877 A3                 2794 	inc	dptr
   0878 12s00r00           2795 	lcall	__gptrget
   087B F5*0F              2796 	mov	(_detect_collision_sloc7_1_0 + 1),a
                           2797 ;	genMinus
   087D 74 07              2798 	mov	a,#0x07
   087F C3                 2799 	clr	c
   0880 95*0E              2800 	subb	a,_detect_collision_sloc7_1_0
   0882 FD                 2801 	mov	r5,a
                           2802 ;	Peephole 181	changed mov to clr
   0883 E4                 2803 	clr	a
   0884 95*0F              2804 	subb	a,(_detect_collision_sloc7_1_0 + 1)
   0886 F8                 2805 	mov	r0,a
                           2806 ;	genAssign
   0887 8E 01              2807 	mov	ar1,r6
   0889 8F 02              2808 	mov	ar2,r7
                           2809 ;	genCmpLt
                           2810 ;	genCmp
   088B C3                 2811 	clr	c
   088C E9                 2812 	mov	a,r1
   088D 9D                 2813 	subb	a,r5
   088E EA                 2814 	mov	a,r2
   088F 98                 2815 	subb	a,r0
   0890 E4                 2816 	clr	a
   0891 33                 2817 	rlc	a
                           2818 ;	genIpop
   0892 D0 02              2819 	pop	ar2
                           2820 ;	genIfx
                           2821 ;	genIfxJump
   0894 60 03              2822 	jz	00145$
   0896 02s09rDB           2823 	ljmp	00122$
   0899                    2824 00145$:
                           2825 ;	main.c:404: if((heli_line + HELI_WIDTH - CLEAR_LINE >= pillar_start_bott + CLEAR_LINE) && (heli_line + HELI_WIDTH - CLEAR_LINE <= pillar_start_bott + BRICK_WIDTH))
                           2826 ;	genIpush
   0899 C0 02              2827 	push	ar2
                           2828 ;	genAssign
   089B 90s00r02           2829 	mov	dptr,#_heli_line
   089E E0                 2830 	movx	a,@dptr
   089F F8                 2831 	mov	r0,a
                           2832 ;	genCast
   08A0 79 00              2833 	mov	r1,#0x00
                           2834 ;	genPlus
                           2835 ;     genPlusIncr
   08A2 74 04              2836 	mov	a,#0x04
                           2837 ;	Peephole 236.a	used r0 instead of ar0
   08A4 28                 2838 	add	a,r0
   08A5 FA                 2839 	mov	r2,a
                           2840 ;	Peephole 181	changed mov to clr
   08A6 E4                 2841 	clr	a
                           2842 ;	Peephole 236.b	used r1 instead of ar1
   08A7 39                 2843 	addc	a,r1
   08A8 FD                 2844 	mov	r5,a
                           2845 ;	genPlus
                           2846 ;     genPlusIncr
   08A9 74 01              2847 	mov	a,#0x01
   08AB 25*0C              2848 	add	a,_detect_collision_sloc5_1_0
   08AD FE                 2849 	mov	r6,a
                           2850 ;	Peephole 181	changed mov to clr
   08AE E4                 2851 	clr	a
   08AF 35*0D              2852 	addc	a,(_detect_collision_sloc5_1_0 + 1)
   08B1 FF                 2853 	mov	r7,a
                           2854 ;	genCmpLt
                           2855 ;	genCmp
   08B2 C3                 2856 	clr	c
   08B3 EA                 2857 	mov	a,r2
   08B4 9E                 2858 	subb	a,r6
   08B5 ED                 2859 	mov	a,r5
   08B6 64 80              2860 	xrl	a,#0x80
   08B8 8F F0              2861 	mov	b,r7
   08BA 63 F0 80           2862 	xrl	b,#0x80
   08BD 95 F0              2863 	subb	a,b
                           2864 ;	genIpop
                           2865 ;	genIfx
                           2866 ;	genIfxJump
                           2867 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           2868 ;	Peephole 129.b	optimized condition
   08BF D0 02              2869 	pop	ar2
   08C1 40 63              2870 	jc	00112$
                           2871 ;	Peephole 300	removed redundant label 00146$
                           2872 ;	genIpush
   08C3 C0 02              2873 	push	ar2
                           2874 ;	genPlus
                           2875 ;     genPlusIncr
   08C5 74 04              2876 	mov	a,#0x04
                           2877 ;	Peephole 236.a	used r0 instead of ar0
   08C7 28                 2878 	add	a,r0
   08C8 FD                 2879 	mov	r5,a
                           2880 ;	Peephole 181	changed mov to clr
   08C9 E4                 2881 	clr	a
                           2882 ;	Peephole 236.b	used r1 instead of ar1
   08CA 39                 2883 	addc	a,r1
   08CB FE                 2884 	mov	r6,a
                           2885 ;	genPlus
                           2886 ;     genPlusIncr
   08CC 74 05              2887 	mov	a,#0x05
   08CE 25*0C              2888 	add	a,_detect_collision_sloc5_1_0
   08D0 FF                 2889 	mov	r7,a
                           2890 ;	Peephole 181	changed mov to clr
   08D1 E4                 2891 	clr	a
   08D2 35*0D              2892 	addc	a,(_detect_collision_sloc5_1_0 + 1)
   08D4 FA                 2893 	mov	r2,a
                           2894 ;	genCmpGt
                           2895 ;	genCmp
   08D5 C3                 2896 	clr	c
   08D6 EF                 2897 	mov	a,r7
   08D7 9D                 2898 	subb	a,r5
   08D8 EA                 2899 	mov	a,r2
   08D9 64 80              2900 	xrl	a,#0x80
   08DB 8E F0              2901 	mov	b,r6
   08DD 63 F0 80           2902 	xrl	b,#0x80
   08E0 95 F0              2903 	subb	a,b
                           2904 ;	genIpop
                           2905 ;	genIfx
                           2906 ;	genIfxJump
                           2907 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           2908 ;	Peephole 129.b	optimized condition
   08E2 D0 02              2909 	pop	ar2
   08E4 40 40              2910 	jc	00112$
                           2911 ;	Peephole 300	removed redundant label 00147$
                           2912 ;	main.c:406: draw_pillar(level_bott[i][0], BOTTOM, start_point + level_bott[i][1], SOLID);
                           2913 ;	genCast
   08E6 A8*0E              2914 	mov	r0,_detect_collision_sloc7_1_0
                           2915 ;	genPlus
                           2916 ;     genPlusIncr
   08E8 74 02              2917 	mov	a,#0x02
   08EA 25*00              2918 	add	a,_detect_collision_sloc0_1_0
   08EC FE                 2919 	mov	r6,a
                           2920 ;	Peephole 181	changed mov to clr
   08ED E4                 2921 	clr	a
   08EE 35*01              2922 	addc	a,(_detect_collision_sloc0_1_0 + 1)
   08F0 FF                 2923 	mov	r7,a
   08F1 AD*02              2924 	mov	r5,(_detect_collision_sloc0_1_0 + 2)
                           2925 ;	genPointerGet
                           2926 ;	genGenPointerGet
   08F3 8E 82              2927 	mov	dpl,r6
   08F5 8F 83              2928 	mov	dph,r7
   08F7 8D F0              2929 	mov	b,r5
   08F9 12s00r00           2930 	lcall	__gptrget
   08FC FE                 2931 	mov	r6,a
   08FD A3                 2932 	inc	dptr
   08FE 12s00r00           2933 	lcall	__gptrget
   0901 FF                 2934 	mov	r7,a
                           2935 ;	genPlus
                           2936 ;	Peephole 236.g	used r6 instead of ar6
   0902 EE                 2937 	mov	a,r6
   0903 25*05              2938 	add	a,_detect_collision_sloc2_1_0
   0905 FE                 2939 	mov	r6,a
                           2940 ;	Peephole 236.g	used r7 instead of ar7
   0906 EF                 2941 	mov	a,r7
   0907 35*06              2942 	addc	a,(_detect_collision_sloc2_1_0 + 1)
   0909 FF                 2943 	mov	r7,a
                           2944 ;	genAssign
   090A 90s00r00           2945 	mov	dptr,#_draw_pillar_PARM_2
                           2946 ;	Peephole 181	changed mov to clr
   090D E4                 2947 	clr	a
   090E F0                 2948 	movx	@dptr,a
                           2949 ;	genAssign
   090F 90s00r00           2950 	mov	dptr,#_draw_pillar_PARM_3
   0912 EE                 2951 	mov	a,r6
   0913 F0                 2952 	movx	@dptr,a
   0914 A3                 2953 	inc	dptr
   0915 EF                 2954 	mov	a,r7
   0916 F0                 2955 	movx	@dptr,a
                           2956 ;	genAssign
   0917 90s00r00           2957 	mov	dptr,#_draw_pillar_PARM_4
   091A 74 01              2958 	mov	a,#0x01
   091C F0                 2959 	movx	@dptr,a
                           2960 ;	genCall
   091D 88 82              2961 	mov	dpl,r0
   091F 12s00r00           2962 	lcall	_draw_pillar
                           2963 ;	main.c:407: return COLLIDED;
                           2964 ;	genRet
   0922 75 82 01           2965 	mov	dpl,#0x01
                           2966 ;	Peephole 251.a	replaced ljmp to ret with ret
   0925 22                 2967 	ret
   0926                    2968 00112$:
                           2969 ;	main.c:411: else if((heli_line + CLEAR_LINE >= pillar_start_bott + CLEAR_LINE) && (heli_line + CLEAR_LINE <= pillar_start_bott + BRICK_WIDTH))
                           2970 ;	genIpush
   0926 C0 02              2971 	push	ar2
                           2972 ;	genPlus
                           2973 ;     genPlusIncr
   0928 74 01              2974 	mov	a,#0x01
                           2975 ;	Peephole 236.a	used r0 instead of ar0
   092A 28                 2976 	add	a,r0
   092B FD                 2977 	mov	r5,a
                           2978 ;	Peephole 181	changed mov to clr
   092C E4                 2979 	clr	a
                           2980 ;	Peephole 236.b	used r1 instead of ar1
   092D 39                 2981 	addc	a,r1
   092E FE                 2982 	mov	r6,a
                           2983 ;	genAssign
   092F 90s01r1C           2984 	mov	dptr,#_detect_collision_pillar_start_bott_1_1
   0932 E0                 2985 	movx	a,@dptr
   0933 F5*0E              2986 	mov	_detect_collision_sloc7_1_0,a
   0935 A3                 2987 	inc	dptr
   0936 E0                 2988 	movx	a,@dptr
   0937 F5*0F              2989 	mov	(_detect_collision_sloc7_1_0 + 1),a
                           2990 ;	genPlus
                           2991 ;     genPlusIncr
   0939 74 01              2992 	mov	a,#0x01
   093B 25*0E              2993 	add	a,_detect_collision_sloc7_1_0
   093D FF                 2994 	mov	r7,a
                           2995 ;	Peephole 181	changed mov to clr
   093E E4                 2996 	clr	a
   093F 35*0F              2997 	addc	a,(_detect_collision_sloc7_1_0 + 1)
   0941 FA                 2998 	mov	r2,a
                           2999 ;	genCmpLt
                           3000 ;	genCmp
   0942 C3                 3001 	clr	c
   0943 ED                 3002 	mov	a,r5
   0944 9F                 3003 	subb	a,r7
   0945 EE                 3004 	mov	a,r6
   0946 64 80              3005 	xrl	a,#0x80
   0948 8A F0              3006 	mov	b,r2
   094A 63 F0 80           3007 	xrl	b,#0x80
   094D 95 F0              3008 	subb	a,b
   094F E4                 3009 	clr	a
   0950 33                 3010 	rlc	a
                           3011 ;	genIpop
   0951 D0 02              3012 	pop	ar2
                           3013 ;	genIfx
                           3014 ;	genIfxJump
   0953 60 03              3015 	jz	00148$
   0955 02s09rDB           3016 	ljmp	00122$
   0958                    3017 00148$:
                           3018 ;	genPlus
                           3019 ;     genPlusIncr
   0958 08                 3020 	inc	r0
   0959 B8 00 01           3021 	cjne	r0,#0x00,00149$
   095C 09                 3022 	inc	r1
   095D                    3023 00149$:
                           3024 ;	genPlus
                           3025 ;     genPlusIncr
   095D 74 05              3026 	mov	a,#0x05
   095F 25*0E              3027 	add	a,_detect_collision_sloc7_1_0
   0961 FD                 3028 	mov	r5,a
                           3029 ;	Peephole 181	changed mov to clr
   0962 E4                 3030 	clr	a
   0963 35*0F              3031 	addc	a,(_detect_collision_sloc7_1_0 + 1)
   0965 FE                 3032 	mov	r6,a
                           3033 ;	genCmpGt
                           3034 ;	genCmp
   0966 C3                 3035 	clr	c
   0967 ED                 3036 	mov	a,r5
   0968 98                 3037 	subb	a,r0
   0969 EE                 3038 	mov	a,r6
   096A 64 80              3039 	xrl	a,#0x80
   096C 89 F0              3040 	mov	b,r1
   096E 63 F0 80           3041 	xrl	b,#0x80
   0971 95 F0              3042 	subb	a,b
                           3043 ;	genIfxJump
                           3044 ;	Peephole 112.b	changed ljmp to sjmp
                           3045 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0973 40 66              3046 	jc	00122$
                           3047 ;	Peephole 300	removed redundant label 00150$
                           3048 ;	main.c:413: draw_pillar(level_bott[i][0], BOTTOM, start_point + level_bott[i][1], SOLID);
                           3049 ;	genAssign
   0975 90s01r18           3050 	mov	dptr,#_detect_collision_i_1_1
   0978 E0                 3051 	movx	a,@dptr
   0979 FD                 3052 	mov	r5,a
   097A A3                 3053 	inc	dptr
   097B E0                 3054 	movx	a,@dptr
                           3055 ;	genLeftShift
                           3056 ;	genLeftShiftLiteral
                           3057 ;	genlshTwo
   097C FE                 3058 	mov	r6,a
                           3059 ;	Peephole 105	removed redundant mov
   097D CD                 3060 	xch	a,r5
   097E 25 E0              3061 	add	a,acc
   0980 CD                 3062 	xch	a,r5
   0981 33                 3063 	rlc	a
   0982 CD                 3064 	xch	a,r5
   0983 25 E0              3065 	add	a,acc
   0985 CD                 3066 	xch	a,r5
   0986 33                 3067 	rlc	a
   0987 FE                 3068 	mov	r6,a
                           3069 ;	genPlus
                           3070 ;	Peephole 236.g	used r5 instead of ar5
   0988 ED                 3071 	mov	a,r5
   0989 25*09              3072 	add	a,_detect_collision_sloc4_1_0
   098B FD                 3073 	mov	r5,a
                           3074 ;	Peephole 236.g	used r6 instead of ar6
   098C EE                 3075 	mov	a,r6
   098D 35*0A              3076 	addc	a,(_detect_collision_sloc4_1_0 + 1)
   098F FE                 3077 	mov	r6,a
   0990 AF*0B              3078 	mov	r7,(_detect_collision_sloc4_1_0 + 2)
                           3079 ;	genPointerGet
                           3080 ;	genGenPointerGet
   0992 8D 82              3081 	mov	dpl,r5
   0994 8E 83              3082 	mov	dph,r6
   0996 8F F0              3083 	mov	b,r7
   0998 12s00r00           3084 	lcall	__gptrget
   099B F8                 3085 	mov	r0,a
   099C A3                 3086 	inc	dptr
   099D 12s00r00           3087 	lcall	__gptrget
   09A0 F9                 3088 	mov	r1,a
                           3089 ;	genCast
                           3090 ;	genPlus
                           3091 ;     genPlusIncr
   09A1 74 02              3092 	mov	a,#0x02
                           3093 ;	Peephole 236.a	used r5 instead of ar5
   09A3 2D                 3094 	add	a,r5
   09A4 FD                 3095 	mov	r5,a
                           3096 ;	Peephole 181	changed mov to clr
   09A5 E4                 3097 	clr	a
                           3098 ;	Peephole 236.b	used r6 instead of ar6
   09A6 3E                 3099 	addc	a,r6
   09A7 FE                 3100 	mov	r6,a
                           3101 ;	genPointerGet
                           3102 ;	genGenPointerGet
   09A8 8D 82              3103 	mov	dpl,r5
   09AA 8E 83              3104 	mov	dph,r6
   09AC 8F F0              3105 	mov	b,r7
   09AE 12s00r00           3106 	lcall	__gptrget
   09B1 FD                 3107 	mov	r5,a
   09B2 A3                 3108 	inc	dptr
   09B3 12s00r00           3109 	lcall	__gptrget
   09B6 FE                 3110 	mov	r6,a
                           3111 ;	genPlus
                           3112 ;	Peephole 236.g	used r5 instead of ar5
   09B7 ED                 3113 	mov	a,r5
   09B8 25*05              3114 	add	a,_detect_collision_sloc2_1_0
   09BA FD                 3115 	mov	r5,a
                           3116 ;	Peephole 236.g	used r6 instead of ar6
   09BB EE                 3117 	mov	a,r6
   09BC 35*06              3118 	addc	a,(_detect_collision_sloc2_1_0 + 1)
   09BE FE                 3119 	mov	r6,a
                           3120 ;	genAssign
   09BF 90s00r00           3121 	mov	dptr,#_draw_pillar_PARM_2
                           3122 ;	Peephole 181	changed mov to clr
   09C2 E4                 3123 	clr	a
   09C3 F0                 3124 	movx	@dptr,a
                           3125 ;	genAssign
   09C4 90s00r00           3126 	mov	dptr,#_draw_pillar_PARM_3
   09C7 ED                 3127 	mov	a,r5
   09C8 F0                 3128 	movx	@dptr,a
   09C9 A3                 3129 	inc	dptr
   09CA EE                 3130 	mov	a,r6
   09CB F0                 3131 	movx	@dptr,a
                           3132 ;	genAssign
   09CC 90s00r00           3133 	mov	dptr,#_draw_pillar_PARM_4
   09CF 74 01              3134 	mov	a,#0x01
   09D1 F0                 3135 	movx	@dptr,a
                           3136 ;	genCall
   09D2 88 82              3137 	mov	dpl,r0
   09D4 12s00r00           3138 	lcall	_draw_pillar
                           3139 ;	main.c:414: return COLLIDED;
                           3140 ;	genRet
   09D7 75 82 01           3141 	mov	dpl,#0x01
                           3142 ;	Peephole 112.b	changed ljmp to sjmp
                           3143 ;	Peephole 251.b	replaced sjmp to ret with ret
   09DA 22                 3144 	ret
   09DB                    3145 00122$:
                           3146 ;	main.c:375: for(i = 0; i < num_pillars; i++)
                           3147 ;	genPlus
                           3148 ;     genPlusIncr
   09DB 0B                 3149 	inc	r3
   09DC BB 00 01           3150 	cjne	r3,#0x00,00151$
   09DF 0C                 3151 	inc	r4
   09E0                    3152 00151$:
                           3153 ;	genAssign
   09E0 90s01r18           3154 	mov	dptr,#_detect_collision_i_1_1
   09E3 EB                 3155 	mov	a,r3
   09E4 F0                 3156 	movx	@dptr,a
   09E5 A3                 3157 	inc	dptr
   09E6 EC                 3158 	mov	a,r4
   09E7 F0                 3159 	movx	@dptr,a
   09E8 02s06r39           3160 	ljmp	00120$
   09EB                    3161 00123$:
                           3162 ;	main.c:418: return 0;
                           3163 ;	genRet
   09EB 75 82 00           3164 	mov	dpl,#0x00
                           3165 ;	Peephole 300	removed redundant label 00124$
   09EE 22                 3166 	ret
                           3167 ;------------------------------------------------------------
                           3168 ;Allocation info for local variables in function 'draw_level'
                           3169 ;------------------------------------------------------------
                           3170 ;sloc0                     Allocated with name '_draw_level_sloc0_1_0'
                           3171 ;sloc1                     Allocated with name '_draw_level_sloc1_1_0'
                           3172 ;sloc2                     Allocated with name '_draw_level_sloc2_1_0'
                           3173 ;sloc3                     Allocated with name '_draw_level_sloc3_1_0'
                           3174 ;level_bott                Allocated with name '_draw_level_PARM_2'
                           3175 ;start_point               Allocated with name '_draw_level_PARM_3'
                           3176 ;num_pillars               Allocated with name '_draw_level_PARM_4'
                           3177 ;level_top                 Allocated with name '_draw_level_level_top_1_1'
                           3178 ;i                         Allocated with name '_draw_level_i_1_1'
                           3179 ;------------------------------------------------------------
                           3180 ;	main.c:423: void draw_level(unsigned int level_top[MAX_PILLARS][PILLAR_CONIG], unsigned int level_bott[MAX_PILLARS][PILLAR_CONIG], int start_point, unsigned char num_pillars)
                           3181 ;	-----------------------------------------
                           3182 ;	 function draw_level
                           3183 ;	-----------------------------------------
   09EF                    3184 _draw_level:
                           3185 ;	genReceive
   09EF AA F0              3186 	mov	r2,b
   09F1 AB 83              3187 	mov	r3,dph
   09F3 E5 82              3188 	mov	a,dpl
   09F5 90s01r24           3189 	mov	dptr,#_draw_level_level_top_1_1
   09F8 F0                 3190 	movx	@dptr,a
   09F9 A3                 3191 	inc	dptr
   09FA EB                 3192 	mov	a,r3
   09FB F0                 3193 	movx	@dptr,a
   09FC A3                 3194 	inc	dptr
   09FD EA                 3195 	mov	a,r2
   09FE F0                 3196 	movx	@dptr,a
                           3197 ;	main.c:428: for(i = 0; i < num_pillars; i++)
                           3198 ;	genAssign
   09FF 90s01r24           3199 	mov	dptr,#_draw_level_level_top_1_1
   0A02 E0                 3200 	movx	a,@dptr
   0A03 F5*15              3201 	mov	_draw_level_sloc3_1_0,a
   0A05 A3                 3202 	inc	dptr
   0A06 E0                 3203 	movx	a,@dptr
   0A07 F5*16              3204 	mov	(_draw_level_sloc3_1_0 + 1),a
   0A09 A3                 3205 	inc	dptr
   0A0A E0                 3206 	movx	a,@dptr
   0A0B F5*17              3207 	mov	(_draw_level_sloc3_1_0 + 2),a
                           3208 ;	genAssign
   0A0D 90s01r21           3209 	mov	dptr,#_draw_level_PARM_3
   0A10 E0                 3210 	movx	a,@dptr
   0A11 FD                 3211 	mov	r5,a
   0A12 A3                 3212 	inc	dptr
   0A13 E0                 3213 	movx	a,@dptr
   0A14 FE                 3214 	mov	r6,a
                           3215 ;	genAssign
   0A15 90s01r1E           3216 	mov	dptr,#_draw_level_PARM_2
   0A18 E0                 3217 	movx	a,@dptr
   0A19 F5*12              3218 	mov	_draw_level_sloc2_1_0,a
   0A1B A3                 3219 	inc	dptr
   0A1C E0                 3220 	movx	a,@dptr
   0A1D F5*13              3221 	mov	(_draw_level_sloc2_1_0 + 1),a
   0A1F A3                 3222 	inc	dptr
   0A20 E0                 3223 	movx	a,@dptr
   0A21 F5*14              3224 	mov	(_draw_level_sloc2_1_0 + 2),a
                           3225 ;	genAssign
   0A23 90s01r23           3226 	mov	dptr,#_draw_level_PARM_4
   0A26 E0                 3227 	movx	a,@dptr
   0A27 F5*10              3228 	mov	_draw_level_sloc0_1_0,a
                           3229 ;	genAssign
   0A29 75*11 00           3230 	mov	_draw_level_sloc1_1_0,#0x00
   0A2C                    3231 00101$:
                           3232 ;	genCmpLt
                           3233 ;	genCmp
   0A2C C3                 3234 	clr	c
   0A2D E5*11              3235 	mov	a,_draw_level_sloc1_1_0
   0A2F 95*10              3236 	subb	a,_draw_level_sloc0_1_0
                           3237 ;	genIfxJump
   0A31 40 01              3238 	jc	00110$
                           3239 ;	Peephole 251.a	replaced ljmp to ret with ret
   0A33 22                 3240 	ret
   0A34                    3241 00110$:
                           3242 ;	main.c:431: draw_pillar(level_top[i][0], TOP, start_point + level_top[i][1], NOT_SOLID);
                           3243 ;	genLeftShift
                           3244 ;	genLeftShiftLiteral
                           3245 ;	genlshOne
   0A34 E5*11              3246 	mov	a,_draw_level_sloc1_1_0
   0A36 25 E0              3247 	add	a,acc
   0A38 25 E0              3248 	add	a,acc
                           3249 ;	genPlus
   0A3A FF                 3250 	mov	r7,a
                           3251 ;	Peephole 177.b	removed redundant mov
   0A3B 25*15              3252 	add	a,_draw_level_sloc3_1_0
   0A3D F8                 3253 	mov	r0,a
                           3254 ;	Peephole 181	changed mov to clr
   0A3E E4                 3255 	clr	a
   0A3F 35*16              3256 	addc	a,(_draw_level_sloc3_1_0 + 1)
   0A41 F9                 3257 	mov	r1,a
   0A42 AA*17              3258 	mov	r2,(_draw_level_sloc3_1_0 + 2)
                           3259 ;	genPointerGet
                           3260 ;	genGenPointerGet
   0A44 88 82              3261 	mov	dpl,r0
   0A46 89 83              3262 	mov	dph,r1
   0A48 8A F0              3263 	mov	b,r2
   0A4A 12s00r00           3264 	lcall	__gptrget
   0A4D FB                 3265 	mov	r3,a
   0A4E A3                 3266 	inc	dptr
   0A4F 12s00r00           3267 	lcall	__gptrget
   0A52 FC                 3268 	mov	r4,a
                           3269 ;	genCast
                           3270 ;	genPlus
                           3271 ;     genPlusIncr
   0A53 74 02              3272 	mov	a,#0x02
                           3273 ;	Peephole 236.a	used r0 instead of ar0
   0A55 28                 3274 	add	a,r0
   0A56 F8                 3275 	mov	r0,a
                           3276 ;	Peephole 181	changed mov to clr
   0A57 E4                 3277 	clr	a
                           3278 ;	Peephole 236.b	used r1 instead of ar1
   0A58 39                 3279 	addc	a,r1
   0A59 F9                 3280 	mov	r1,a
                           3281 ;	genPointerGet
                           3282 ;	genGenPointerGet
   0A5A 88 82              3283 	mov	dpl,r0
   0A5C 89 83              3284 	mov	dph,r1
   0A5E 8A F0              3285 	mov	b,r2
   0A60 12s00r00           3286 	lcall	__gptrget
   0A63 F8                 3287 	mov	r0,a
   0A64 A3                 3288 	inc	dptr
   0A65 12s00r00           3289 	lcall	__gptrget
   0A68 F9                 3290 	mov	r1,a
                           3291 ;	genPlus
                           3292 ;	Peephole 236.g	used r0 instead of ar0
   0A69 E8                 3293 	mov	a,r0
                           3294 ;	Peephole 236.a	used r5 instead of ar5
   0A6A 2D                 3295 	add	a,r5
   0A6B F8                 3296 	mov	r0,a
                           3297 ;	Peephole 236.g	used r1 instead of ar1
   0A6C E9                 3298 	mov	a,r1
                           3299 ;	Peephole 236.b	used r6 instead of ar6
   0A6D 3E                 3300 	addc	a,r6
   0A6E F9                 3301 	mov	r1,a
                           3302 ;	genAssign
   0A6F 90s00r00           3303 	mov	dptr,#_draw_pillar_PARM_2
   0A72 74 01              3304 	mov	a,#0x01
   0A74 F0                 3305 	movx	@dptr,a
                           3306 ;	genAssign
   0A75 90s00r00           3307 	mov	dptr,#_draw_pillar_PARM_3
   0A78 E8                 3308 	mov	a,r0
   0A79 F0                 3309 	movx	@dptr,a
   0A7A A3                 3310 	inc	dptr
   0A7B E9                 3311 	mov	a,r1
   0A7C F0                 3312 	movx	@dptr,a
                           3313 ;	genAssign
   0A7D 90s00r00           3314 	mov	dptr,#_draw_pillar_PARM_4
                           3315 ;	Peephole 181	changed mov to clr
   0A80 E4                 3316 	clr	a
   0A81 F0                 3317 	movx	@dptr,a
                           3318 ;	genCall
   0A82 8B 82              3319 	mov	dpl,r3
   0A84 C0 05              3320 	push	ar5
   0A86 C0 06              3321 	push	ar6
   0A88 C0 07              3322 	push	ar7
   0A8A 12s00r00           3323 	lcall	_draw_pillar
   0A8D D0 07              3324 	pop	ar7
   0A8F D0 06              3325 	pop	ar6
   0A91 D0 05              3326 	pop	ar5
                           3327 ;	main.c:432: draw_pillar(level_bott[i][0], BOTTOM, start_point + level_bott[i][1], NOT_SOLID);
                           3328 ;	genPlus
                           3329 ;	Peephole 236.g	used r7 instead of ar7
   0A93 EF                 3330 	mov	a,r7
   0A94 25*12              3331 	add	a,_draw_level_sloc2_1_0
   0A96 FF                 3332 	mov	r7,a
                           3333 ;	Peephole 181	changed mov to clr
   0A97 E4                 3334 	clr	a
   0A98 35*13              3335 	addc	a,(_draw_level_sloc2_1_0 + 1)
   0A9A FA                 3336 	mov	r2,a
   0A9B AB*14              3337 	mov	r3,(_draw_level_sloc2_1_0 + 2)
                           3338 ;	genPointerGet
                           3339 ;	genGenPointerGet
   0A9D 8F 82              3340 	mov	dpl,r7
   0A9F 8A 83              3341 	mov	dph,r2
   0AA1 8B F0              3342 	mov	b,r3
   0AA3 12s00r00           3343 	lcall	__gptrget
   0AA6 FC                 3344 	mov	r4,a
   0AA7 A3                 3345 	inc	dptr
   0AA8 12s00r00           3346 	lcall	__gptrget
   0AAB F8                 3347 	mov	r0,a
                           3348 ;	genCast
                           3349 ;	genPlus
                           3350 ;     genPlusIncr
   0AAC 74 02              3351 	mov	a,#0x02
                           3352 ;	Peephole 236.a	used r7 instead of ar7
   0AAE 2F                 3353 	add	a,r7
   0AAF FF                 3354 	mov	r7,a
                           3355 ;	Peephole 181	changed mov to clr
   0AB0 E4                 3356 	clr	a
                           3357 ;	Peephole 236.b	used r2 instead of ar2
   0AB1 3A                 3358 	addc	a,r2
   0AB2 FA                 3359 	mov	r2,a
                           3360 ;	genPointerGet
                           3361 ;	genGenPointerGet
   0AB3 8F 82              3362 	mov	dpl,r7
   0AB5 8A 83              3363 	mov	dph,r2
   0AB7 8B F0              3364 	mov	b,r3
   0AB9 12s00r00           3365 	lcall	__gptrget
   0ABC FF                 3366 	mov	r7,a
   0ABD A3                 3367 	inc	dptr
   0ABE 12s00r00           3368 	lcall	__gptrget
   0AC1 FA                 3369 	mov	r2,a
                           3370 ;	genPlus
                           3371 ;	Peephole 236.g	used r7 instead of ar7
   0AC2 EF                 3372 	mov	a,r7
                           3373 ;	Peephole 236.a	used r5 instead of ar5
   0AC3 2D                 3374 	add	a,r5
   0AC4 FF                 3375 	mov	r7,a
                           3376 ;	Peephole 236.g	used r2 instead of ar2
   0AC5 EA                 3377 	mov	a,r2
                           3378 ;	Peephole 236.b	used r6 instead of ar6
   0AC6 3E                 3379 	addc	a,r6
   0AC7 FA                 3380 	mov	r2,a
                           3381 ;	genAssign
   0AC8 90s00r00           3382 	mov	dptr,#_draw_pillar_PARM_2
                           3383 ;	Peephole 181	changed mov to clr
   0ACB E4                 3384 	clr	a
   0ACC F0                 3385 	movx	@dptr,a
                           3386 ;	genAssign
   0ACD 90s00r00           3387 	mov	dptr,#_draw_pillar_PARM_3
   0AD0 EF                 3388 	mov	a,r7
   0AD1 F0                 3389 	movx	@dptr,a
   0AD2 A3                 3390 	inc	dptr
   0AD3 EA                 3391 	mov	a,r2
   0AD4 F0                 3392 	movx	@dptr,a
                           3393 ;	genAssign
   0AD5 90s00r00           3394 	mov	dptr,#_draw_pillar_PARM_4
                           3395 ;	Peephole 181	changed mov to clr
   0AD8 E4                 3396 	clr	a
   0AD9 F0                 3397 	movx	@dptr,a
                           3398 ;	genCall
   0ADA 8C 82              3399 	mov	dpl,r4
   0ADC C0 05              3400 	push	ar5
   0ADE C0 06              3401 	push	ar6
   0AE0 12s00r00           3402 	lcall	_draw_pillar
   0AE3 D0 06              3403 	pop	ar6
   0AE5 D0 05              3404 	pop	ar5
                           3405 ;	main.c:428: for(i = 0; i < num_pillars; i++)
                           3406 ;	genPlus
                           3407 ;     genPlusIncr
   0AE7 05*11              3408 	inc	_draw_level_sloc1_1_0
   0AE9 02s0Ar2C           3409 	ljmp	00101$
                           3410 ;	Peephole 259.b	removed redundant label 00105$ and ret
                           3411 ;
                           3412 ;------------------------------------------------------------
                           3413 ;Allocation info for local variables in function 'generate_level'
                           3414 ;------------------------------------------------------------
                           3415 ;sloc0                     Allocated with name '_generate_level_sloc0_1_0'
                           3416 ;sloc1                     Allocated with name '_generate_level_sloc1_1_0'
                           3417 ;sloc2                     Allocated with name '_generate_level_sloc2_1_0'
                           3418 ;sloc3                     Allocated with name '_generate_level_sloc3_1_0'
                           3419 ;sloc4                     Allocated with name '_generate_level_sloc4_1_0'
                           3420 ;sloc5                     Allocated with name '_generate_level_sloc5_1_0'
                           3421 ;sloc6                     Allocated with name '_generate_level_sloc6_1_0'
                           3422 ;sloc7                     Allocated with name '_generate_level_sloc7_1_0'
                           3423 ;sloc8                     Allocated with name '_generate_level_sloc8_1_0'
                           3424 ;level_bott                Allocated with name '_generate_level_PARM_2'
                           3425 ;difficulty                Allocated with name '_generate_level_PARM_3'
                           3426 ;num_pillars               Allocated with name '_generate_level_PARM_4'
                           3427 ;game_delay                Allocated with name '_generate_level_PARM_5'
                           3428 ;level_top                 Allocated with name '_generate_level_level_top_1_1'
                           3429 ;i                         Allocated with name '_generate_level_i_1_1'
                           3430 ;pillar_len_up             Allocated with name '_generate_level_pillar_len_up_1_1'
                           3431 ;pillar_len_bott           Allocated with name '_generate_level_pillar_len_bott_1_1'
                           3432 ;min_rand                  Allocated with name '_generate_level_min_rand_1_1'
                           3433 ;max_rand                  Allocated with name '_generate_level_max_rand_1_1'
                           3434 ;impossible                Allocated with name '_generate_level_impossible_1_1'
                           3435 ;offset_up                 Allocated with name '_generate_level_offset_up_1_1'
                           3436 ;offset_bott               Allocated with name '_generate_level_offset_bott_1_1'
                           3437 ;------------------------------------------------------------
                           3438 ;	main.c:439: void generate_level(unsigned int level_top[MAX_PILLARS][PILLAR_CONIG], unsigned int level_bott[MAX_PILLARS][PILLAR_CONIG], unsigned char difficulty, unsigned char *num_pillars, unsigned char *game_delay)
                           3439 ;	-----------------------------------------
                           3440 ;	 function generate_level
                           3441 ;	-----------------------------------------
   0AEC                    3442 _generate_level:
                           3443 ;	genReceive
   0AEC AA F0              3444 	mov	r2,b
   0AEE AB 83              3445 	mov	r3,dph
   0AF0 E5 82              3446 	mov	a,dpl
   0AF2 90s01r31           3447 	mov	dptr,#_generate_level_level_top_1_1
   0AF5 F0                 3448 	movx	@dptr,a
   0AF6 A3                 3449 	inc	dptr
   0AF7 EB                 3450 	mov	a,r3
   0AF8 F0                 3451 	movx	@dptr,a
   0AF9 A3                 3452 	inc	dptr
   0AFA EA                 3453 	mov	a,r2
   0AFB F0                 3454 	movx	@dptr,a
                           3455 ;	main.c:443: unsigned char min_rand = 0, max_rand = 0, impossible = 0;
                           3456 ;	genAssign
   0AFC 90s01r38           3457 	mov	dptr,#_generate_level_min_rand_1_1
                           3458 ;	Peephole 181	changed mov to clr
                           3459 ;	genAssign
                           3460 ;	Peephole 181	changed mov to clr
                           3461 ;	Peephole 219.a	removed redundant clear
                           3462 ;	genAssign
                           3463 ;	Peephole 181	changed mov to clr
   0AFF E4                 3464 	clr	a
   0B00 F0                 3465 	movx	@dptr,a
   0B01 90s01r39           3466 	mov	dptr,#_generate_level_max_rand_1_1
   0B04 F0                 3467 	movx	@dptr,a
   0B05 90s01r3A           3468 	mov	dptr,#_generate_level_impossible_1_1
                           3469 ;	Peephole 219.b	removed redundant clear
   0B08 F0                 3470 	movx	@dptr,a
                           3471 ;	main.c:447: switch(difficulty)
                           3472 ;	genAssign
   0B09 90s01r2A           3473 	mov	dptr,#_generate_level_PARM_3
   0B0C E0                 3474 	movx	a,@dptr
                           3475 ;	genCmpGt
                           3476 ;	genCmp
                           3477 ;	genIfxJump
                           3478 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0B0D FA                 3479 	mov  r2,a
                           3480 ;	Peephole 177.a	removed redundant mov
   0B0E 24 FC              3481 	add	a,#0xff - 0x03
   0B10 50 03              3482 	jnc	00127$
   0B12 02s0Cr0C           3483 	ljmp	00105$
   0B15                    3484 00127$:
                           3485 ;	genJumpTab
   0B15 EA                 3486 	mov	a,r2
                           3487 ;	Peephole 254	optimized left shift
   0B16 2A                 3488 	add	a,r2
   0B17 2A                 3489 	add	a,r2
   0B18 90s0Br1C           3490 	mov	dptr,#00128$
   0B1B 73                 3491 	jmp	@a+dptr
   0B1C                    3492 00128$:
   0B1C 02s0Br28           3493 	ljmp	00101$
   0B1F 02s0Br63           3494 	ljmp	00102$
   0B22 02s0Br9E           3495 	ljmp	00103$
   0B25 02s0BrD8           3496 	ljmp	00104$
                           3497 ;	main.c:451: case 0: max_rand = 4;
   0B28                    3498 00101$:
                           3499 ;	genAssign
   0B28 90s01r39           3500 	mov	dptr,#_generate_level_max_rand_1_1
   0B2B 74 04              3501 	mov	a,#0x04
   0B2D F0                 3502 	movx	@dptr,a
                           3503 ;	main.c:452: min_rand = 1;
                           3504 ;	genAssign
   0B2E 90s01r38           3505 	mov	dptr,#_generate_level_min_rand_1_1
   0B31 74 01              3506 	mov	a,#0x01
   0B33 F0                 3507 	movx	@dptr,a
                           3508 ;	main.c:453: *num_pillars = 5;
                           3509 ;	genAssign
   0B34 90s01r2B           3510 	mov	dptr,#_generate_level_PARM_4
   0B37 E0                 3511 	movx	a,@dptr
   0B38 FA                 3512 	mov	r2,a
   0B39 A3                 3513 	inc	dptr
   0B3A E0                 3514 	movx	a,@dptr
   0B3B FB                 3515 	mov	r3,a
   0B3C A3                 3516 	inc	dptr
   0B3D E0                 3517 	movx	a,@dptr
   0B3E FC                 3518 	mov	r4,a
                           3519 ;	genPointerSet
                           3520 ;	genGenPointerSet
   0B3F 8A 82              3521 	mov	dpl,r2
   0B41 8B 83              3522 	mov	dph,r3
   0B43 8C F0              3523 	mov	b,r4
   0B45 74 05              3524 	mov	a,#0x05
   0B47 12s00r00           3525 	lcall	__gptrput
                           3526 ;	main.c:454: *game_delay = 200;
                           3527 ;	genAssign
   0B4A 90s01r2E           3528 	mov	dptr,#_generate_level_PARM_5
   0B4D E0                 3529 	movx	a,@dptr
   0B4E FA                 3530 	mov	r2,a
   0B4F A3                 3531 	inc	dptr
   0B50 E0                 3532 	movx	a,@dptr
   0B51 FB                 3533 	mov	r3,a
   0B52 A3                 3534 	inc	dptr
   0B53 E0                 3535 	movx	a,@dptr
   0B54 FC                 3536 	mov	r4,a
                           3537 ;	genPointerSet
                           3538 ;	genGenPointerSet
   0B55 8A 82              3539 	mov	dpl,r2
   0B57 8B 83              3540 	mov	dph,r3
   0B59 8C F0              3541 	mov	b,r4
   0B5B 74 C8              3542 	mov	a,#0xC8
   0B5D 12s00r00           3543 	lcall	__gptrput
                           3544 ;	main.c:455: break;
   0B60 02s0Cr3E           3545 	ljmp	00125$
                           3546 ;	main.c:458: case 1: max_rand = 6;
   0B63                    3547 00102$:
                           3548 ;	genAssign
   0B63 90s01r39           3549 	mov	dptr,#_generate_level_max_rand_1_1
   0B66 74 06              3550 	mov	a,#0x06
   0B68 F0                 3551 	movx	@dptr,a
                           3552 ;	main.c:459: min_rand = 1;
                           3553 ;	genAssign
   0B69 90s01r38           3554 	mov	dptr,#_generate_level_min_rand_1_1
   0B6C 74 01              3555 	mov	a,#0x01
   0B6E F0                 3556 	movx	@dptr,a
                           3557 ;	main.c:460: *num_pillars = 10;
                           3558 ;	genAssign
   0B6F 90s01r2B           3559 	mov	dptr,#_generate_level_PARM_4
   0B72 E0                 3560 	movx	a,@dptr
   0B73 FA                 3561 	mov	r2,a
   0B74 A3                 3562 	inc	dptr
   0B75 E0                 3563 	movx	a,@dptr
   0B76 FB                 3564 	mov	r3,a
   0B77 A3                 3565 	inc	dptr
   0B78 E0                 3566 	movx	a,@dptr
   0B79 FC                 3567 	mov	r4,a
                           3568 ;	genPointerSet
                           3569 ;	genGenPointerSet
   0B7A 8A 82              3570 	mov	dpl,r2
   0B7C 8B 83              3571 	mov	dph,r3
   0B7E 8C F0              3572 	mov	b,r4
   0B80 74 0A              3573 	mov	a,#0x0A
   0B82 12s00r00           3574 	lcall	__gptrput
                           3575 ;	main.c:461: *game_delay = 100;
                           3576 ;	genAssign
   0B85 90s01r2E           3577 	mov	dptr,#_generate_level_PARM_5
   0B88 E0                 3578 	movx	a,@dptr
   0B89 FA                 3579 	mov	r2,a
   0B8A A3                 3580 	inc	dptr
   0B8B E0                 3581 	movx	a,@dptr
   0B8C FB                 3582 	mov	r3,a
   0B8D A3                 3583 	inc	dptr
   0B8E E0                 3584 	movx	a,@dptr
   0B8F FC                 3585 	mov	r4,a
                           3586 ;	genPointerSet
                           3587 ;	genGenPointerSet
   0B90 8A 82              3588 	mov	dpl,r2
   0B92 8B 83              3589 	mov	dph,r3
   0B94 8C F0              3590 	mov	b,r4
   0B96 74 64              3591 	mov	a,#0x64
   0B98 12s00r00           3592 	lcall	__gptrput
                           3593 ;	main.c:462: break;
   0B9B 02s0Cr3E           3594 	ljmp	00125$
                           3595 ;	main.c:465: case 2: max_rand = 10;
   0B9E                    3596 00103$:
                           3597 ;	genAssign
   0B9E 90s01r39           3598 	mov	dptr,#_generate_level_max_rand_1_1
   0BA1 74 0A              3599 	mov	a,#0x0A
   0BA3 F0                 3600 	movx	@dptr,a
                           3601 ;	main.c:466: min_rand = 1;
                           3602 ;	genAssign
   0BA4 90s01r38           3603 	mov	dptr,#_generate_level_min_rand_1_1
   0BA7 74 01              3604 	mov	a,#0x01
   0BA9 F0                 3605 	movx	@dptr,a
                           3606 ;	main.c:467: *num_pillars = 15;
                           3607 ;	genAssign
   0BAA 90s01r2B           3608 	mov	dptr,#_generate_level_PARM_4
   0BAD E0                 3609 	movx	a,@dptr
   0BAE FA                 3610 	mov	r2,a
   0BAF A3                 3611 	inc	dptr
   0BB0 E0                 3612 	movx	a,@dptr
   0BB1 FB                 3613 	mov	r3,a
   0BB2 A3                 3614 	inc	dptr
   0BB3 E0                 3615 	movx	a,@dptr
   0BB4 FC                 3616 	mov	r4,a
                           3617 ;	genPointerSet
                           3618 ;	genGenPointerSet
   0BB5 8A 82              3619 	mov	dpl,r2
   0BB7 8B 83              3620 	mov	dph,r3
   0BB9 8C F0              3621 	mov	b,r4
   0BBB 74 0F              3622 	mov	a,#0x0F
   0BBD 12s00r00           3623 	lcall	__gptrput
                           3624 ;	main.c:468: *game_delay = 40;
                           3625 ;	genAssign
   0BC0 90s01r2E           3626 	mov	dptr,#_generate_level_PARM_5
   0BC3 E0                 3627 	movx	a,@dptr
   0BC4 FA                 3628 	mov	r2,a
   0BC5 A3                 3629 	inc	dptr
   0BC6 E0                 3630 	movx	a,@dptr
   0BC7 FB                 3631 	mov	r3,a
   0BC8 A3                 3632 	inc	dptr
   0BC9 E0                 3633 	movx	a,@dptr
   0BCA FC                 3634 	mov	r4,a
                           3635 ;	genPointerSet
                           3636 ;	genGenPointerSet
   0BCB 8A 82              3637 	mov	dpl,r2
   0BCD 8B 83              3638 	mov	dph,r3
   0BCF 8C F0              3639 	mov	b,r4
   0BD1 74 28              3640 	mov	a,#0x28
   0BD3 12s00r00           3641 	lcall	__gptrput
                           3642 ;	main.c:469: break;
                           3643 ;	main.c:472: case 3: impossible = 1;
                           3644 ;	Peephole 112.b	changed ljmp to sjmp
   0BD6 80 66              3645 	sjmp	00125$
   0BD8                    3646 00104$:
                           3647 ;	genAssign
   0BD8 90s01r3A           3648 	mov	dptr,#_generate_level_impossible_1_1
   0BDB 74 01              3649 	mov	a,#0x01
   0BDD F0                 3650 	movx	@dptr,a
                           3651 ;	main.c:473: *num_pillars = 3;
                           3652 ;	genAssign
   0BDE 90s01r2B           3653 	mov	dptr,#_generate_level_PARM_4
   0BE1 E0                 3654 	movx	a,@dptr
   0BE2 FA                 3655 	mov	r2,a
   0BE3 A3                 3656 	inc	dptr
   0BE4 E0                 3657 	movx	a,@dptr
   0BE5 FB                 3658 	mov	r3,a
   0BE6 A3                 3659 	inc	dptr
   0BE7 E0                 3660 	movx	a,@dptr
   0BE8 FC                 3661 	mov	r4,a
                           3662 ;	genPointerSet
                           3663 ;	genGenPointerSet
   0BE9 8A 82              3664 	mov	dpl,r2
   0BEB 8B 83              3665 	mov	dph,r3
   0BED 8C F0              3666 	mov	b,r4
   0BEF 74 03              3667 	mov	a,#0x03
   0BF1 12s00r00           3668 	lcall	__gptrput
                           3669 ;	main.c:474: *game_delay = 20;
                           3670 ;	genAssign
   0BF4 90s01r2E           3671 	mov	dptr,#_generate_level_PARM_5
   0BF7 E0                 3672 	movx	a,@dptr
   0BF8 FA                 3673 	mov	r2,a
   0BF9 A3                 3674 	inc	dptr
   0BFA E0                 3675 	movx	a,@dptr
   0BFB FB                 3676 	mov	r3,a
   0BFC A3                 3677 	inc	dptr
   0BFD E0                 3678 	movx	a,@dptr
   0BFE FC                 3679 	mov	r4,a
                           3680 ;	genPointerSet
                           3681 ;	genGenPointerSet
   0BFF 8A 82              3682 	mov	dpl,r2
   0C01 8B 83              3683 	mov	dph,r3
   0C03 8C F0              3684 	mov	b,r4
   0C05 74 14              3685 	mov	a,#0x14
   0C07 12s00r00           3686 	lcall	__gptrput
                           3687 ;	main.c:475: break;
                           3688 ;	main.c:476: default: max_rand = 3;
                           3689 ;	Peephole 112.b	changed ljmp to sjmp
   0C0A 80 32              3690 	sjmp	00125$
   0C0C                    3691 00105$:
                           3692 ;	genAssign
   0C0C 90s01r39           3693 	mov	dptr,#_generate_level_max_rand_1_1
   0C0F 74 03              3694 	mov	a,#0x03
   0C11 F0                 3695 	movx	@dptr,a
                           3696 ;	main.c:477: *num_pillars = 7;
                           3697 ;	genAssign
   0C12 90s01r2B           3698 	mov	dptr,#_generate_level_PARM_4
   0C15 E0                 3699 	movx	a,@dptr
   0C16 FA                 3700 	mov	r2,a
   0C17 A3                 3701 	inc	dptr
   0C18 E0                 3702 	movx	a,@dptr
   0C19 FB                 3703 	mov	r3,a
   0C1A A3                 3704 	inc	dptr
   0C1B E0                 3705 	movx	a,@dptr
   0C1C FC                 3706 	mov	r4,a
                           3707 ;	genPointerSet
                           3708 ;	genGenPointerSet
   0C1D 8A 82              3709 	mov	dpl,r2
   0C1F 8B 83              3710 	mov	dph,r3
   0C21 8C F0              3711 	mov	b,r4
   0C23 74 07              3712 	mov	a,#0x07
   0C25 12s00r00           3713 	lcall	__gptrput
                           3714 ;	main.c:478: *game_delay = 200;
                           3715 ;	genAssign
   0C28 90s01r2E           3716 	mov	dptr,#_generate_level_PARM_5
   0C2B E0                 3717 	movx	a,@dptr
   0C2C FA                 3718 	mov	r2,a
   0C2D A3                 3719 	inc	dptr
   0C2E E0                 3720 	movx	a,@dptr
   0C2F FB                 3721 	mov	r3,a
   0C30 A3                 3722 	inc	dptr
   0C31 E0                 3723 	movx	a,@dptr
   0C32 FC                 3724 	mov	r4,a
                           3725 ;	genPointerSet
                           3726 ;	genGenPointerSet
   0C33 8A 82              3727 	mov	dpl,r2
   0C35 8B 83              3728 	mov	dph,r3
   0C37 8C F0              3729 	mov	b,r4
   0C39 74 C8              3730 	mov	a,#0xC8
   0C3B 12s00r00           3731 	lcall	__gptrput
                           3732 ;	main.c:482: for(i = 0; i < *num_pillars; i++)
   0C3E                    3733 00125$:
                           3734 ;	genAssign
   0C3E 90s01r38           3735 	mov	dptr,#_generate_level_min_rand_1_1
   0C41 E0                 3736 	movx	a,@dptr
   0C42 F5*22              3737 	mov	_generate_level_sloc4_1_0,a
                           3738 ;	genAssign
   0C44 90s01r39           3739 	mov	dptr,#_generate_level_max_rand_1_1
   0C47 E0                 3740 	movx	a,@dptr
   0C48 F5*23              3741 	mov	_generate_level_sloc5_1_0,a
                           3742 ;	genAssign
   0C4A 90s01r3A           3743 	mov	dptr,#_generate_level_impossible_1_1
   0C4D E0                 3744 	movx	a,@dptr
   0C4E FC                 3745 	mov	r4,a
                           3746 ;	genAssign
   0C4F 90s01r31           3747 	mov	dptr,#_generate_level_level_top_1_1
   0C52 E0                 3748 	movx	a,@dptr
   0C53 FD                 3749 	mov	r5,a
   0C54 A3                 3750 	inc	dptr
   0C55 E0                 3751 	movx	a,@dptr
   0C56 FE                 3752 	mov	r6,a
   0C57 A3                 3753 	inc	dptr
   0C58 E0                 3754 	movx	a,@dptr
   0C59 FF                 3755 	mov	r7,a
                           3756 ;	genAssign
   0C5A 90s01r27           3757 	mov	dptr,#_generate_level_PARM_2
   0C5D E0                 3758 	movx	a,@dptr
   0C5E F5*18              3759 	mov	_generate_level_sloc0_1_0,a
   0C60 A3                 3760 	inc	dptr
   0C61 E0                 3761 	movx	a,@dptr
   0C62 F5*19              3762 	mov	(_generate_level_sloc0_1_0 + 1),a
   0C64 A3                 3763 	inc	dptr
   0C65 E0                 3764 	movx	a,@dptr
   0C66 F5*1A              3765 	mov	(_generate_level_sloc0_1_0 + 2),a
                           3766 ;	genAssign
   0C68 90s01r2B           3767 	mov	dptr,#_generate_level_PARM_4
   0C6B E0                 3768 	movx	a,@dptr
   0C6C F5*1B              3769 	mov	_generate_level_sloc1_1_0,a
   0C6E A3                 3770 	inc	dptr
   0C6F E0                 3771 	movx	a,@dptr
   0C70 F5*1C              3772 	mov	(_generate_level_sloc1_1_0 + 1),a
   0C72 A3                 3773 	inc	dptr
   0C73 E0                 3774 	movx	a,@dptr
   0C74 F5*1D              3775 	mov	(_generate_level_sloc1_1_0 + 2),a
                           3776 ;	genAssign
   0C76 E4                 3777 	clr	a
   0C77 F5*24              3778 	mov	_generate_level_sloc6_1_0,a
   0C79 F5*25              3779 	mov	(_generate_level_sloc6_1_0 + 1),a
                           3780 ;	genAssign
   0C7B 75*1E 0F           3781 	mov	_generate_level_sloc2_1_0,#0x0F
   0C7E E4                 3782 	clr	a
   0C7F F5*1F              3783 	mov	(_generate_level_sloc2_1_0 + 1),a
                           3784 ;	genAssign
   0C81 E4                 3785 	clr	a
   0C82 F5*20              3786 	mov	_generate_level_sloc3_1_0,a
   0C84 F5*21              3787 	mov	(_generate_level_sloc3_1_0 + 1),a
   0C86                    3788 00114$:
                           3789 ;	genIpush
                           3790 ;	genPointerGet
                           3791 ;	genGenPointerGet
   0C86 85*1B 82           3792 	mov	dpl,_generate_level_sloc1_1_0
   0C89 85*1C 83           3793 	mov	dph,(_generate_level_sloc1_1_0 + 1)
   0C8C 85*1D F0           3794 	mov	b,(_generate_level_sloc1_1_0 + 2)
   0C8F 12s00r00           3795 	lcall	__gptrget
   0C92 FB                 3796 	mov	r3,a
                           3797 ;	genCast
   0C93 7A 00              3798 	mov	r2,#0x00
                           3799 ;	genCmpLt
                           3800 ;	genCmp
   0C95 C3                 3801 	clr	c
   0C96 E5*20              3802 	mov	a,_generate_level_sloc3_1_0
   0C98 9B                 3803 	subb	a,r3
   0C99 E5*21              3804 	mov	a,(_generate_level_sloc3_1_0 + 1)
   0C9B 9A                 3805 	subb	a,r2
                           3806 ;	genIpop
                           3807 ;	genIfx
                           3808 ;	genIfxJump
                           3809 ;	Peephole 129.a	jump optimization
   0C9C 40 01              3810 	jc	00129$
                           3811 ;	Peephole 251.a	replaced ljmp to ret with ret
   0C9E 22                 3812 	ret
   0C9F                    3813 00129$:
                           3814 ;	main.c:484: if(!impossible)
                           3815 ;	genIfx
   0C9F EC                 3816 	mov	a,r4
                           3817 ;	genIfxJump
   0CA0 60 03              3818 	jz	00130$
   0CA2 02s0Dr48           3819 	ljmp	00112$
   0CA5                    3820 00130$:
                           3821 ;	main.c:487: pillar_len_up = rand(min_rand,max_rand);
                           3822 ;	genIpush
   0CA5 C0 04              3823 	push	ar4
                           3824 ;	genCast
   0CA7 AA*22              3825 	mov	r2,_generate_level_sloc4_1_0
   0CA9 7C 00              3826 	mov	r4,#0x00
                           3827 ;	genCast
   0CAB 85*23*26           3828 	mov	_generate_level_sloc7_1_0,_generate_level_sloc5_1_0
   0CAE 75*27 00           3829 	mov	(_generate_level_sloc7_1_0 + 1),#0x00
                           3830 ;	genAssign
   0CB1 90s00r00           3831 	mov	dptr,#_rand_PARM_2
   0CB4 E5*26              3832 	mov	a,_generate_level_sloc7_1_0
   0CB6 F0                 3833 	movx	@dptr,a
   0CB7 A3                 3834 	inc	dptr
   0CB8 E5*27              3835 	mov	a,(_generate_level_sloc7_1_0 + 1)
   0CBA F0                 3836 	movx	@dptr,a
                           3837 ;	genCall
   0CBB 8A 82              3838 	mov	dpl,r2
   0CBD 8C 83              3839 	mov	dph,r4
   0CBF C0 02              3840 	push	ar2
   0CC1 C0 04              3841 	push	ar4
   0CC3 C0 05              3842 	push	ar5
   0CC5 C0 06              3843 	push	ar6
   0CC7 C0 07              3844 	push	ar7
   0CC9 12s00r00           3845 	lcall	_rand
   0CCC A9 82              3846 	mov	r1,dpl
   0CCE AB 83              3847 	mov	r3,dph
   0CD0 D0 07              3848 	pop	ar7
   0CD2 D0 06              3849 	pop	ar6
   0CD4 D0 05              3850 	pop	ar5
   0CD6 D0 04              3851 	pop	ar4
   0CD8 D0 02              3852 	pop	ar2
                           3853 ;	genAssign
   0CDA 90s01r34           3854 	mov	dptr,#_generate_level_pillar_len_up_1_1
   0CDD E9                 3855 	mov	a,r1
   0CDE F0                 3856 	movx	@dptr,a
   0CDF A3                 3857 	inc	dptr
   0CE0 EB                 3858 	mov	a,r3
   0CE1 F0                 3859 	movx	@dptr,a
                           3860 ;	main.c:488: pillar_len_bott = rand(min_rand,max_rand);
                           3861 ;	genAssign
   0CE2 90s00r00           3862 	mov	dptr,#_rand_PARM_2
   0CE5 E5*26              3863 	mov	a,_generate_level_sloc7_1_0
   0CE7 F0                 3864 	movx	@dptr,a
   0CE8 A3                 3865 	inc	dptr
   0CE9 E5*27              3866 	mov	a,(_generate_level_sloc7_1_0 + 1)
   0CEB F0                 3867 	movx	@dptr,a
                           3868 ;	genCall
   0CEC 8A 82              3869 	mov	dpl,r2
   0CEE 8C 83              3870 	mov	dph,r4
   0CF0 C0 03              3871 	push	ar3
   0CF2 C0 04              3872 	push	ar4
   0CF4 C0 05              3873 	push	ar5
   0CF6 C0 06              3874 	push	ar6
   0CF8 C0 07              3875 	push	ar7
   0CFA C0 01              3876 	push	ar1
   0CFC 12s00r00           3877 	lcall	_rand
   0CFF E5 82              3878 	mov	a,dpl
   0D01 85 83 F0           3879 	mov	b,dph
   0D04 D0 01              3880 	pop	ar1
   0D06 D0 07              3881 	pop	ar7
   0D08 D0 06              3882 	pop	ar6
   0D0A D0 05              3883 	pop	ar5
   0D0C D0 04              3884 	pop	ar4
   0D0E D0 03              3885 	pop	ar3
                           3886 ;	genAssign
   0D10 90s01r36           3887 	mov	dptr,#_generate_level_pillar_len_bott_1_1
   0D13 F0                 3888 	movx	@dptr,a
   0D14 A3                 3889 	inc	dptr
   0D15 E5 F0              3890 	mov	a,b
   0D17 F0                 3891 	movx	@dptr,a
                           3892 ;	main.c:490: if(pillar_len_up > 5)
                           3893 ;	genCmpGt
                           3894 ;	genCmp
   0D18 C3                 3895 	clr	c
   0D19 74 05              3896 	mov	a,#0x05
   0D1B 99                 3897 	subb	a,r1
                           3898 ;	Peephole 181	changed mov to clr
   0D1C E4                 3899 	clr	a
   0D1D 9B                 3900 	subb	a,r3
   0D1E E4                 3901 	clr	a
   0D1F 33                 3902 	rlc	a
                           3903 ;	genIpop
   0D20 D0 04              3904 	pop	ar4
                           3905 ;	genIfx
                           3906 ;	genIfxJump
                           3907 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0D22 60 09              3908 	jz	00108$
                           3909 ;	Peephole 300	removed redundant label 00131$
                           3910 ;	main.c:491: pillar_len_up = 5;
                           3911 ;	genAssign
   0D24 90s01r34           3912 	mov	dptr,#_generate_level_pillar_len_up_1_1
   0D27 74 05              3913 	mov	a,#0x05
   0D29 F0                 3914 	movx	@dptr,a
   0D2A E4                 3915 	clr	a
   0D2B A3                 3916 	inc	dptr
   0D2C F0                 3917 	movx	@dptr,a
   0D2D                    3918 00108$:
                           3919 ;	main.c:492: if(pillar_len_bott > 5)
                           3920 ;	genAssign
   0D2D 90s01r36           3921 	mov	dptr,#_generate_level_pillar_len_bott_1_1
   0D30 E0                 3922 	movx	a,@dptr
   0D31 FA                 3923 	mov	r2,a
   0D32 A3                 3924 	inc	dptr
   0D33 E0                 3925 	movx	a,@dptr
   0D34 FB                 3926 	mov	r3,a
                           3927 ;	genCmpGt
                           3928 ;	genCmp
   0D35 C3                 3929 	clr	c
   0D36 74 05              3930 	mov	a,#0x05
   0D38 9A                 3931 	subb	a,r2
                           3932 ;	Peephole 181	changed mov to clr
   0D39 E4                 3933 	clr	a
   0D3A 9B                 3934 	subb	a,r3
                           3935 ;	genIfxJump
                           3936 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0D3B 50 1B              3937 	jnc	00113$
                           3938 ;	Peephole 300	removed redundant label 00132$
                           3939 ;	main.c:493: pillar_len_bott = 5;
                           3940 ;	genAssign
   0D3D 90s01r36           3941 	mov	dptr,#_generate_level_pillar_len_bott_1_1
   0D40 74 05              3942 	mov	a,#0x05
   0D42 F0                 3943 	movx	@dptr,a
   0D43 E4                 3944 	clr	a
   0D44 A3                 3945 	inc	dptr
   0D45 F0                 3946 	movx	@dptr,a
                           3947 ;	Peephole 112.b	changed ljmp to sjmp
   0D46 80 10              3948 	sjmp	00113$
   0D48                    3949 00112$:
                           3950 ;	main.c:498: pillar_len_up = 6;
                           3951 ;	genAssign
   0D48 90s01r34           3952 	mov	dptr,#_generate_level_pillar_len_up_1_1
   0D4B 74 06              3953 	mov	a,#0x06
   0D4D F0                 3954 	movx	@dptr,a
   0D4E E4                 3955 	clr	a
   0D4F A3                 3956 	inc	dptr
   0D50 F0                 3957 	movx	@dptr,a
                           3958 ;	main.c:499: pillar_len_bott = 0;
                           3959 ;	genAssign
   0D51 90s01r36           3960 	mov	dptr,#_generate_level_pillar_len_bott_1_1
   0D54 E4                 3961 	clr	a
   0D55 F0                 3962 	movx	@dptr,a
   0D56 A3                 3963 	inc	dptr
   0D57 F0                 3964 	movx	@dptr,a
   0D58                    3965 00113$:
                           3966 ;	main.c:502: level_top[i][0] = pillar_len_up;
                           3967 ;	genIpush
   0D58 C0 04              3968 	push	ar4
                           3969 ;	genLeftShift
                           3970 ;	genLeftShiftLiteral
                           3971 ;	genlshTwo
   0D5A AA*20              3972 	mov	r2,_generate_level_sloc3_1_0
   0D5C E5*21              3973 	mov	a,(_generate_level_sloc3_1_0 + 1)
   0D5E CA                 3974 	xch	a,r2
   0D5F 25 E0              3975 	add	a,acc
   0D61 CA                 3976 	xch	a,r2
   0D62 33                 3977 	rlc	a
   0D63 CA                 3978 	xch	a,r2
   0D64 25 E0              3979 	add	a,acc
   0D66 CA                 3980 	xch	a,r2
   0D67 33                 3981 	rlc	a
   0D68 FB                 3982 	mov	r3,a
                           3983 ;	genPlus
                           3984 ;	Peephole 236.g	used r2 instead of ar2
   0D69 EA                 3985 	mov	a,r2
                           3986 ;	Peephole 236.a	used r5 instead of ar5
   0D6A 2D                 3987 	add	a,r5
   0D6B F5*28              3988 	mov	_generate_level_sloc8_1_0,a
                           3989 ;	Peephole 236.g	used r3 instead of ar3
   0D6D EB                 3990 	mov	a,r3
                           3991 ;	Peephole 236.b	used r6 instead of ar6
   0D6E 3E                 3992 	addc	a,r6
   0D6F F5*29              3993 	mov	(_generate_level_sloc8_1_0 + 1),a
   0D71 8F*2A              3994 	mov	(_generate_level_sloc8_1_0 + 2),r7
                           3995 ;	genAssign
   0D73 90s01r34           3996 	mov	dptr,#_generate_level_pillar_len_up_1_1
   0D76 E0                 3997 	movx	a,@dptr
   0D77 FC                 3998 	mov	r4,a
   0D78 A3                 3999 	inc	dptr
   0D79 E0                 4000 	movx	a,@dptr
   0D7A F8                 4001 	mov	r0,a
                           4002 ;	genPointerSet
                           4003 ;	genGenPointerSet
   0D7B 85*28 82           4004 	mov	dpl,_generate_level_sloc8_1_0
   0D7E 85*29 83           4005 	mov	dph,(_generate_level_sloc8_1_0 + 1)
   0D81 85*2A F0           4006 	mov	b,(_generate_level_sloc8_1_0 + 2)
   0D84 EC                 4007 	mov	a,r4
   0D85 12s00r00           4008 	lcall	__gptrput
   0D88 A3                 4009 	inc	dptr
   0D89 E8                 4010 	mov	a,r0
   0D8A 12s00r00           4011 	lcall	__gptrput
                           4012 ;	main.c:503: level_top[i][1] = offset_up;
                           4013 ;	genPlus
                           4014 ;	Peephole 236.g	used r2 instead of ar2
   0D8D EA                 4015 	mov	a,r2
                           4016 ;	Peephole 236.a	used r5 instead of ar5
   0D8E 2D                 4017 	add	a,r5
   0D8F FC                 4018 	mov	r4,a
                           4019 ;	Peephole 236.g	used r3 instead of ar3
   0D90 EB                 4020 	mov	a,r3
                           4021 ;	Peephole 236.b	used r6 instead of ar6
   0D91 3E                 4022 	addc	a,r6
   0D92 F8                 4023 	mov	r0,a
   0D93 8F 01              4024 	mov	ar1,r7
                           4025 ;	genPlus
                           4026 ;     genPlusIncr
   0D95 74 02              4027 	mov	a,#0x02
                           4028 ;	Peephole 236.a	used r4 instead of ar4
   0D97 2C                 4029 	add	a,r4
   0D98 FC                 4030 	mov	r4,a
                           4031 ;	Peephole 181	changed mov to clr
   0D99 E4                 4032 	clr	a
                           4033 ;	Peephole 236.b	used r0 instead of ar0
   0D9A 38                 4034 	addc	a,r0
   0D9B F8                 4035 	mov	r0,a
                           4036 ;	genPointerSet
                           4037 ;	genGenPointerSet
   0D9C 8C 82              4038 	mov	dpl,r4
   0D9E 88 83              4039 	mov	dph,r0
   0DA0 89 F0              4040 	mov	b,r1
   0DA2 E5*24              4041 	mov	a,_generate_level_sloc6_1_0
   0DA4 12s00r00           4042 	lcall	__gptrput
   0DA7 A3                 4043 	inc	dptr
   0DA8 E5*25              4044 	mov	a,(_generate_level_sloc6_1_0 + 1)
   0DAA 12s00r00           4045 	lcall	__gptrput
                           4046 ;	main.c:504: level_bott[i][0] = pillar_len_bott;
                           4047 ;	genPlus
                           4048 ;	Peephole 236.g	used r2 instead of ar2
   0DAD EA                 4049 	mov	a,r2
   0DAE 25*18              4050 	add	a,_generate_level_sloc0_1_0
   0DB0 F5*28              4051 	mov	_generate_level_sloc8_1_0,a
                           4052 ;	Peephole 236.g	used r3 instead of ar3
   0DB2 EB                 4053 	mov	a,r3
   0DB3 35*19              4054 	addc	a,(_generate_level_sloc0_1_0 + 1)
   0DB5 F5*29              4055 	mov	(_generate_level_sloc8_1_0 + 1),a
   0DB7 85*1A*2A           4056 	mov	(_generate_level_sloc8_1_0 + 2),(_generate_level_sloc0_1_0 + 2)
                           4057 ;	genAssign
   0DBA 90s01r36           4058 	mov	dptr,#_generate_level_pillar_len_bott_1_1
   0DBD E0                 4059 	movx	a,@dptr
   0DBE FC                 4060 	mov	r4,a
   0DBF A3                 4061 	inc	dptr
   0DC0 E0                 4062 	movx	a,@dptr
   0DC1 F8                 4063 	mov	r0,a
                           4064 ;	genPointerSet
                           4065 ;	genGenPointerSet
   0DC2 85*28 82           4066 	mov	dpl,_generate_level_sloc8_1_0
   0DC5 85*29 83           4067 	mov	dph,(_generate_level_sloc8_1_0 + 1)
   0DC8 85*2A F0           4068 	mov	b,(_generate_level_sloc8_1_0 + 2)
   0DCB EC                 4069 	mov	a,r4
   0DCC 12s00r00           4070 	lcall	__gptrput
   0DCF A3                 4071 	inc	dptr
   0DD0 E8                 4072 	mov	a,r0
   0DD1 12s00r00           4073 	lcall	__gptrput
                           4074 ;	main.c:505: level_bott[i][1] = offset_bott;
                           4075 ;	genPlus
                           4076 ;	Peephole 236.g	used r2 instead of ar2
   0DD4 EA                 4077 	mov	a,r2
   0DD5 25*18              4078 	add	a,_generate_level_sloc0_1_0
   0DD7 FA                 4079 	mov	r2,a
                           4080 ;	Peephole 236.g	used r3 instead of ar3
   0DD8 EB                 4081 	mov	a,r3
   0DD9 35*19              4082 	addc	a,(_generate_level_sloc0_1_0 + 1)
   0DDB FB                 4083 	mov	r3,a
   0DDC AC*1A              4084 	mov	r4,(_generate_level_sloc0_1_0 + 2)
                           4085 ;	genPlus
                           4086 ;     genPlusIncr
   0DDE 74 02              4087 	mov	a,#0x02
                           4088 ;	Peephole 236.a	used r2 instead of ar2
   0DE0 2A                 4089 	add	a,r2
   0DE1 FA                 4090 	mov	r2,a
                           4091 ;	Peephole 181	changed mov to clr
   0DE2 E4                 4092 	clr	a
                           4093 ;	Peephole 236.b	used r3 instead of ar3
   0DE3 3B                 4094 	addc	a,r3
   0DE4 FB                 4095 	mov	r3,a
                           4096 ;	genPointerSet
                           4097 ;	genGenPointerSet
   0DE5 8A 82              4098 	mov	dpl,r2
   0DE7 8B 83              4099 	mov	dph,r3
   0DE9 8C F0              4100 	mov	b,r4
   0DEB E5*1E              4101 	mov	a,_generate_level_sloc2_1_0
   0DED 12s00r00           4102 	lcall	__gptrput
   0DF0 A3                 4103 	inc	dptr
   0DF1 E5*1F              4104 	mov	a,(_generate_level_sloc2_1_0 + 1)
   0DF3 12s00r00           4105 	lcall	__gptrput
                           4106 ;	main.c:507: offset_up += 30;
                           4107 ;	genPlus
                           4108 ;     genPlusIncr
   0DF6 74 1E              4109 	mov	a,#0x1E
   0DF8 25*24              4110 	add	a,_generate_level_sloc6_1_0
   0DFA F5*24              4111 	mov	_generate_level_sloc6_1_0,a
                           4112 ;	Peephole 181	changed mov to clr
   0DFC E4                 4113 	clr	a
   0DFD 35*25              4114 	addc	a,(_generate_level_sloc6_1_0 + 1)
   0DFF F5*25              4115 	mov	(_generate_level_sloc6_1_0 + 1),a
                           4116 ;	main.c:508: offset_bott += 30;
                           4117 ;	genPlus
                           4118 ;     genPlusIncr
   0E01 74 1E              4119 	mov	a,#0x1E
   0E03 25*1E              4120 	add	a,_generate_level_sloc2_1_0
   0E05 F5*1E              4121 	mov	_generate_level_sloc2_1_0,a
                           4122 ;	Peephole 181	changed mov to clr
   0E07 E4                 4123 	clr	a
   0E08 35*1F              4124 	addc	a,(_generate_level_sloc2_1_0 + 1)
   0E0A F5*1F              4125 	mov	(_generate_level_sloc2_1_0 + 1),a
                           4126 ;	main.c:482: for(i = 0; i < *num_pillars; i++)
                           4127 ;	genPlus
                           4128 ;     genPlusIncr
   0E0C 05*20              4129 	inc	_generate_level_sloc3_1_0
   0E0E E4                 4130 	clr	a
   0E0F B5*20 02           4131 	cjne	a,_generate_level_sloc3_1_0,00133$
   0E12 05*21              4132 	inc	(_generate_level_sloc3_1_0 + 1)
   0E14                    4133 00133$:
                           4134 ;	genIpop
   0E14 D0 04              4135 	pop	ar4
   0E16 02s0Cr86           4136 	ljmp	00114$
                           4137 ;	Peephole 259.b	removed redundant label 00118$ and ret
                           4138 ;
                           4139 ;------------------------------------------------------------
                           4140 ;Allocation info for local variables in function 'update_heli'
                           4141 ;------------------------------------------------------------
                           4142 ;x                         Allocated with name '_update_heli_x_1_1'
                           4143 ;y                         Allocated with name '_update_heli_y_1_1'
                           4144 ;------------------------------------------------------------
                           4145 ;	main.c:513: void update_heli()
                           4146 ;	-----------------------------------------
                           4147 ;	 function update_heli
                           4148 ;	-----------------------------------------
   0E19                    4149 _update_heli:
                           4150 ;	main.c:519: y = ADXL345_read_y();
                           4151 ;	genCall
   0E19 12s00r00           4152 	lcall	_ADXL345_read_y
   0E1C AA 82              4153 	mov	r2,dpl
   0E1E AB 83              4154 	mov	r3,dph
                           4155 ;	main.c:520: x = ADXL345_read_x();
                           4156 ;	genCall
   0E20 C0 02              4157 	push	ar2
   0E22 C0 03              4158 	push	ar3
   0E24 12s00r00           4159 	lcall	_ADXL345_read_x
   0E27 AC 82              4160 	mov	r4,dpl
   0E29 AD 83              4161 	mov	r5,dph
   0E2B D0 03              4162 	pop	ar3
   0E2D D0 02              4163 	pop	ar2
                           4164 ;	main.c:523: if(y >= STILL_MIN && y <= STILL_MAX && x >= STILL_MIN && x <= STILL_MAX)
                           4165 ;	genCmpLt
                           4166 ;	genCmp
   0E2F C3                 4167 	clr	c
   0E30 EA                 4168 	mov	a,r2
   0E31 94 6B              4169 	subb	a,#0x6B
   0E33 EB                 4170 	mov	a,r3
   0E34 64 80              4171 	xrl	a,#0x80
   0E36 94 7F              4172 	subb	a,#0x7f
   0E38 E4                 4173 	clr	a
   0E39 33                 4174 	rlc	a
                           4175 ;	genIfx
   0E3A FE                 4176 	mov	r6,a
                           4177 ;	Peephole 105	removed redundant mov
                           4178 ;	genIfxJump
                           4179 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0E3B 70 44              4180 	jnz	00156$
                           4181 ;	Peephole 300	removed redundant label 00195$
                           4182 ;	genCmpGt
                           4183 ;	genCmp
   0E3D C3                 4184 	clr	c
   0E3E 74 95              4185 	mov	a,#0x95
   0E40 9A                 4186 	subb	a,r2
                           4187 ;	Peephole 159	avoided xrl during execution
   0E41 74 80              4188 	mov	a,#(0x00 ^ 0x80)
   0E43 8B F0              4189 	mov	b,r3
   0E45 63 F0 80           4190 	xrl	b,#0x80
   0E48 95 F0              4191 	subb	a,b
                           4192 ;	genIfxJump
                           4193 ;	Peephole 112.b	changed ljmp to sjmp
                           4194 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           4195 ;	genCmpLt
                           4196 ;	genCmp
   0E4A 40 35              4197 	jc	00156$
                           4198 ;	Peephole 300	removed redundant label 00196$
                           4199 ;	Peephole 256.a	removed redundant clr c
   0E4C EC                 4200 	mov	a,r4
   0E4D 94 6B              4201 	subb	a,#0x6B
   0E4F ED                 4202 	mov	a,r5
   0E50 64 80              4203 	xrl	a,#0x80
   0E52 94 7F              4204 	subb	a,#0x7f
                           4205 ;	genIfxJump
                           4206 ;	Peephole 112.b	changed ljmp to sjmp
                           4207 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           4208 ;	genCmpGt
                           4209 ;	genCmp
   0E54 40 2B              4210 	jc	00156$
                           4211 ;	Peephole 300	removed redundant label 00197$
                           4212 ;	Peephole 256.a	removed redundant clr c
   0E56 74 95              4213 	mov	a,#0x95
   0E58 9C                 4214 	subb	a,r4
                           4215 ;	Peephole 159	avoided xrl during execution
   0E59 74 80              4216 	mov	a,#(0x00 ^ 0x80)
   0E5B 8D F0              4217 	mov	b,r5
   0E5D 63 F0 80           4218 	xrl	b,#0x80
   0E60 95 F0              4219 	subb	a,b
                           4220 ;	genIfxJump
                           4221 ;	Peephole 112.b	changed ljmp to sjmp
                           4222 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0E62 40 1D              4223 	jc	00156$
                           4224 ;	Peephole 300	removed redundant label 00198$
                           4225 ;	main.c:525: GLCD_WriteHeli(HELI,heli_page,heli_line);
                           4226 ;	genAssign
   0E64 90s00r00           4227 	mov	dptr,#_heli_page
   0E67 E0                 4228 	movx	a,@dptr
   0E68 FF                 4229 	mov	r7,a
   0E69 A3                 4230 	inc	dptr
   0E6A E0                 4231 	movx	a,@dptr
   0E6B F8                 4232 	mov	r0,a
                           4233 ;	genCast
                           4234 ;	genAssign
   0E6C 90s00r02           4235 	mov	dptr,#_heli_line
   0E6F E0                 4236 	movx	a,@dptr
   0E70 F8                 4237 	mov	r0,a
                           4238 ;	genAssign
   0E71 90s00r00           4239 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   0E74 EF                 4240 	mov	a,r7
   0E75 F0                 4241 	movx	@dptr,a
                           4242 ;	genAssign
   0E76 90s00r00           4243 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   0E79 E8                 4244 	mov	a,r0
   0E7A F0                 4245 	movx	@dptr,a
                           4246 ;	genCall
   0E7B 75 82 80           4247 	mov	dpl,#0x80
                           4248 ;	Peephole 251.a	replaced ljmp to ret with ret
                           4249 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0E7E 02s00r00           4250 	ljmp	_GLCD_WriteHeli
   0E81                    4251 00156$:
                           4252 ;	main.c:528: else if(y >= STILL_MIN && y <= STILL_MAX && x <= RIGHT_UP_MIN)
                           4253 ;	genIfx
   0E81 EE                 4254 	mov	a,r6
                           4255 ;	genIfxJump
                           4256 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0E82 70 4F              4257 	jnz	00151$
                           4258 ;	Peephole 300	removed redundant label 00199$
                           4259 ;	genCmpGt
                           4260 ;	genCmp
   0E84 C3                 4261 	clr	c
   0E85 74 95              4262 	mov	a,#0x95
   0E87 9A                 4263 	subb	a,r2
                           4264 ;	Peephole 159	avoided xrl during execution
   0E88 74 80              4265 	mov	a,#(0x00 ^ 0x80)
   0E8A 8B F0              4266 	mov	b,r3
   0E8C 63 F0 80           4267 	xrl	b,#0x80
   0E8F 95 F0              4268 	subb	a,b
                           4269 ;	genIfxJump
                           4270 ;	Peephole 112.b	changed ljmp to sjmp
                           4271 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           4272 ;	genCmpGt
                           4273 ;	genCmp
   0E91 40 40              4274 	jc	00151$
                           4275 ;	Peephole 300	removed redundant label 00200$
                           4276 ;	Peephole 256.a	removed redundant clr c
   0E93 74 6A              4277 	mov	a,#0x6A
   0E95 9C                 4278 	subb	a,r4
                           4279 ;	Peephole 159	avoided xrl during execution
   0E96 74 7F              4280 	mov	a,#(0xFF ^ 0x80)
   0E98 8D F0              4281 	mov	b,r5
   0E9A 63 F0 80           4282 	xrl	b,#0x80
   0E9D 95 F0              4283 	subb	a,b
                           4284 ;	genIfxJump
                           4285 ;	Peephole 112.b	changed ljmp to sjmp
                           4286 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0E9F 40 32              4287 	jc	00151$
                           4288 ;	Peephole 300	removed redundant label 00201$
                           4289 ;	main.c:531: if(++heli_line == BOUND_HELI_R)
                           4290 ;	genPlus
   0EA1 90s00r02           4291 	mov	dptr,#_heli_line
   0EA4 E0                 4292 	movx	a,@dptr
   0EA5 24 01              4293 	add	a,#0x01
   0EA7 F0                 4294 	movx	@dptr,a
                           4295 ;	genAssign
   0EA8 90s00r02           4296 	mov	dptr,#_heli_line
   0EAB E0                 4297 	movx	a,@dptr
   0EAC FF                 4298 	mov	r7,a
                           4299 ;	genCmpEq
                           4300 ;	gencjneshort
                           4301 ;	Peephole 112.b	changed ljmp to sjmp
                           4302 ;	Peephole 198.b	optimized misc jump sequence
   0EAD BF 7B 06           4303 	cjne	r7,#0x7B,00102$
                           4304 ;	Peephole 200.b	removed redundant sjmp
                           4305 ;	Peephole 300	removed redundant label 00202$
                           4306 ;	Peephole 300	removed redundant label 00203$
                           4307 ;	main.c:532: heli_line = 122;
                           4308 ;	genAssign
   0EB0 90s00r02           4309 	mov	dptr,#_heli_line
   0EB3 74 7A              4310 	mov	a,#0x7A
   0EB5 F0                 4311 	movx	@dptr,a
   0EB6                    4312 00102$:
                           4313 ;	main.c:533: GLCD_WriteHeli(HELI,heli_page,heli_line);
                           4314 ;	genAssign
   0EB6 90s00r00           4315 	mov	dptr,#_heli_page
   0EB9 E0                 4316 	movx	a,@dptr
   0EBA FF                 4317 	mov	r7,a
   0EBB A3                 4318 	inc	dptr
   0EBC E0                 4319 	movx	a,@dptr
   0EBD F8                 4320 	mov	r0,a
                           4321 ;	genCast
                           4322 ;	genAssign
   0EBE 90s00r02           4323 	mov	dptr,#_heli_line
   0EC1 E0                 4324 	movx	a,@dptr
   0EC2 F8                 4325 	mov	r0,a
                           4326 ;	genAssign
   0EC3 90s00r00           4327 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   0EC6 EF                 4328 	mov	a,r7
   0EC7 F0                 4329 	movx	@dptr,a
                           4330 ;	genAssign
   0EC8 90s00r00           4331 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   0ECB E8                 4332 	mov	a,r0
   0ECC F0                 4333 	movx	@dptr,a
                           4334 ;	genCall
   0ECD 75 82 80           4335 	mov	dpl,#0x80
                           4336 ;	Peephole 251.a	replaced ljmp to ret with ret
                           4337 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0ED0 02s00r00           4338 	ljmp	_GLCD_WriteHeli
   0ED3                    4339 00151$:
                           4340 ;	main.c:536: else if(y >= STILL_MIN && y <= STILL_MAX && x >= LEFT_DOWN_MIN)
                           4341 ;	genIfx
   0ED3 EE                 4342 	mov	a,r6
                           4343 ;	genIfxJump
                           4344 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0ED4 70 4D              4345 	jnz	00146$
                           4346 ;	Peephole 300	removed redundant label 00204$
                           4347 ;	genCmpGt
                           4348 ;	genCmp
   0ED6 C3                 4349 	clr	c
   0ED7 74 95              4350 	mov	a,#0x95
   0ED9 9A                 4351 	subb	a,r2
                           4352 ;	Peephole 159	avoided xrl during execution
   0EDA 74 80              4353 	mov	a,#(0x00 ^ 0x80)
   0EDC 8B F0              4354 	mov	b,r3
   0EDE 63 F0 80           4355 	xrl	b,#0x80
   0EE1 95 F0              4356 	subb	a,b
                           4357 ;	genIfxJump
                           4358 ;	Peephole 112.b	changed ljmp to sjmp
                           4359 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           4360 ;	genCmpLt
                           4361 ;	genCmp
   0EE3 40 3E              4362 	jc	00146$
                           4363 ;	Peephole 300	removed redundant label 00205$
                           4364 ;	Peephole 256.a	removed redundant clr c
   0EE5 EC                 4365 	mov	a,r4
   0EE6 94 96              4366 	subb	a,#0x96
   0EE8 ED                 4367 	mov	a,r5
   0EE9 64 80              4368 	xrl	a,#0x80
   0EEB 94 80              4369 	subb	a,#0x80
                           4370 ;	genIfxJump
                           4371 ;	Peephole 112.b	changed ljmp to sjmp
                           4372 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0EED 40 34              4373 	jc	00146$
                           4374 ;	Peephole 300	removed redundant label 00206$
                           4375 ;	main.c:539: if(--heli_line == BOUND_HELI_L)
                           4376 ;	genMinus
   0EEF 90s00r02           4377 	mov	dptr,#_heli_line
                           4378 ;	genMinusDec
   0EF2 E0                 4379 	movx	a,@dptr
   0EF3 14                 4380 	dec	a
                           4381 ;	genAssign
   0EF4 90s00r02           4382 	mov	dptr,#_heli_line
   0EF7 F0                 4383 	movx	@dptr,a
                           4384 ;	genAssign
   0EF8 90s00r02           4385 	mov	dptr,#_heli_line
   0EFB E0                 4386 	movx	a,@dptr
   0EFC FE                 4387 	mov	r6,a
                           4388 ;	genCmpEq
                           4389 ;	gencjneshort
                           4390 ;	Peephole 112.b	changed ljmp to sjmp
                           4391 ;	Peephole 198.b	optimized misc jump sequence
   0EFD BE 02 06           4392 	cjne	r6,#0x02,00104$
                           4393 ;	Peephole 200.b	removed redundant sjmp
                           4394 ;	Peephole 300	removed redundant label 00207$
                           4395 ;	Peephole 300	removed redundant label 00208$
                           4396 ;	main.c:540: heli_line = 3;
                           4397 ;	genAssign
   0F00 90s00r02           4398 	mov	dptr,#_heli_line
   0F03 74 03              4399 	mov	a,#0x03
   0F05 F0                 4400 	movx	@dptr,a
   0F06                    4401 00104$:
                           4402 ;	main.c:541: GLCD_WriteHeli(HELI,heli_page,heli_line);
                           4403 ;	genAssign
   0F06 90s00r00           4404 	mov	dptr,#_heli_page
   0F09 E0                 4405 	movx	a,@dptr
   0F0A FE                 4406 	mov	r6,a
   0F0B A3                 4407 	inc	dptr
   0F0C E0                 4408 	movx	a,@dptr
   0F0D FF                 4409 	mov	r7,a
                           4410 ;	genCast
                           4411 ;	genAssign
   0F0E 90s00r02           4412 	mov	dptr,#_heli_line
   0F11 E0                 4413 	movx	a,@dptr
   0F12 FF                 4414 	mov	r7,a
                           4415 ;	genAssign
   0F13 90s00r00           4416 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   0F16 EE                 4417 	mov	a,r6
   0F17 F0                 4418 	movx	@dptr,a
                           4419 ;	genAssign
   0F18 90s00r00           4420 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   0F1B EF                 4421 	mov	a,r7
   0F1C F0                 4422 	movx	@dptr,a
                           4423 ;	genCall
   0F1D 75 82 80           4424 	mov	dpl,#0x80
                           4425 ;	Peephole 251.a	replaced ljmp to ret with ret
                           4426 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0F20 02s00r00           4427 	ljmp	_GLCD_WriteHeli
   0F23                    4428 00146$:
                           4429 ;	main.c:544: else if (y <= RIGHT_UP_MIN && x >= STILL_MIN && x <= STILL_MAX)
                           4430 ;	genCmpGt
                           4431 ;	genCmp
   0F23 C3                 4432 	clr	c
   0F24 74 6A              4433 	mov	a,#0x6A
   0F26 9A                 4434 	subb	a,r2
                           4435 ;	Peephole 159	avoided xrl during execution
   0F27 74 7F              4436 	mov	a,#(0xFF ^ 0x80)
   0F29 8B F0              4437 	mov	b,r3
   0F2B 63 F0 80           4438 	xrl	b,#0x80
   0F2E 95 F0              4439 	subb	a,b
   0F30 E4                 4440 	clr	a
   0F31 33                 4441 	rlc	a
                           4442 ;	genIfx
   0F32 FA                 4443 	mov	r2,a
                           4444 ;	Peephole 105	removed redundant mov
                           4445 ;	genIfxJump
   0F33 60 03              4446 	jz	00209$
   0F35 02s0FrA9           4447 	ljmp	00141$
   0F38                    4448 00209$:
                           4449 ;	genCmpLt
                           4450 ;	genCmp
   0F38 C3                 4451 	clr	c
   0F39 EC                 4452 	mov	a,r4
   0F3A 94 6B              4453 	subb	a,#0x6B
   0F3C ED                 4454 	mov	a,r5
   0F3D 64 80              4455 	xrl	a,#0x80
   0F3F 94 7F              4456 	subb	a,#0x7f
                           4457 ;	genIfxJump
                           4458 ;	Peephole 112.b	changed ljmp to sjmp
                           4459 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           4460 ;	genCmpGt
                           4461 ;	genCmp
   0F41 40 66              4462 	jc	00141$
                           4463 ;	Peephole 300	removed redundant label 00210$
                           4464 ;	Peephole 256.a	removed redundant clr c
   0F43 74 95              4465 	mov	a,#0x95
   0F45 9C                 4466 	subb	a,r4
                           4467 ;	Peephole 159	avoided xrl during execution
   0F46 74 80              4468 	mov	a,#(0x00 ^ 0x80)
   0F48 8D F0              4469 	mov	b,r5
   0F4A 63 F0 80           4470 	xrl	b,#0x80
   0F4D 95 F0              4471 	subb	a,b
                           4472 ;	genIfxJump
                           4473 ;	Peephole 112.b	changed ljmp to sjmp
                           4474 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0F4F 40 58              4475 	jc	00141$
                           4476 ;	Peephole 300	removed redundant label 00211$
                           4477 ;	main.c:547: if(heli_page != BOUND_HELI_U)
                           4478 ;	genAssign
   0F51 90s00r00           4479 	mov	dptr,#_heli_page
   0F54 E0                 4480 	movx	a,@dptr
   0F55 FB                 4481 	mov	r3,a
   0F56 A3                 4482 	inc	dptr
   0F57 E0                 4483 	movx	a,@dptr
   0F58 FE                 4484 	mov	r6,a
                           4485 ;	genCmpEq
                           4486 ;	gencjneshort
   0F59 BB 01 05           4487 	cjne	r3,#0x01,00212$
   0F5C BE 00 02           4488 	cjne	r6,#0x00,00212$
                           4489 ;	Peephole 112.b	changed ljmp to sjmp
   0F5F 80 0D              4490 	sjmp	00106$
   0F61                    4491 00212$:
                           4492 ;	main.c:548: heli_page--;
                           4493 ;	genMinus
                           4494 ;	genMinusDec
   0F61 1B                 4495 	dec	r3
   0F62 BB FF 01           4496 	cjne	r3,#0xff,00213$
   0F65 1E                 4497 	dec	r6
   0F66                    4498 00213$:
                           4499 ;	genAssign
   0F66 90s00r00           4500 	mov	dptr,#_heli_page
   0F69 EB                 4501 	mov	a,r3
   0F6A F0                 4502 	movx	@dptr,a
   0F6B A3                 4503 	inc	dptr
   0F6C EE                 4504 	mov	a,r6
   0F6D F0                 4505 	movx	@dptr,a
   0F6E                    4506 00106$:
                           4507 ;	main.c:549: GLCD_WriteHeli(HELI,heli_page,heli_line);
                           4508 ;	genAssign
   0F6E 90s00r00           4509 	mov	dptr,#_heli_page
   0F71 E0                 4510 	movx	a,@dptr
   0F72 FB                 4511 	mov	r3,a
   0F73 A3                 4512 	inc	dptr
   0F74 E0                 4513 	movx	a,@dptr
   0F75 FE                 4514 	mov	r6,a
                           4515 ;	genCast
                           4516 ;	genAssign
   0F76 90s00r02           4517 	mov	dptr,#_heli_line
   0F79 E0                 4518 	movx	a,@dptr
   0F7A FE                 4519 	mov	r6,a
                           4520 ;	genAssign
   0F7B 90s00r00           4521 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   0F7E EB                 4522 	mov	a,r3
   0F7F F0                 4523 	movx	@dptr,a
                           4524 ;	genAssign
   0F80 90s00r00           4525 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   0F83 EE                 4526 	mov	a,r6
   0F84 F0                 4527 	movx	@dptr,a
                           4528 ;	genCall
   0F85 75 82 80           4529 	mov	dpl,#0x80
   0F88 12s00r00           4530 	lcall	_GLCD_WriteHeli
                           4531 ;	main.c:550: GLCD_WriteHeli(' ',heli_page + 1, heli_line);
                           4532 ;	genAssign
   0F8B 90s00r00           4533 	mov	dptr,#_heli_page
   0F8E E0                 4534 	movx	a,@dptr
   0F8F FB                 4535 	mov	r3,a
   0F90 A3                 4536 	inc	dptr
   0F91 E0                 4537 	movx	a,@dptr
   0F92 FE                 4538 	mov	r6,a
                           4539 ;	genCast
                           4540 ;	genPlus
                           4541 ;     genPlusIncr
   0F93 0B                 4542 	inc	r3
                           4543 ;	genAssign
   0F94 90s00r02           4544 	mov	dptr,#_heli_line
   0F97 E0                 4545 	movx	a,@dptr
   0F98 FE                 4546 	mov	r6,a
                           4547 ;	genAssign
   0F99 90s00r00           4548 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   0F9C EB                 4549 	mov	a,r3
   0F9D F0                 4550 	movx	@dptr,a
                           4551 ;	genAssign
   0F9E 90s00r00           4552 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   0FA1 EE                 4553 	mov	a,r6
   0FA2 F0                 4554 	movx	@dptr,a
                           4555 ;	genCall
   0FA3 75 82 20           4556 	mov	dpl,#0x20
                           4557 ;	Peephole 251.a	replaced ljmp to ret with ret
                           4558 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FA6 02s00r00           4559 	ljmp	_GLCD_WriteHeli
   0FA9                    4560 00141$:
                           4561 ;	main.c:553: else if (y <= RIGHT_UP_MIN && x <= RIGHT_UP_MIN)
                           4562 ;	genIfx
   0FA9 EA                 4563 	mov	a,r2
                           4564 ;	genIfxJump
   0FAA 60 03              4565 	jz	00214$
   0FAC 02s10r2C           4566 	ljmp	00137$
   0FAF                    4567 00214$:
                           4568 ;	genCmpGt
                           4569 ;	genCmp
   0FAF C3                 4570 	clr	c
   0FB0 74 6A              4571 	mov	a,#0x6A
   0FB2 9C                 4572 	subb	a,r4
                           4573 ;	Peephole 159	avoided xrl during execution
   0FB3 74 7F              4574 	mov	a,#(0xFF ^ 0x80)
   0FB5 8D F0              4575 	mov	b,r5
   0FB7 63 F0 80           4576 	xrl	b,#0x80
   0FBA 95 F0              4577 	subb	a,b
                           4578 ;	genIfxJump
                           4579 ;	Peephole 112.b	changed ljmp to sjmp
                           4580 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0FBC 40 6E              4581 	jc	00137$
                           4582 ;	Peephole 300	removed redundant label 00215$
                           4583 ;	main.c:556: if(heli_page != BOUND_HELI_U)
                           4584 ;	genAssign
   0FBE 90s00r00           4585 	mov	dptr,#_heli_page
   0FC1 E0                 4586 	movx	a,@dptr
   0FC2 FB                 4587 	mov	r3,a
   0FC3 A3                 4588 	inc	dptr
   0FC4 E0                 4589 	movx	a,@dptr
   0FC5 FE                 4590 	mov	r6,a
                           4591 ;	genCmpEq
                           4592 ;	gencjneshort
   0FC6 BB 01 05           4593 	cjne	r3,#0x01,00216$
   0FC9 BE 00 02           4594 	cjne	r6,#0x00,00216$
                           4595 ;	Peephole 112.b	changed ljmp to sjmp
   0FCC 80 0D              4596 	sjmp	00108$
   0FCE                    4597 00216$:
                           4598 ;	main.c:557: heli_page--;
                           4599 ;	genMinus
                           4600 ;	genMinusDec
   0FCE 1B                 4601 	dec	r3
   0FCF BB FF 01           4602 	cjne	r3,#0xff,00217$
   0FD2 1E                 4603 	dec	r6
   0FD3                    4604 00217$:
                           4605 ;	genAssign
   0FD3 90s00r00           4606 	mov	dptr,#_heli_page
   0FD6 EB                 4607 	mov	a,r3
   0FD7 F0                 4608 	movx	@dptr,a
   0FD8 A3                 4609 	inc	dptr
   0FD9 EE                 4610 	mov	a,r6
   0FDA F0                 4611 	movx	@dptr,a
   0FDB                    4612 00108$:
                           4613 ;	main.c:558: if(++heli_line == BOUND_HELI_R)
                           4614 ;	genPlus
   0FDB 90s00r02           4615 	mov	dptr,#_heli_line
   0FDE E0                 4616 	movx	a,@dptr
   0FDF 24 01              4617 	add	a,#0x01
   0FE1 F0                 4618 	movx	@dptr,a
                           4619 ;	genAssign
   0FE2 90s00r02           4620 	mov	dptr,#_heli_line
   0FE5 E0                 4621 	movx	a,@dptr
   0FE6 FB                 4622 	mov	r3,a
                           4623 ;	genCmpEq
                           4624 ;	gencjneshort
                           4625 ;	Peephole 112.b	changed ljmp to sjmp
                           4626 ;	Peephole 198.b	optimized misc jump sequence
   0FE7 BB 7B 06           4627 	cjne	r3,#0x7B,00110$
                           4628 ;	Peephole 200.b	removed redundant sjmp
                           4629 ;	Peephole 300	removed redundant label 00218$
                           4630 ;	Peephole 300	removed redundant label 00219$
                           4631 ;	main.c:559: heli_line = 122;
                           4632 ;	genAssign
   0FEA 90s00r02           4633 	mov	dptr,#_heli_line
   0FED 74 7A              4634 	mov	a,#0x7A
   0FEF F0                 4635 	movx	@dptr,a
   0FF0                    4636 00110$:
                           4637 ;	main.c:560: GLCD_WriteHeli(HELI,heli_page,heli_line);
                           4638 ;	genAssign
   0FF0 90s00r00           4639 	mov	dptr,#_heli_page
   0FF3 E0                 4640 	movx	a,@dptr
   0FF4 FB                 4641 	mov	r3,a
   0FF5 A3                 4642 	inc	dptr
   0FF6 E0                 4643 	movx	a,@dptr
   0FF7 FE                 4644 	mov	r6,a
                           4645 ;	genCast
                           4646 ;	genAssign
   0FF8 90s00r02           4647 	mov	dptr,#_heli_line
   0FFB E0                 4648 	movx	a,@dptr
   0FFC FE                 4649 	mov	r6,a
                           4650 ;	genAssign
   0FFD 90s00r00           4651 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   1000 EB                 4652 	mov	a,r3
   1001 F0                 4653 	movx	@dptr,a
                           4654 ;	genAssign
   1002 90s00r00           4655 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   1005 EE                 4656 	mov	a,r6
   1006 F0                 4657 	movx	@dptr,a
                           4658 ;	genCall
   1007 75 82 80           4659 	mov	dpl,#0x80
   100A 12s00r00           4660 	lcall	_GLCD_WriteHeli
                           4661 ;	main.c:561: GLCD_WriteHeli(' ',heli_page + 1, heli_line - 1);
                           4662 ;	genAssign
   100D 90s00r00           4663 	mov	dptr,#_heli_page
   1010 E0                 4664 	movx	a,@dptr
   1011 FB                 4665 	mov	r3,a
   1012 A3                 4666 	inc	dptr
   1013 E0                 4667 	movx	a,@dptr
   1014 FE                 4668 	mov	r6,a
                           4669 ;	genCast
                           4670 ;	genPlus
                           4671 ;     genPlusIncr
   1015 0B                 4672 	inc	r3
                           4673 ;	genAssign
   1016 90s00r02           4674 	mov	dptr,#_heli_line
   1019 E0                 4675 	movx	a,@dptr
   101A FE                 4676 	mov	r6,a
                           4677 ;	genMinus
                           4678 ;	genMinusDec
   101B 1E                 4679 	dec	r6
                           4680 ;	genAssign
   101C 90s00r00           4681 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   101F EB                 4682 	mov	a,r3
   1020 F0                 4683 	movx	@dptr,a
                           4684 ;	genAssign
   1021 90s00r00           4685 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   1024 EE                 4686 	mov	a,r6
   1025 F0                 4687 	movx	@dptr,a
                           4688 ;	genCall
   1026 75 82 20           4689 	mov	dpl,#0x20
                           4690 ;	Peephole 251.a	replaced ljmp to ret with ret
                           4691 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1029 02s00r00           4692 	ljmp	_GLCD_WriteHeli
   102C                    4693 00137$:
                           4694 ;	main.c:564: else if (y <= RIGHT_UP_MIN && x >= LEFT_DOWN_MIN)
                           4695 ;	genIfx
   102C EA                 4696 	mov	a,r2
                           4697 ;	genIfxJump
   102D 60 03              4698 	jz	00220$
   102F 02s10rAD           4699 	ljmp	00133$
   1032                    4700 00220$:
                           4701 ;	genCmpLt
                           4702 ;	genCmp
   1032 C3                 4703 	clr	c
   1033 EC                 4704 	mov	a,r4
   1034 94 96              4705 	subb	a,#0x96
   1036 ED                 4706 	mov	a,r5
   1037 64 80              4707 	xrl	a,#0x80
   1039 94 80              4708 	subb	a,#0x80
                           4709 ;	genIfxJump
                           4710 ;	Peephole 112.b	changed ljmp to sjmp
                           4711 ;	Peephole 160.a	removed sjmp by inverse jump logic
   103B 40 70              4712 	jc	00133$
                           4713 ;	Peephole 300	removed redundant label 00221$
                           4714 ;	main.c:567: if(heli_page != BOUND_HELI_U)
                           4715 ;	genAssign
   103D 90s00r00           4716 	mov	dptr,#_heli_page
   1040 E0                 4717 	movx	a,@dptr
   1041 FA                 4718 	mov	r2,a
   1042 A3                 4719 	inc	dptr
   1043 E0                 4720 	movx	a,@dptr
   1044 FB                 4721 	mov	r3,a
                           4722 ;	genCmpEq
                           4723 ;	gencjneshort
   1045 BA 01 05           4724 	cjne	r2,#0x01,00222$
   1048 BB 00 02           4725 	cjne	r3,#0x00,00222$
                           4726 ;	Peephole 112.b	changed ljmp to sjmp
   104B 80 0D              4727 	sjmp	00112$
   104D                    4728 00222$:
                           4729 ;	main.c:568: heli_page--;
                           4730 ;	genMinus
                           4731 ;	genMinusDec
   104D 1A                 4732 	dec	r2
   104E BA FF 01           4733 	cjne	r2,#0xff,00223$
   1051 1B                 4734 	dec	r3
   1052                    4735 00223$:
                           4736 ;	genAssign
   1052 90s00r00           4737 	mov	dptr,#_heli_page
   1055 EA                 4738 	mov	a,r2
   1056 F0                 4739 	movx	@dptr,a
   1057 A3                 4740 	inc	dptr
   1058 EB                 4741 	mov	a,r3
   1059 F0                 4742 	movx	@dptr,a
   105A                    4743 00112$:
                           4744 ;	main.c:569: if(--heli_line == BOUND_HELI_L)
                           4745 ;	genMinus
   105A 90s00r02           4746 	mov	dptr,#_heli_line
                           4747 ;	genMinusDec
   105D E0                 4748 	movx	a,@dptr
   105E 14                 4749 	dec	a
                           4750 ;	genAssign
   105F 90s00r02           4751 	mov	dptr,#_heli_line
   1062 F0                 4752 	movx	@dptr,a
                           4753 ;	genAssign
   1063 90s00r02           4754 	mov	dptr,#_heli_line
   1066 E0                 4755 	movx	a,@dptr
   1067 FA                 4756 	mov	r2,a
                           4757 ;	genCmpEq
                           4758 ;	gencjneshort
                           4759 ;	Peephole 112.b	changed ljmp to sjmp
                           4760 ;	Peephole 198.b	optimized misc jump sequence
   1068 BA 02 06           4761 	cjne	r2,#0x02,00114$
                           4762 ;	Peephole 200.b	removed redundant sjmp
                           4763 ;	Peephole 300	removed redundant label 00224$
                           4764 ;	Peephole 300	removed redundant label 00225$
                           4765 ;	main.c:570: heli_line = 3;
                           4766 ;	genAssign
   106B 90s00r02           4767 	mov	dptr,#_heli_line
   106E 74 03              4768 	mov	a,#0x03
   1070 F0                 4769 	movx	@dptr,a
   1071                    4770 00114$:
                           4771 ;	main.c:571: GLCD_WriteHeli(HELI,heli_page,heli_line);
                           4772 ;	genAssign
   1071 90s00r00           4773 	mov	dptr,#_heli_page
   1074 E0                 4774 	movx	a,@dptr
   1075 FA                 4775 	mov	r2,a
   1076 A3                 4776 	inc	dptr
   1077 E0                 4777 	movx	a,@dptr
   1078 FB                 4778 	mov	r3,a
                           4779 ;	genCast
                           4780 ;	genAssign
   1079 90s00r02           4781 	mov	dptr,#_heli_line
   107C E0                 4782 	movx	a,@dptr
   107D FB                 4783 	mov	r3,a
                           4784 ;	genAssign
   107E 90s00r00           4785 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   1081 EA                 4786 	mov	a,r2
   1082 F0                 4787 	movx	@dptr,a
                           4788 ;	genAssign
   1083 90s00r00           4789 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   1086 EB                 4790 	mov	a,r3
   1087 F0                 4791 	movx	@dptr,a
                           4792 ;	genCall
   1088 75 82 80           4793 	mov	dpl,#0x80
   108B 12s00r00           4794 	lcall	_GLCD_WriteHeli
                           4795 ;	main.c:572: GLCD_WriteHeli(' ',heli_page + 1, heli_line + 1);
                           4796 ;	genAssign
   108E 90s00r00           4797 	mov	dptr,#_heli_page
   1091 E0                 4798 	movx	a,@dptr
   1092 FA                 4799 	mov	r2,a
   1093 A3                 4800 	inc	dptr
   1094 E0                 4801 	movx	a,@dptr
   1095 FB                 4802 	mov	r3,a
                           4803 ;	genCast
                           4804 ;	genPlus
                           4805 ;     genPlusIncr
   1096 0A                 4806 	inc	r2
                           4807 ;	genAssign
   1097 90s00r02           4808 	mov	dptr,#_heli_line
   109A E0                 4809 	movx	a,@dptr
                           4810 ;	genPlus
                           4811 ;     genPlusIncr
                           4812 ;	Peephole 185	changed order of increment (acc incremented also!)
   109B 04                 4813 	inc	a
   109C FB                 4814 	mov	r3,a
                           4815 ;	genAssign
   109D 90s00r00           4816 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   10A0 EA                 4817 	mov	a,r2
   10A1 F0                 4818 	movx	@dptr,a
                           4819 ;	genAssign
   10A2 90s00r00           4820 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   10A5 EB                 4821 	mov	a,r3
   10A6 F0                 4822 	movx	@dptr,a
                           4823 ;	genCall
   10A7 75 82 20           4824 	mov	dpl,#0x20
                           4825 ;	Peephole 251.a	replaced ljmp to ret with ret
                           4826 ;	Peephole 253.a	replaced lcall/ret with ljmp
   10AA 02s00r00           4827 	ljmp	_GLCD_WriteHeli
   10AD                    4828 00133$:
                           4829 ;	main.c:575: else if(x >= STILL_MIN && x <= STILL_MAX)
                           4830 ;	genCmpLt
                           4831 ;	genCmp
   10AD C3                 4832 	clr	c
   10AE EC                 4833 	mov	a,r4
   10AF 94 6B              4834 	subb	a,#0x6B
   10B1 ED                 4835 	mov	a,r5
   10B2 64 80              4836 	xrl	a,#0x80
   10B4 94 7F              4837 	subb	a,#0x7f
                           4838 ;	genIfxJump
                           4839 ;	Peephole 112.b	changed ljmp to sjmp
                           4840 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           4841 ;	genCmpGt
                           4842 ;	genCmp
   10B6 40 64              4843 	jc	00129$
                           4844 ;	Peephole 300	removed redundant label 00226$
                           4845 ;	Peephole 256.a	removed redundant clr c
   10B8 74 95              4846 	mov	a,#0x95
   10BA 9C                 4847 	subb	a,r4
                           4848 ;	Peephole 159	avoided xrl during execution
   10BB 74 80              4849 	mov	a,#(0x00 ^ 0x80)
   10BD 8D F0              4850 	mov	b,r5
   10BF 63 F0 80           4851 	xrl	b,#0x80
   10C2 95 F0              4852 	subb	a,b
                           4853 ;	genIfxJump
                           4854 ;	Peephole 112.b	changed ljmp to sjmp
                           4855 ;	Peephole 160.a	removed sjmp by inverse jump logic
   10C4 40 56              4856 	jc	00129$
                           4857 ;	Peephole 300	removed redundant label 00227$
                           4858 ;	main.c:578: if(heli_page != BOUND_HELI_D)
                           4859 ;	genAssign
   10C6 90s00r00           4860 	mov	dptr,#_heli_page
   10C9 E0                 4861 	movx	a,@dptr
   10CA FA                 4862 	mov	r2,a
   10CB A3                 4863 	inc	dptr
   10CC E0                 4864 	movx	a,@dptr
   10CD FB                 4865 	mov	r3,a
                           4866 ;	genCmpEq
                           4867 ;	gencjneshort
   10CE BA 06 05           4868 	cjne	r2,#0x06,00228$
   10D1 BB 00 02           4869 	cjne	r3,#0x00,00228$
                           4870 ;	Peephole 112.b	changed ljmp to sjmp
   10D4 80 0B              4871 	sjmp	00116$
   10D6                    4872 00228$:
                           4873 ;	main.c:579: heli_page++;
                           4874 ;	genPlus
   10D6 90s00r00           4875 	mov	dptr,#_heli_page
                           4876 ;     genPlusIncr
   10D9 74 01              4877 	mov	a,#0x01
                           4878 ;	Peephole 236.a	used r2 instead of ar2
   10DB 2A                 4879 	add	a,r2
   10DC F0                 4880 	movx	@dptr,a
                           4881 ;	Peephole 181	changed mov to clr
   10DD E4                 4882 	clr	a
                           4883 ;	Peephole 236.b	used r3 instead of ar3
   10DE 3B                 4884 	addc	a,r3
   10DF A3                 4885 	inc	dptr
   10E0 F0                 4886 	movx	@dptr,a
   10E1                    4887 00116$:
                           4888 ;	main.c:580: GLCD_WriteHeli(HELI,heli_page,heli_line);
                           4889 ;	genAssign
   10E1 90s00r00           4890 	mov	dptr,#_heli_page
   10E4 E0                 4891 	movx	a,@dptr
   10E5 FA                 4892 	mov	r2,a
   10E6 A3                 4893 	inc	dptr
   10E7 E0                 4894 	movx	a,@dptr
   10E8 FB                 4895 	mov	r3,a
                           4896 ;	genCast
                           4897 ;	genAssign
   10E9 90s00r02           4898 	mov	dptr,#_heli_line
   10EC E0                 4899 	movx	a,@dptr
   10ED FB                 4900 	mov	r3,a
                           4901 ;	genAssign
   10EE 90s00r00           4902 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   10F1 EA                 4903 	mov	a,r2
   10F2 F0                 4904 	movx	@dptr,a
                           4905 ;	genAssign
   10F3 90s00r00           4906 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   10F6 EB                 4907 	mov	a,r3
   10F7 F0                 4908 	movx	@dptr,a
                           4909 ;	genCall
   10F8 75 82 80           4910 	mov	dpl,#0x80
   10FB 12s00r00           4911 	lcall	_GLCD_WriteHeli
                           4912 ;	main.c:581: GLCD_WriteHeli(' ',heli_page - 1, heli_line);
                           4913 ;	genAssign
   10FE 90s00r00           4914 	mov	dptr,#_heli_page
   1101 E0                 4915 	movx	a,@dptr
   1102 FA                 4916 	mov	r2,a
   1103 A3                 4917 	inc	dptr
   1104 E0                 4918 	movx	a,@dptr
   1105 FB                 4919 	mov	r3,a
                           4920 ;	genCast
                           4921 ;	genMinus
                           4922 ;	genMinusDec
   1106 1A                 4923 	dec	r2
                           4924 ;	genAssign
   1107 90s00r02           4925 	mov	dptr,#_heli_line
   110A E0                 4926 	movx	a,@dptr
   110B FB                 4927 	mov	r3,a
                           4928 ;	genAssign
   110C 90s00r00           4929 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   110F EA                 4930 	mov	a,r2
   1110 F0                 4931 	movx	@dptr,a
                           4932 ;	genAssign
   1111 90s00r00           4933 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   1114 EB                 4934 	mov	a,r3
   1115 F0                 4935 	movx	@dptr,a
                           4936 ;	genCall
   1116 75 82 20           4937 	mov	dpl,#0x20
                           4938 ;	Peephole 251.a	replaced ljmp to ret with ret
                           4939 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1119 02s00r00           4940 	ljmp	_GLCD_WriteHeli
   111C                    4941 00129$:
                           4942 ;	main.c:584: else if(x <= RIGHT_UP_MIN)
                           4943 ;	genCmpGt
                           4944 ;	genCmp
   111C C3                 4945 	clr	c
   111D 74 6A              4946 	mov	a,#0x6A
   111F 9C                 4947 	subb	a,r4
                           4948 ;	Peephole 159	avoided xrl during execution
   1120 74 7F              4949 	mov	a,#(0xFF ^ 0x80)
   1122 8D F0              4950 	mov	b,r5
   1124 63 F0 80           4951 	xrl	b,#0x80
   1127 95 F0              4952 	subb	a,b
                           4953 ;	genIfxJump
                           4954 ;	Peephole 112.b	changed ljmp to sjmp
                           4955 ;	Peephole 160.a	removed sjmp by inverse jump logic
   1129 40 6B              4956 	jc	00126$
                           4957 ;	Peephole 300	removed redundant label 00229$
                           4958 ;	main.c:587: if(heli_page != BOUND_HELI_D)
                           4959 ;	genAssign
   112B 90s00r00           4960 	mov	dptr,#_heli_page
   112E E0                 4961 	movx	a,@dptr
   112F FA                 4962 	mov	r2,a
   1130 A3                 4963 	inc	dptr
   1131 E0                 4964 	movx	a,@dptr
   1132 FB                 4965 	mov	r3,a
                           4966 ;	genCmpEq
                           4967 ;	gencjneshort
   1133 BA 06 05           4968 	cjne	r2,#0x06,00230$
   1136 BB 00 02           4969 	cjne	r3,#0x00,00230$
                           4970 ;	Peephole 112.b	changed ljmp to sjmp
   1139 80 0B              4971 	sjmp	00118$
   113B                    4972 00230$:
                           4973 ;	main.c:588: heli_page++;
                           4974 ;	genPlus
   113B 90s00r00           4975 	mov	dptr,#_heli_page
                           4976 ;     genPlusIncr
   113E 74 01              4977 	mov	a,#0x01
                           4978 ;	Peephole 236.a	used r2 instead of ar2
   1140 2A                 4979 	add	a,r2
   1141 F0                 4980 	movx	@dptr,a
                           4981 ;	Peephole 181	changed mov to clr
   1142 E4                 4982 	clr	a
                           4983 ;	Peephole 236.b	used r3 instead of ar3
   1143 3B                 4984 	addc	a,r3
   1144 A3                 4985 	inc	dptr
   1145 F0                 4986 	movx	@dptr,a
   1146                    4987 00118$:
                           4988 ;	main.c:589: if(++heli_line == BOUND_HELI_R)
                           4989 ;	genPlus
   1146 90s00r02           4990 	mov	dptr,#_heli_line
   1149 E0                 4991 	movx	a,@dptr
   114A 24 01              4992 	add	a,#0x01
   114C F0                 4993 	movx	@dptr,a
                           4994 ;	genAssign
   114D 90s00r02           4995 	mov	dptr,#_heli_line
   1150 E0                 4996 	movx	a,@dptr
   1151 FA                 4997 	mov	r2,a
                           4998 ;	genCmpEq
                           4999 ;	gencjneshort
                           5000 ;	Peephole 112.b	changed ljmp to sjmp
                           5001 ;	Peephole 198.b	optimized misc jump sequence
   1152 BA 7B 06           5002 	cjne	r2,#0x7B,00120$
                           5003 ;	Peephole 200.b	removed redundant sjmp
                           5004 ;	Peephole 300	removed redundant label 00231$
                           5005 ;	Peephole 300	removed redundant label 00232$
                           5006 ;	main.c:590: heli_line = 122;
                           5007 ;	genAssign
   1155 90s00r02           5008 	mov	dptr,#_heli_line
   1158 74 7A              5009 	mov	a,#0x7A
   115A F0                 5010 	movx	@dptr,a
   115B                    5011 00120$:
                           5012 ;	main.c:591: GLCD_WriteHeli(HELI,heli_page,heli_line);
                           5013 ;	genAssign
   115B 90s00r00           5014 	mov	dptr,#_heli_page
   115E E0                 5015 	movx	a,@dptr
   115F FA                 5016 	mov	r2,a
   1160 A3                 5017 	inc	dptr
   1161 E0                 5018 	movx	a,@dptr
   1162 FB                 5019 	mov	r3,a
                           5020 ;	genCast
                           5021 ;	genAssign
   1163 90s00r02           5022 	mov	dptr,#_heli_line
   1166 E0                 5023 	movx	a,@dptr
   1167 FB                 5024 	mov	r3,a
                           5025 ;	genAssign
   1168 90s00r00           5026 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   116B EA                 5027 	mov	a,r2
   116C F0                 5028 	movx	@dptr,a
                           5029 ;	genAssign
   116D 90s00r00           5030 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   1170 EB                 5031 	mov	a,r3
   1171 F0                 5032 	movx	@dptr,a
                           5033 ;	genCall
   1172 75 82 80           5034 	mov	dpl,#0x80
   1175 12s00r00           5035 	lcall	_GLCD_WriteHeli
                           5036 ;	main.c:592: GLCD_WriteHeli(' ',heli_page - 1, heli_line);
                           5037 ;	genAssign
   1178 90s00r00           5038 	mov	dptr,#_heli_page
   117B E0                 5039 	movx	a,@dptr
   117C FA                 5040 	mov	r2,a
   117D A3                 5041 	inc	dptr
   117E E0                 5042 	movx	a,@dptr
   117F FB                 5043 	mov	r3,a
                           5044 ;	genCast
                           5045 ;	genMinus
                           5046 ;	genMinusDec
   1180 1A                 5047 	dec	r2
                           5048 ;	genAssign
   1181 90s00r02           5049 	mov	dptr,#_heli_line
   1184 E0                 5050 	movx	a,@dptr
   1185 FB                 5051 	mov	r3,a
                           5052 ;	genAssign
   1186 90s00r00           5053 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   1189 EA                 5054 	mov	a,r2
   118A F0                 5055 	movx	@dptr,a
                           5056 ;	genAssign
   118B 90s00r00           5057 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   118E EB                 5058 	mov	a,r3
   118F F0                 5059 	movx	@dptr,a
                           5060 ;	genCall
   1190 75 82 20           5061 	mov	dpl,#0x20
                           5062 ;	Peephole 112.b	changed ljmp to sjmp
                           5063 ;	Peephole 251.b	replaced sjmp to ret with ret
                           5064 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1193 02s00r00           5065 	ljmp	_GLCD_WriteHeli
   1196                    5066 00126$:
                           5067 ;	main.c:598: if(heli_page != BOUND_HELI_D)
                           5068 ;	genAssign
   1196 90s00r00           5069 	mov	dptr,#_heli_page
   1199 E0                 5070 	movx	a,@dptr
   119A FA                 5071 	mov	r2,a
   119B A3                 5072 	inc	dptr
   119C E0                 5073 	movx	a,@dptr
   119D FB                 5074 	mov	r3,a
                           5075 ;	genCmpEq
                           5076 ;	gencjneshort
   119E BA 06 05           5077 	cjne	r2,#0x06,00233$
   11A1 BB 00 02           5078 	cjne	r3,#0x00,00233$
                           5079 ;	Peephole 112.b	changed ljmp to sjmp
   11A4 80 0B              5080 	sjmp	00122$
   11A6                    5081 00233$:
                           5082 ;	main.c:599: heli_page++;
                           5083 ;	genPlus
   11A6 90s00r00           5084 	mov	dptr,#_heli_page
                           5085 ;     genPlusIncr
   11A9 74 01              5086 	mov	a,#0x01
                           5087 ;	Peephole 236.a	used r2 instead of ar2
   11AB 2A                 5088 	add	a,r2
   11AC F0                 5089 	movx	@dptr,a
                           5090 ;	Peephole 181	changed mov to clr
   11AD E4                 5091 	clr	a
                           5092 ;	Peephole 236.b	used r3 instead of ar3
   11AE 3B                 5093 	addc	a,r3
   11AF A3                 5094 	inc	dptr
   11B0 F0                 5095 	movx	@dptr,a
   11B1                    5096 00122$:
                           5097 ;	main.c:600: if(--heli_line == BOUND_HELI_L)
                           5098 ;	genMinus
   11B1 90s00r02           5099 	mov	dptr,#_heli_line
                           5100 ;	genMinusDec
   11B4 E0                 5101 	movx	a,@dptr
   11B5 14                 5102 	dec	a
                           5103 ;	genAssign
   11B6 90s00r02           5104 	mov	dptr,#_heli_line
   11B9 F0                 5105 	movx	@dptr,a
                           5106 ;	genAssign
   11BA 90s00r02           5107 	mov	dptr,#_heli_line
   11BD E0                 5108 	movx	a,@dptr
   11BE FA                 5109 	mov	r2,a
                           5110 ;	genCmpEq
                           5111 ;	gencjneshort
                           5112 ;	Peephole 112.b	changed ljmp to sjmp
                           5113 ;	Peephole 198.b	optimized misc jump sequence
   11BF BA 02 06           5114 	cjne	r2,#0x02,00124$
                           5115 ;	Peephole 200.b	removed redundant sjmp
                           5116 ;	Peephole 300	removed redundant label 00234$
                           5117 ;	Peephole 300	removed redundant label 00235$
                           5118 ;	main.c:601: heli_line = 3;
                           5119 ;	genAssign
   11C2 90s00r02           5120 	mov	dptr,#_heli_line
   11C5 74 03              5121 	mov	a,#0x03
   11C7 F0                 5122 	movx	@dptr,a
   11C8                    5123 00124$:
                           5124 ;	main.c:602: GLCD_WriteHeli(HELI,heli_page,heli_line);
                           5125 ;	genAssign
   11C8 90s00r00           5126 	mov	dptr,#_heli_page
   11CB E0                 5127 	movx	a,@dptr
   11CC FA                 5128 	mov	r2,a
   11CD A3                 5129 	inc	dptr
   11CE E0                 5130 	movx	a,@dptr
   11CF FB                 5131 	mov	r3,a
                           5132 ;	genCast
                           5133 ;	genAssign
   11D0 90s00r02           5134 	mov	dptr,#_heli_line
   11D3 E0                 5135 	movx	a,@dptr
   11D4 FB                 5136 	mov	r3,a
                           5137 ;	genAssign
   11D5 90s00r00           5138 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   11D8 EA                 5139 	mov	a,r2
   11D9 F0                 5140 	movx	@dptr,a
                           5141 ;	genAssign
   11DA 90s00r00           5142 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   11DD EB                 5143 	mov	a,r3
   11DE F0                 5144 	movx	@dptr,a
                           5145 ;	genCall
   11DF 75 82 80           5146 	mov	dpl,#0x80
   11E2 12s00r00           5147 	lcall	_GLCD_WriteHeli
                           5148 ;	main.c:603: GLCD_WriteHeli(' ',heli_page - 1, heli_line);
                           5149 ;	genAssign
   11E5 90s00r00           5150 	mov	dptr,#_heli_page
   11E8 E0                 5151 	movx	a,@dptr
   11E9 FA                 5152 	mov	r2,a
   11EA A3                 5153 	inc	dptr
   11EB E0                 5154 	movx	a,@dptr
   11EC FB                 5155 	mov	r3,a
                           5156 ;	genCast
                           5157 ;	genMinus
                           5158 ;	genMinusDec
   11ED 1A                 5159 	dec	r2
                           5160 ;	genAssign
   11EE 90s00r02           5161 	mov	dptr,#_heli_line
   11F1 E0                 5162 	movx	a,@dptr
   11F2 FB                 5163 	mov	r3,a
                           5164 ;	genAssign
   11F3 90s00r00           5165 	mov	dptr,#_GLCD_WriteHeli_PARM_2
   11F6 EA                 5166 	mov	a,r2
   11F7 F0                 5167 	movx	@dptr,a
                           5168 ;	genAssign
   11F8 90s00r00           5169 	mov	dptr,#_GLCD_WriteHeli_PARM_3
   11FB EB                 5170 	mov	a,r3
   11FC F0                 5171 	movx	@dptr,a
                           5172 ;	genCall
   11FD 75 82 20           5173 	mov	dpl,#0x20
                           5174 ;	Peephole 253.b	replaced lcall/ret with ljmp
   1200 02s00r00           5175 	ljmp	_GLCD_WriteHeli
                           5176 ;
                           5177 ;------------------------------------------------------------
                           5178 ;Allocation info for local variables in function 'int0_isr'
                           5179 ;------------------------------------------------------------
                           5180 ;mode                      Allocated with name '_int0_isr_mode_1_1'
                           5181 ;------------------------------------------------------------
                           5182 ;	main.c:608: void int0_isr(void) __interrupt (0)
                           5183 ;	-----------------------------------------
                           5184 ;	 function int0_isr
                           5185 ;	-----------------------------------------
   1203                    5186 _int0_isr:
   1203 C0 E0              5187 	push	acc
   1205 C0 82              5188 	push	dpl
   1207 C0 83              5189 	push	dph
   1209 C0 02              5190 	push	ar2
                           5191 ;	main.c:614: if(!calibrate_mode)
                           5192 ;	genAssign
   120B 90s00r02           5193 	mov	dptr,#_calibrate_mode
   120E E0                 5194 	movx	a,@dptr
                           5195 ;	genIfx
   120F FA                 5196 	mov	r2,a
                           5197 ;	Peephole 105	removed redundant mov
                           5198 ;	genIfxJump
                           5199 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1210 70 2A              5200 	jnz	00105$
                           5201 ;	Peephole 300	removed redundant label 00111$
                           5202 ;	main.c:617: if(!mode)
                           5203 ;	genAssign
   1212 90s01r3B           5204 	mov	dptr,#_int0_isr_mode_1_1
   1215 E0                 5205 	movx	a,@dptr
                           5206 ;	genIfx
   1216 FA                 5207 	mov	r2,a
                           5208 ;	Peephole 105	removed redundant mov
                           5209 ;	genIfxJump
                           5210 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1217 70 13              5211 	jnz	00102$
                           5212 ;	Peephole 300	removed redundant label 00112$
                           5213 ;	main.c:619: P1_2 = 0;
                           5214 ;	genAssign
   1219 C2 92              5215 	clr	_P1_2
                           5216 ;	main.c:620: cheat_mode = 1;
                           5217 ;	genAssign
   121B 90s00r00           5218 	mov	dptr,#_cheat_mode
   121E 74 01              5219 	mov	a,#0x01
   1220 F0                 5220 	movx	@dptr,a
   1221 E4                 5221 	clr	a
   1222 A3                 5222 	inc	dptr
   1223 F0                 5223 	movx	@dptr,a
                           5224 ;	main.c:621: mode = 1;
                           5225 ;	genAssign
   1224 90s01r3B           5226 	mov	dptr,#_int0_isr_mode_1_1
   1227 74 01              5227 	mov	a,#0x01
   1229 F0                 5228 	movx	@dptr,a
                           5229 ;	Peephole 112.b	changed ljmp to sjmp
   122A 80 1B              5230 	sjmp	00107$
   122C                    5231 00102$:
                           5232 ;	main.c:625: P1_2 = 1;
                           5233 ;	genAssign
   122C D2 92              5234 	setb	_P1_2
                           5235 ;	main.c:626: cheat_mode = 0;
                           5236 ;	genAssign
   122E 90s00r00           5237 	mov	dptr,#_cheat_mode
   1231 E4                 5238 	clr	a
   1232 F0                 5239 	movx	@dptr,a
   1233 A3                 5240 	inc	dptr
   1234 F0                 5241 	movx	@dptr,a
                           5242 ;	main.c:627: mode = 0;
                           5243 ;	genAssign
   1235 90s01r3B           5244 	mov	dptr,#_int0_isr_mode_1_1
                           5245 ;	Peephole 181	changed mov to clr
   1238 E4                 5246 	clr	a
   1239 F0                 5247 	movx	@dptr,a
                           5248 ;	Peephole 112.b	changed ljmp to sjmp
   123A 80 0B              5249 	sjmp	00107$
   123C                    5250 00105$:
                           5251 ;	main.c:633: calibrate = 1;
                           5252 ;	genAssign
   123C 90s00r03           5253 	mov	dptr,#_calibrate
   123F 74 01              5254 	mov	a,#0x01
   1241 F0                 5255 	movx	@dptr,a
                           5256 ;	main.c:635: calibrate_mode = 0;
                           5257 ;	genAssign
   1242 90s00r02           5258 	mov	dptr,#_calibrate_mode
                           5259 ;	Peephole 181	changed mov to clr
   1245 E4                 5260 	clr	a
   1246 F0                 5261 	movx	@dptr,a
   1247                    5262 00107$:
   1247 D0 02              5263 	pop	ar2
   1249 D0 83              5264 	pop	dph
   124B D0 82              5265 	pop	dpl
   124D D0 E0              5266 	pop	acc
   124F 32                 5267 	reti
                           5268 ;	eliminated unneeded push/pop psw
                           5269 ;	eliminated unneeded push/pop b
                           5270 	.area CSEG    (CODE)
                           5271 	.area CONST   (CODE)
   0000                    5272 _font5x8:
   0000 00                 5273 	.db #0x00
   0001 00                 5274 	.db #0x00
   0002 00                 5275 	.db #0x00
   0003 00                 5276 	.db #0x00
   0004 00                 5277 	.db #0x00
   0005 00                 5278 	.db #0x00
   0006 00                 5279 	.db #0x00
   0007 5F                 5280 	.db #0x5F
   0008 00                 5281 	.db #0x00
   0009 00                 5282 	.db #0x00
   000A 00                 5283 	.db #0x00
   000B 07                 5284 	.db #0x07
   000C 00                 5285 	.db #0x00
   000D 07                 5286 	.db #0x07
   000E 00                 5287 	.db #0x00
   000F 14                 5288 	.db #0x14
   0010 7F                 5289 	.db #0x7F
   0011 14                 5290 	.db #0x14
   0012 7F                 5291 	.db #0x7F
   0013 14                 5292 	.db #0x14
   0014 24                 5293 	.db #0x24
   0015 2A                 5294 	.db #0x2A
   0016 7F                 5295 	.db #0x7F
   0017 2A                 5296 	.db #0x2A
   0018 12                 5297 	.db #0x12
   0019 23                 5298 	.db #0x23
   001A 13                 5299 	.db #0x13
   001B 08                 5300 	.db #0x08
   001C 64                 5301 	.db #0x64
   001D 62                 5302 	.db #0x62
   001E 36                 5303 	.db #0x36
   001F 49                 5304 	.db #0x49
   0020 55                 5305 	.db #0x55
   0021 22                 5306 	.db #0x22
   0022 50                 5307 	.db #0x50
   0023 00                 5308 	.db #0x00
   0024 05                 5309 	.db #0x05
   0025 03                 5310 	.db #0x03
   0026 00                 5311 	.db #0x00
   0027 00                 5312 	.db #0x00
   0028 00                 5313 	.db #0x00
   0029 1C                 5314 	.db #0x1C
   002A 22                 5315 	.db #0x22
   002B 41                 5316 	.db #0x41
   002C 00                 5317 	.db #0x00
   002D 00                 5318 	.db #0x00
   002E 41                 5319 	.db #0x41
   002F 22                 5320 	.db #0x22
   0030 1C                 5321 	.db #0x1C
   0031 00                 5322 	.db #0x00
   0032 08                 5323 	.db #0x08
   0033 2A                 5324 	.db #0x2A
   0034 1C                 5325 	.db #0x1C
   0035 2A                 5326 	.db #0x2A
   0036 08                 5327 	.db #0x08
   0037 08                 5328 	.db #0x08
   0038 08                 5329 	.db #0x08
   0039 3E                 5330 	.db #0x3E
   003A 08                 5331 	.db #0x08
   003B 08                 5332 	.db #0x08
   003C 00                 5333 	.db #0x00
   003D 50                 5334 	.db #0x50
   003E 30                 5335 	.db #0x30
   003F 00                 5336 	.db #0x00
   0040 00                 5337 	.db #0x00
   0041 08                 5338 	.db #0x08
   0042 08                 5339 	.db #0x08
   0043 08                 5340 	.db #0x08
   0044 08                 5341 	.db #0x08
   0045 08                 5342 	.db #0x08
   0046 00                 5343 	.db #0x00
   0047 30                 5344 	.db #0x30
   0048 30                 5345 	.db #0x30
   0049 00                 5346 	.db #0x00
   004A 00                 5347 	.db #0x00
   004B 20                 5348 	.db #0x20
   004C 10                 5349 	.db #0x10
   004D 08                 5350 	.db #0x08
   004E 04                 5351 	.db #0x04
   004F 02                 5352 	.db #0x02
   0050 3E                 5353 	.db #0x3E
   0051 51                 5354 	.db #0x51
   0052 49                 5355 	.db #0x49
   0053 45                 5356 	.db #0x45
   0054 3E                 5357 	.db #0x3E
   0055 00                 5358 	.db #0x00
   0056 42                 5359 	.db #0x42
   0057 7F                 5360 	.db #0x7F
   0058 40                 5361 	.db #0x40
   0059 00                 5362 	.db #0x00
   005A 42                 5363 	.db #0x42
   005B 61                 5364 	.db #0x61
   005C 51                 5365 	.db #0x51
   005D 49                 5366 	.db #0x49
   005E 46                 5367 	.db #0x46
   005F 21                 5368 	.db #0x21
   0060 41                 5369 	.db #0x41
   0061 45                 5370 	.db #0x45
   0062 4B                 5371 	.db #0x4B
   0063 31                 5372 	.db #0x31
   0064 18                 5373 	.db #0x18
   0065 14                 5374 	.db #0x14
   0066 12                 5375 	.db #0x12
   0067 7F                 5376 	.db #0x7F
   0068 10                 5377 	.db #0x10
   0069 27                 5378 	.db #0x27
   006A 45                 5379 	.db #0x45
   006B 45                 5380 	.db #0x45
   006C 45                 5381 	.db #0x45
   006D 39                 5382 	.db #0x39
   006E 3C                 5383 	.db #0x3C
   006F 4A                 5384 	.db #0x4A
   0070 49                 5385 	.db #0x49
   0071 49                 5386 	.db #0x49
   0072 30                 5387 	.db #0x30
   0073 01                 5388 	.db #0x01
   0074 71                 5389 	.db #0x71
   0075 09                 5390 	.db #0x09
   0076 05                 5391 	.db #0x05
   0077 03                 5392 	.db #0x03
   0078 36                 5393 	.db #0x36
   0079 49                 5394 	.db #0x49
   007A 49                 5395 	.db #0x49
   007B 49                 5396 	.db #0x49
   007C 36                 5397 	.db #0x36
   007D 06                 5398 	.db #0x06
   007E 49                 5399 	.db #0x49
   007F 49                 5400 	.db #0x49
   0080 29                 5401 	.db #0x29
   0081 1E                 5402 	.db #0x1E
   0082 00                 5403 	.db #0x00
   0083 36                 5404 	.db #0x36
   0084 36                 5405 	.db #0x36
   0085 00                 5406 	.db #0x00
   0086 00                 5407 	.db #0x00
   0087 00                 5408 	.db #0x00
   0088 56                 5409 	.db #0x56
   0089 36                 5410 	.db #0x36
   008A 00                 5411 	.db #0x00
   008B 00                 5412 	.db #0x00
   008C 00                 5413 	.db #0x00
   008D 08                 5414 	.db #0x08
   008E 14                 5415 	.db #0x14
   008F 22                 5416 	.db #0x22
   0090 41                 5417 	.db #0x41
   0091 14                 5418 	.db #0x14
   0092 14                 5419 	.db #0x14
   0093 14                 5420 	.db #0x14
   0094 14                 5421 	.db #0x14
   0095 14                 5422 	.db #0x14
   0096 41                 5423 	.db #0x41
   0097 22                 5424 	.db #0x22
   0098 14                 5425 	.db #0x14
   0099 08                 5426 	.db #0x08
   009A 00                 5427 	.db #0x00
   009B 02                 5428 	.db #0x02
   009C 01                 5429 	.db #0x01
   009D 51                 5430 	.db #0x51
   009E 09                 5431 	.db #0x09
   009F 06                 5432 	.db #0x06
   00A0 32                 5433 	.db #0x32
   00A1 49                 5434 	.db #0x49
   00A2 79                 5435 	.db #0x79
   00A3 41                 5436 	.db #0x41
   00A4 3E                 5437 	.db #0x3E
   00A5 7E                 5438 	.db #0x7E
   00A6 11                 5439 	.db #0x11
   00A7 11                 5440 	.db #0x11
   00A8 11                 5441 	.db #0x11
   00A9 7E                 5442 	.db #0x7E
   00AA 7F                 5443 	.db #0x7F
   00AB 49                 5444 	.db #0x49
   00AC 49                 5445 	.db #0x49
   00AD 49                 5446 	.db #0x49
   00AE 36                 5447 	.db #0x36
   00AF 3E                 5448 	.db #0x3E
   00B0 41                 5449 	.db #0x41
   00B1 41                 5450 	.db #0x41
   00B2 41                 5451 	.db #0x41
   00B3 22                 5452 	.db #0x22
   00B4 7F                 5453 	.db #0x7F
   00B5 41                 5454 	.db #0x41
   00B6 41                 5455 	.db #0x41
   00B7 22                 5456 	.db #0x22
   00B8 1C                 5457 	.db #0x1C
   00B9 7F                 5458 	.db #0x7F
   00BA 49                 5459 	.db #0x49
   00BB 49                 5460 	.db #0x49
   00BC 49                 5461 	.db #0x49
   00BD 41                 5462 	.db #0x41
   00BE 7F                 5463 	.db #0x7F
   00BF 09                 5464 	.db #0x09
   00C0 09                 5465 	.db #0x09
   00C1 01                 5466 	.db #0x01
   00C2 01                 5467 	.db #0x01
   00C3 3E                 5468 	.db #0x3E
   00C4 41                 5469 	.db #0x41
   00C5 41                 5470 	.db #0x41
   00C6 51                 5471 	.db #0x51
   00C7 32                 5472 	.db #0x32
   00C8 7F                 5473 	.db #0x7F
   00C9 08                 5474 	.db #0x08
   00CA 08                 5475 	.db #0x08
   00CB 08                 5476 	.db #0x08
   00CC 7F                 5477 	.db #0x7F
   00CD 00                 5478 	.db #0x00
   00CE 41                 5479 	.db #0x41
   00CF 7F                 5480 	.db #0x7F
   00D0 41                 5481 	.db #0x41
   00D1 00                 5482 	.db #0x00
   00D2 20                 5483 	.db #0x20
   00D3 40                 5484 	.db #0x40
   00D4 41                 5485 	.db #0x41
   00D5 3F                 5486 	.db #0x3F
   00D6 01                 5487 	.db #0x01
   00D7 7F                 5488 	.db #0x7F
   00D8 08                 5489 	.db #0x08
   00D9 14                 5490 	.db #0x14
   00DA 22                 5491 	.db #0x22
   00DB 41                 5492 	.db #0x41
   00DC 7F                 5493 	.db #0x7F
   00DD 40                 5494 	.db #0x40
   00DE 40                 5495 	.db #0x40
   00DF 40                 5496 	.db #0x40
   00E0 40                 5497 	.db #0x40
   00E1 7F                 5498 	.db #0x7F
   00E2 02                 5499 	.db #0x02
   00E3 04                 5500 	.db #0x04
   00E4 02                 5501 	.db #0x02
   00E5 7F                 5502 	.db #0x7F
   00E6 7F                 5503 	.db #0x7F
   00E7 04                 5504 	.db #0x04
   00E8 08                 5505 	.db #0x08
   00E9 10                 5506 	.db #0x10
   00EA 7F                 5507 	.db #0x7F
   00EB 3E                 5508 	.db #0x3E
   00EC 41                 5509 	.db #0x41
   00ED 41                 5510 	.db #0x41
   00EE 41                 5511 	.db #0x41
   00EF 3E                 5512 	.db #0x3E
   00F0 7F                 5513 	.db #0x7F
   00F1 09                 5514 	.db #0x09
   00F2 09                 5515 	.db #0x09
   00F3 09                 5516 	.db #0x09
   00F4 06                 5517 	.db #0x06
   00F5 3E                 5518 	.db #0x3E
   00F6 41                 5519 	.db #0x41
   00F7 51                 5520 	.db #0x51
   00F8 21                 5521 	.db #0x21
   00F9 5E                 5522 	.db #0x5E
   00FA 7F                 5523 	.db #0x7F
   00FB 09                 5524 	.db #0x09
   00FC 19                 5525 	.db #0x19
   00FD 29                 5526 	.db #0x29
   00FE 46                 5527 	.db #0x46
   00FF 46                 5528 	.db #0x46
   0100 49                 5529 	.db #0x49
   0101 49                 5530 	.db #0x49
   0102 49                 5531 	.db #0x49
   0103 31                 5532 	.db #0x31
   0104 01                 5533 	.db #0x01
   0105 01                 5534 	.db #0x01
   0106 7F                 5535 	.db #0x7F
   0107 01                 5536 	.db #0x01
   0108 01                 5537 	.db #0x01
   0109 3F                 5538 	.db #0x3F
   010A 40                 5539 	.db #0x40
   010B 40                 5540 	.db #0x40
   010C 40                 5541 	.db #0x40
   010D 3F                 5542 	.db #0x3F
   010E 1F                 5543 	.db #0x1F
   010F 20                 5544 	.db #0x20
   0110 40                 5545 	.db #0x40
   0111 20                 5546 	.db #0x20
   0112 1F                 5547 	.db #0x1F
   0113 7F                 5548 	.db #0x7F
   0114 20                 5549 	.db #0x20
   0115 18                 5550 	.db #0x18
   0116 20                 5551 	.db #0x20
   0117 7F                 5552 	.db #0x7F
   0118 63                 5553 	.db #0x63
   0119 14                 5554 	.db #0x14
   011A 08                 5555 	.db #0x08
   011B 14                 5556 	.db #0x14
   011C 63                 5557 	.db #0x63
   011D 03                 5558 	.db #0x03
   011E 04                 5559 	.db #0x04
   011F 78                 5560 	.db #0x78
   0120 04                 5561 	.db #0x04
   0121 03                 5562 	.db #0x03
   0122 61                 5563 	.db #0x61
   0123 51                 5564 	.db #0x51
   0124 49                 5565 	.db #0x49
   0125 45                 5566 	.db #0x45
   0126 43                 5567 	.db #0x43
   0127 00                 5568 	.db #0x00
   0128 00                 5569 	.db #0x00
   0129 7F                 5570 	.db #0x7F
   012A 41                 5571 	.db #0x41
   012B 41                 5572 	.db #0x41
   012C 02                 5573 	.db #0x02
   012D 04                 5574 	.db #0x04
   012E 08                 5575 	.db #0x08
   012F 10                 5576 	.db #0x10
   0130 20                 5577 	.db #0x20
   0131 41                 5578 	.db #0x41
   0132 41                 5579 	.db #0x41
   0133 7F                 5580 	.db #0x7F
   0134 00                 5581 	.db #0x00
   0135 00                 5582 	.db #0x00
   0136 04                 5583 	.db #0x04
   0137 02                 5584 	.db #0x02
   0138 01                 5585 	.db #0x01
   0139 02                 5586 	.db #0x02
   013A 04                 5587 	.db #0x04
   013B 40                 5588 	.db #0x40
   013C 40                 5589 	.db #0x40
   013D 40                 5590 	.db #0x40
   013E 40                 5591 	.db #0x40
   013F 40                 5592 	.db #0x40
   0140 00                 5593 	.db #0x00
   0141 01                 5594 	.db #0x01
   0142 02                 5595 	.db #0x02
   0143 04                 5596 	.db #0x04
   0144 00                 5597 	.db #0x00
   0145 20                 5598 	.db #0x20
   0146 54                 5599 	.db #0x54
   0147 54                 5600 	.db #0x54
   0148 54                 5601 	.db #0x54
   0149 78                 5602 	.db #0x78
   014A 7F                 5603 	.db #0x7F
   014B 48                 5604 	.db #0x48
   014C 44                 5605 	.db #0x44
   014D 44                 5606 	.db #0x44
   014E 38                 5607 	.db #0x38
   014F 38                 5608 	.db #0x38
   0150 44                 5609 	.db #0x44
   0151 44                 5610 	.db #0x44
   0152 44                 5611 	.db #0x44
   0153 20                 5612 	.db #0x20
   0154 38                 5613 	.db #0x38
   0155 44                 5614 	.db #0x44
   0156 44                 5615 	.db #0x44
   0157 48                 5616 	.db #0x48
   0158 7F                 5617 	.db #0x7F
   0159 38                 5618 	.db #0x38
   015A 54                 5619 	.db #0x54
   015B 54                 5620 	.db #0x54
   015C 54                 5621 	.db #0x54
   015D 18                 5622 	.db #0x18
   015E 08                 5623 	.db #0x08
   015F 7E                 5624 	.db #0x7E
   0160 09                 5625 	.db #0x09
   0161 01                 5626 	.db #0x01
   0162 02                 5627 	.db #0x02
   0163 08                 5628 	.db #0x08
   0164 14                 5629 	.db #0x14
   0165 54                 5630 	.db #0x54
   0166 54                 5631 	.db #0x54
   0167 3C                 5632 	.db #0x3C
   0168 7F                 5633 	.db #0x7F
   0169 08                 5634 	.db #0x08
   016A 04                 5635 	.db #0x04
   016B 04                 5636 	.db #0x04
   016C 78                 5637 	.db #0x78
   016D 00                 5638 	.db #0x00
   016E 44                 5639 	.db #0x44
   016F 7D                 5640 	.db #0x7D
   0170 40                 5641 	.db #0x40
   0171 00                 5642 	.db #0x00
   0172 20                 5643 	.db #0x20
   0173 40                 5644 	.db #0x40
   0174 44                 5645 	.db #0x44
   0175 3D                 5646 	.db #0x3D
   0176 00                 5647 	.db #0x00
   0177 00                 5648 	.db #0x00
   0178 7F                 5649 	.db #0x7F
   0179 10                 5650 	.db #0x10
   017A 28                 5651 	.db #0x28
   017B 44                 5652 	.db #0x44
   017C 00                 5653 	.db #0x00
   017D 41                 5654 	.db #0x41
   017E 7F                 5655 	.db #0x7F
   017F 40                 5656 	.db #0x40
   0180 00                 5657 	.db #0x00
   0181 7C                 5658 	.db #0x7C
   0182 04                 5659 	.db #0x04
   0183 18                 5660 	.db #0x18
   0184 04                 5661 	.db #0x04
   0185 78                 5662 	.db #0x78
   0186 7C                 5663 	.db #0x7C
   0187 08                 5664 	.db #0x08
   0188 04                 5665 	.db #0x04
   0189 04                 5666 	.db #0x04
   018A 78                 5667 	.db #0x78
   018B 38                 5668 	.db #0x38
   018C 44                 5669 	.db #0x44
   018D 44                 5670 	.db #0x44
   018E 44                 5671 	.db #0x44
   018F 38                 5672 	.db #0x38
   0190 7C                 5673 	.db #0x7C
   0191 14                 5674 	.db #0x14
   0192 14                 5675 	.db #0x14
   0193 14                 5676 	.db #0x14
   0194 08                 5677 	.db #0x08
   0195 08                 5678 	.db #0x08
   0196 14                 5679 	.db #0x14
   0197 14                 5680 	.db #0x14
   0198 18                 5681 	.db #0x18
   0199 7C                 5682 	.db #0x7C
   019A 7C                 5683 	.db #0x7C
   019B 08                 5684 	.db #0x08
   019C 04                 5685 	.db #0x04
   019D 04                 5686 	.db #0x04
   019E 08                 5687 	.db #0x08
   019F 48                 5688 	.db #0x48
   01A0 54                 5689 	.db #0x54
   01A1 54                 5690 	.db #0x54
   01A2 54                 5691 	.db #0x54
   01A3 20                 5692 	.db #0x20
   01A4 04                 5693 	.db #0x04
   01A5 3F                 5694 	.db #0x3F
   01A6 44                 5695 	.db #0x44
   01A7 40                 5696 	.db #0x40
   01A8 20                 5697 	.db #0x20
   01A9 3C                 5698 	.db #0x3C
   01AA 40                 5699 	.db #0x40
   01AB 40                 5700 	.db #0x40
   01AC 20                 5701 	.db #0x20
   01AD 7C                 5702 	.db #0x7C
   01AE 1C                 5703 	.db #0x1C
   01AF 20                 5704 	.db #0x20
   01B0 40                 5705 	.db #0x40
   01B1 20                 5706 	.db #0x20
   01B2 1C                 5707 	.db #0x1C
   01B3 3C                 5708 	.db #0x3C
   01B4 40                 5709 	.db #0x40
   01B5 30                 5710 	.db #0x30
   01B6 40                 5711 	.db #0x40
   01B7 3C                 5712 	.db #0x3C
   01B8 44                 5713 	.db #0x44
   01B9 28                 5714 	.db #0x28
   01BA 10                 5715 	.db #0x10
   01BB 28                 5716 	.db #0x28
   01BC 44                 5717 	.db #0x44
   01BD 0C                 5718 	.db #0x0C
   01BE 50                 5719 	.db #0x50
   01BF 50                 5720 	.db #0x50
   01C0 50                 5721 	.db #0x50
   01C1 3C                 5722 	.db #0x3C
   01C2 44                 5723 	.db #0x44
   01C3 64                 5724 	.db #0x64
   01C4 54                 5725 	.db #0x54
   01C5 4C                 5726 	.db #0x4C
   01C6 44                 5727 	.db #0x44
   01C7 00                 5728 	.db #0x00
   01C8 08                 5729 	.db #0x08
   01C9 36                 5730 	.db #0x36
   01CA 41                 5731 	.db #0x41
   01CB 00                 5732 	.db #0x00
   01CC 00                 5733 	.db #0x00
   01CD 00                 5734 	.db #0x00
   01CE 7F                 5735 	.db #0x7F
   01CF 00                 5736 	.db #0x00
   01D0 00                 5737 	.db #0x00
   01D1 00                 5738 	.db #0x00
   01D2 41                 5739 	.db #0x41
   01D3 36                 5740 	.db #0x36
   01D4 08                 5741 	.db #0x08
   01D5 00                 5742 	.db #0x00
   01D6 08                 5743 	.db #0x08
   01D7 08                 5744 	.db #0x08
   01D8 2A                 5745 	.db #0x2A
   01D9 1C                 5746 	.db #0x1C
   01DA 08                 5747 	.db #0x08
   01DB 08                 5748 	.db #0x08
   01DC 1C                 5749 	.db #0x1C
   01DD 2A                 5750 	.db #0x2A
   01DE 08                 5751 	.db #0x08
   01DF 08                 5752 	.db #0x08
   01E0 00                 5753 	.db #0x00
   01E1 3A                 5754 	.db #0x3A
   01E2 3E                 5755 	.db #0x3E
   01E3 3A                 5756 	.db #0x3A
   01E4 00                 5757 	.db #0x00
   01E5 FF                 5758 	.db #0xFF
   01E6 00                 5759 	.db #0x00
   01E7 00                 5760 	.db #0x00
   01E8 00                 5761 	.db #0x00
   01E9 00                 5762 	.db #0x00
   01EA 00                 5763 	.db #0x00
   01EB FF                 5764 	.db #0xFF
   01EC 00                 5765 	.db #0x00
   01ED 00                 5766 	.db #0x00
   01EE 00                 5767 	.db #0x00
   01EF 00                 5768 	.db #0x00
   01F0 00                 5769 	.db #0x00
   01F1                    5770 __str_0:
   01F1 45 56 45 52 59 54  5771 	.ascii "EVERYTHING BROKE!"
        48 49 4E 47 20 42
        52 4F 4B 45 21
   0202 0A                 5772 	.db 0x0A
   0203 0D                 5773 	.db 0x0D
   0204 00                 5774 	.db 0x00
                           5775 	.area XINIT   (CODE)
   0000                    5776 __xinit__cheat_mode:
   0000 00 00              5777 	.byte #0x00,#0x00
   0002                    5778 __xinit__calibrate_mode:
   0002 00                 5779 	.db #0x00
   0003                    5780 __xinit__calibrate:
   0003 00                 5781 	.db #0x00
