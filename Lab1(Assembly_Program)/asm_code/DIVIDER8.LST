DUNFIELD 8051 ASSEMBLER: DIVIDER8                                     PAGE: 1
           Cycle/Instr.:#ofTimesRun
0000                              1     ORG     $0000
0000                              2  BEGIN
0000  74 0C               1:1     3     MOV     A,#0ch                    ;Precondition: A must contain dividend
0002  75 F0 05            2:1     4     MOV     B,#05h                    ;Precondition: B must contain divisor
0020                              5  Q  DATA    020h                      ;Postcondition:Store quotient, remainder, error, and result in IRAM
0021                              6  R  DATA    021h
0022                              7  Z  DATA    022h
0030                              8  ERR        DATA    030h
0005  75 20 00            1:1     9     MOV     Q,#0                      ;Init quotient
0008                              10  ERR_DIV_ZERO:             
0008  A8 F0               1:1     11    MOV     R0,B                      ;Determine if there is a divide by 0
000A  B8 00 05            2:1     12    CJNE    R0,#0,CHECK_DIVIDEND
000D  75 30 01                    13    MOV     ERR,#01h                  ;Write error code if this occurs
0010  01 4B                       14    AJMP    END
0012                              15  CHECK_DIVIDEND:
0012  C3                  1:6     16    CLR     C
0013  B5 F0 07            2:6     17    CJNE    A,B,SUB_DIVISOR            ;Check if the dividend contains anymore divisors
0016  05 20                       18    INC     Q                          ;A and B are equal, so increment to get last divisor
0018  C3                          19    CLR     C                          ;Clear carry flag for subtraction
0019  95 F0                       20    SUBB    A,B                        ;Make final subtraction so remainder is correct
001B  01 26                       21    AJMP    MULT_8                     ;Jump to do final math operation
001D                              22  SUB_DIVISOR:
001D  40 07               2:6     23    JC      MULT_8                     ;If carry flag is set, there are not more divisors
001F  05 20               1:5     24    INC     Q                          ;Increment quotient since dividend contains divisor
0021  C3                  1:5     25    CLR     C                          ;Clear carry flag for subtraction 
0022  95 F0               1:5     26    SUBB    A,B                        ;Subtract a divisor from the dividend
0024  01 12               2:5     27    AJMP    CHECK_DIVIDEND             ;Check if more divisors are present in dividend
0026                              28  MULT_8:
0026  F5 21               1:1     29    MOV     R,A                        ;Store the remainder
0028  E5 20               1:1     30    MOV     A,Q                        ;Copy quotient
002A  78 00               1:1     31    MOV     R0,#0                      ;Create a counter to count rotations
002C                              32  LOOP_MULT:
002C  C3                  1:3     33    CLR     C                          ;Clear carry flag to ensure Overflow is not triggered by past comparison
002D  33                  1:3     34    RLC     A                          ;Multiply by 2
002E  08                  1:3     35    INC     R0                         ;Inc the counter
002F  40 0A               2:3     36    JC      OVERFLOW                   ;Check if carry flag is set, indicates that multiplication caused overflow
0031  B8 03 F8            2:3     37    CJNE    R0,#3,LOOP_MULT            ;Make sure all rotations are done
0034  75 30 00            2:1     38    MOV     ERR,#00h                   ;Arithmatic at this point is correct and has no overflow
0037  F5 22               1:1     39    MOV     Z,A                        ;Store result in Z
0039  01 4B               2:1     40    AJMP    END
003B                              41  OVERFLOW:
003B  B8 03 09                    42    CJNE    R0,#3,OVRFLOW_RR           ;Ensure all rotations have been executed
003E  75 30 02                    43    MOV     ERR,#02h                   ;Indicate overflow occured
0041  54 F8                       44    ANL     A,#0f8h                    ;Eliminate overflow bits
0043  F5 22                       45    MOV     Z,A                        ;Store 8-LSB of result
0045  01 4B                       46    AJMP    END
0047                              47  OVRFLOW_RR:
0047  33                          48    RLC     A                          ;Execute rotation for overflow case
0048  08                          49    INC     R0
0049  01 3B                       50    AJMP    OVERFLOW
004B                              51  END:
004B  80 FE                       52    SJMP    END
004D                              53    

Total # of cycles: 92 cycles
Execution Time   : 92 cycles * 1.085 microseconds = 99.82 microseconds 